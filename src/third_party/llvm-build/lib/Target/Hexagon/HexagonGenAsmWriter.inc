/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void HexagonInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    302U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    295U,	// BUNDLE
    312U,	// LIFETIME_START
    282U,	// LIFETIME_END
    518U,	// ADD64_rr
    4614U,	// ADDASL
    268435974U,	// ADD_ri
    270541851U,	// ADD_ri_cNotPt
    270541944U,	// ADD_ri_cPt
    270545947U,	// ADD_ri_cdnNotPt
    270546040U,	// ADD_ri_cdnPt
    518U,	// ADD_rr
    2106395U,	// ADD_rr_cNotPt
    2106488U,	// ADD_rr_cPt
    2110491U,	// ADD_rr_cdnNotPt
    2110584U,	// ADD_rr_cdnPt
    4211206U,	// ADDi_ASLri_V4
    6308358U,	// ADDi_LSRri_V4
    276840966U,	// ADDi_MPYri_V4
    8405510U,	// ADDi_MPYrr_V4
    536871430U,	// ADDr_ADDri_V4
    805306886U,	// ADDr_MPYir_V4
    1073742342U,	// ADDr_MPYri_V4
    1073742342U,	// ADDr_MPYrr_V4
    1342177798U,	// ADDr_SUBri_V4
    1342177798U,	// ADDri_SUBr_V4
    1621119494U,	// ADDri_acc
    1891652102U,	// ADDrr_acc
    327U,	// ADJCALLSTACKDOWN
    327U,	// ADJCALLSTACKUP
    268435974U,	// ADJDYNALLOC
    25172U,	// ALLOCFRAME
    29190U,	// ALL_pp
    14713350U,	// AND_pnotp
    2160099846U,	// AND_pp
    2426438150U,	// AND_ri
    2160099846U,	// AND_rr
    2160099846U,	// AND_rr64
    16786459U,	// AND_rr_cNotPt
    16786552U,	// AND_rr_cPt
    16790555U,	// AND_rr_cdnNotPt
    16790648U,	// AND_rr_cdnPt
    2166391302U,	// ANDd_NOTd_V4
    4231686U,	// ANDi_ASLri_V4
    6328838U,	// ANDi_LSRri_V4
    1897964038U,	// ANDr_ANDr_NOTr_V4
    1891672582U,	// ANDr_ANDrr_V4
    45574U,	// ANDr_ORrr_V4
    49670U,	// ANDr_XORrr_V4
    53766U,	// ANY_pp
    21029382U,	// ARGEXTEND
    2694902278U,	// ASL
    66054U,	// ASLH
    23077915U,	// ASLH_cNotPt_V4
    23078008U,	// ASLH_cPt_V4
    23082011U,	// ASLH_cdnNotPt_V4
    23082104U,	// ASLH_cdnPt_V4
    2963345926U,	// ASL_ADD_ri
    1891701254U,	// ASL_ADD_rr
    2963345926U,	// ASL_ADDd_ri
    1891701254U,	// ASL_ADDd_rr
    2963350022U,	// ASL_AND_ri
    1891705350U,	// ASL_AND_rr
    2963350022U,	// ASL_ANDd_ri
    1891705350U,	// ASL_ANDd_rr
    2963354118U,	// ASL_OR_ri
    1891709446U,	// ASL_OR_rr
    2963354118U,	// ASL_ORd_ri
    1891709446U,	// ASL_ORd_rr
    2963358214U,	// ASL_SUB_ri
    1891713542U,	// ASL_SUB_rr
    2963358214U,	// ASL_SUBd_ri
    1891713542U,	// ASL_SUBd_rr
    2963362310U,	// ASL_XOR_ri
    2963362310U,	// ASL_XORd_ri
    2160128518U,	// ASL_rr
    2160128518U,	// ASLd
    2694902278U,	// ASLd_ri
    1891717638U,	// ASLd_rr_xor_V4
    90630U,	// ASRH
    25175067U,	// ASRH_cNotPt_V4
    25175160U,	// ASRH_cPt_V4
    25179163U,	// ASRH_cdnNotPt_V4
    25179256U,	// ASRH_cdnPt_V4
    2963370502U,	// ASR_ADD_ri
    1891725830U,	// ASR_ADD_rr
    2963370502U,	// ASR_ADDd_ri
    1891725830U,	// ASR_ADDd_rr
    2963374598U,	// ASR_AND_ri
    1891729926U,	// ASR_AND_rr
    2963374598U,	// ASR_ANDd_ri
    1891729926U,	// ASR_ANDd_rr
    2963378694U,	// ASR_OR_ri
    1891734022U,	// ASR_OR_rr
    2963378694U,	// ASR_ORd_ri
    1891734022U,	// ASR_ORd_rr
    2963382790U,	// ASR_SUB_ri
    1891738118U,	// ASR_SUB_rr
    2963382790U,	// ASR_SUBd_ri
    1891738118U,	// ASR_SUBd_rr
    2694951430U,	// ASR_ri
    2160177670U,	// ASR_rr
    2694951430U,	// ASRd_ri
    2160177670U,	// ASRd_rr
    115206U,	// ASRd_rr_xor_V4
    383U,	// BARRIER
    119416U,	// BRCOND
    123412U,	// BR_JT
    123393U,	// CALL
    123405U,	// CALLR
    123405U,	// CALLRv3
    123393U,	// CALLv3
    2694967814U,	// CLRBIT
    2694967814U,	// CLRBIT_31
    2160198150U,	// CMPEHexagon4rr
    2426536454U,	// CMPEQri
    2160198150U,	// CMPEQrr
    27398662U,	// CMPGEUri
    27402758U,	// CMPGEri
    2160210438U,	// CMPGT64rr
    2160214534U,	// CMPGTU64rr
    2426552838U,	// CMPGTUri
    2160214534U,	// CMPGTUrr
    2426548742U,	// CMPGTri
    2160210438U,	// CMPGTrr
    152070U,	// CMPLTUrr
    156166U,	// CMPLTrr
    2695000582U,	// CMPbEQri_V4
    2160226822U,	// CMPbEQrr_sbsb_V4
    2160226822U,	// CMPbEQrr_ubub_V4
    2426569222U,	// CMPbGTUri_V4
    2160230918U,	// CMPbGTUrr_V4
    168454U,	// CMPbGTrr_V4
    2695012870U,	// CMPhEQri_V4
    2160239110U,	// CMPhEQrr_shl_V4
    2160239110U,	// CMPhEQrr_xor_V4
    2426581510U,	// CMPhGTUri_V4
    2160243206U,	// CMPhGTUrr_V4
    180742U,	// CMPhGTrr_shl_V4
    2426589702U,	// CMPnotEQ_ri
    2160251398U,	// CMPnotEQ_rr
    2426593798U,	// CMPnotGTU_ri
    2160255494U,	// CMPnotGTU_rr
    2426597894U,	// CMPnotGT_ri
    2160259590U,	// CMPnotGT_rr
    297992710U,	// COMBINE_Ii
    29557254U,	// COMBINE_Ir_V4
    2179142150U,	// COMBINE_hh
    2179142150U,	// COMBINE_hl
    302187014U,	// COMBINE_iI_V4
    2183336454U,	// COMBINE_lh
    2183336454U,	// COMBINE_ll
    2426606086U,	// COMBINE_rI_V4
    2160267782U,	// COMBINE_rr
    37757979U,	// COMBINE_rr_cNotPt
    37758072U,	// COMBINE_rr_cPt
    37762075U,	// COMBINE_rr_cdnNotPt
    37762168U,	// COMBINE_rr_cdnPt
    3261276678U,	// CONST32
    3261276678U,	// CONST32GP_set
    3221430790U,	// CONST32_Float_Real
    3221430790U,	// CONST32_Int_Real
    209414U,	// CONST32_Label
    3261276678U,	// CONST32_set
    42148358U,	// CONST32_set_jt
    213510U,	// CONST64_Float_Real
    213510U,	// CONST64_Int_Real
    217606U,	// CONVERT_d2df
    221702U,	// CONVERT_d2sf
    44265990U,	// CONVERT_df2d
    46363142U,	// CONVERT_df2d_nchop
    229894U,	// CONVERT_df2sf
    44274182U,	// CONVERT_df2ud
    46371334U,	// CONVERT_df2ud_nchop
    44278278U,	// CONVERT_df2uw
    46375430U,	// CONVERT_df2uw_nchop
    44282374U,	// CONVERT_df2w
    46379526U,	// CONVERT_df2w_nchop
    44286470U,	// CONVERT_sf2d
    46383622U,	// CONVERT_sf2d_nchop
    250374U,	// CONVERT_sf2df
    44294662U,	// CONVERT_sf2ud
    46391814U,	// CONVERT_sf2ud_nchop
    44298758U,	// CONVERT_sf2uw
    46395910U,	// CONVERT_sf2uw_nchop
    44302854U,	// CONVERT_sf2w
    46400006U,	// CONVERT_sf2w_nchop
    266758U,	// CONVERT_ud2df
    270854U,	// CONVERT_ud2sf
    274950U,	// CONVERT_uw2df
    279046U,	// CONVERT_uw2sf
    283142U,	// CONVERT_w2df
    287238U,	// CONVERT_w2sf
    291334U,	// CTLZ64_rr
    291334U,	// CTLZ_rr
    295430U,	// CTTZ64_rr
    295430U,	// CTTZ_rr
    351U,	// DEALLOCFRAME
    364U,	// DEALLOC_RET_V4
    299547U,	// DEALLOC_RET_cNotPt_V4
    303643U,	// DEALLOC_RET_cNotdnPnt_V4
    307739U,	// DEALLOC_RET_cNotdnPt_V4
    299640U,	// DEALLOC_RET_cPt_V4
    303736U,	// DEALLOC_RET_cdnPnt_V4
    307832U,	// DEALLOC_RET_cdnPt_V4
    262U,	// ENDLOOP0
    311814U,	// FCMPOEQ32_rr
    315910U,	// FCMPOEQ64_rr
    320006U,	// FCMPOGE32_rr
    324102U,	// FCMPOGE64_rr
    328198U,	// FCMPOGT32_rr
    332294U,	// FCMPOGT64_rr
    311814U,	// FCMPUEQ32_rr
    315910U,	// FCMPUEQ64_rr
    320006U,	// FCMPUGE32_rr
    324102U,	// FCMPUGE64_rr
    328198U,	// FCMPUGT32_rr
    332294U,	// FCMPUGT64_rr
    3261276678U,	// FCONST32_nsdata
    48570886U,	// FMADD_dp
    48574982U,	// FMADD_sp
    344582U,	// FMAX_dp
    348678U,	// FMAX_sp
    352774U,	// FMIN_dp
    356870U,	// FMIN_sp
    46498310U,	// HEXAGON_A2_abs
    46498310U,	// HEXAGON_A2_absp
    50692614U,	// HEXAGON_A2_abssat
    518U,	// HEXAGON_A2_add
    3489661446U,	// HEXAGON_A2_addh_h16_hh
    3489661446U,	// HEXAGON_A2_addh_h16_hl
    3758096902U,	// HEXAGON_A2_addh_h16_lh
    3758096902U,	// HEXAGON_A2_addh_h16_ll
    3489661446U,	// HEXAGON_A2_addh_h16_sat_hh
    3489661446U,	// HEXAGON_A2_addh_h16_sat_hl
    3758096902U,	// HEXAGON_A2_addh_h16_sat_lh
    3758096902U,	// HEXAGON_A2_addh_h16_sat_ll
    3758096902U,	// HEXAGON_A2_addh_l16_hl
    3758096902U,	// HEXAGON_A2_addh_l16_ll
    3758096902U,	// HEXAGON_A2_addh_l16_sat_hl
    3758096902U,	// HEXAGON_A2_addh_l16_sat_ll
    268435974U,	// HEXAGON_A2_addi
    518U,	// HEXAGON_A2_addp
    518U,	// HEXAGON_A2_addsat
    2160099846U,	// HEXAGON_A2_and
    2694873606U,	// HEXAGON_A2_andir
    2160099846U,	// HEXAGON_A2_andp
    66054U,	// HEXAGON_A2_aslh
    90630U,	// HEXAGON_A2_asrh
    2179142150U,	// HEXAGON_A2_combine_hh
    2179142150U,	// HEXAGON_A2_combine_hl
    2183336454U,	// HEXAGON_A2_combine_lh
    2183336454U,	// HEXAGON_A2_combine_ll
    302187014U,	// HEXAGON_A2_combineii
    2160267782U,	// HEXAGON_A2_combinew
    365062U,	// HEXAGON_A2_max
    369158U,	// HEXAGON_A2_maxu
    373254U,	// HEXAGON_A2_min
    377350U,	// HEXAGON_A2_minu
    46518790U,	// HEXAGON_A2_neg
    46518790U,	// HEXAGON_A2_negp
    50713094U,	// HEXAGON_A2_negsat
    385542U,	// HEXAGON_A2_not
    385542U,	// HEXAGON_A2_notp
    2160456198U,	// HEXAGON_A2_or
    2695229958U,	// HEXAGON_A2_orir
    2160456198U,	// HEXAGON_A2_orp
    393734U,	// HEXAGON_A2_sat
    397830U,	// HEXAGON_A2_satb
    401926U,	// HEXAGON_A2_sath
    406022U,	// HEXAGON_A2_satub
    410118U,	// HEXAGON_A2_satuh
    2160480774U,	// HEXAGON_A2_sub
    2179355142U,	// HEXAGON_A2_subh_h16_hh
    2179355142U,	// HEXAGON_A2_subh_h16_hl
    2183549446U,	// HEXAGON_A2_subh_h16_lh
    2183549446U,	// HEXAGON_A2_subh_h16_ll
    2179355142U,	// HEXAGON_A2_subh_h16_sat_hh
    2179355142U,	// HEXAGON_A2_subh_h16_sat_hl
    2183549446U,	// HEXAGON_A2_subh_h16_sat_lh
    2183549446U,	// HEXAGON_A2_subh_h16_sat_ll
    2183549446U,	// HEXAGON_A2_subh_l16_hl
    2183549446U,	// HEXAGON_A2_subh_l16_ll
    2183549446U,	// HEXAGON_A2_subh_l16_sat_hl
    2183549446U,	// HEXAGON_A2_subh_l16_sat_ll
    2160480774U,	// HEXAGON_A2_subp
    33972742U,	// HEXAGON_A2_subri
    2160480774U,	// HEXAGON_A2_subsat
    46559750U,	// HEXAGON_A2_svaddh
    50754054U,	// HEXAGON_A2_svaddhs
    426502U,	// HEXAGON_A2_svadduhs
    46567942U,	// HEXAGON_A2_svavgh
    52859398U,	// HEXAGON_A2_svavghs
    46572038U,	// HEXAGON_A2_svnavgh
    46576134U,	// HEXAGON_A2_svsubh
    50770438U,	// HEXAGON_A2_svsubhs
    442886U,	// HEXAGON_A2_svsubuhs
    446982U,	// HEXAGON_A2_swiz
    451078U,	// HEXAGON_A2_sxtb
    455174U,	// HEXAGON_A2_sxth
    459270U,	// HEXAGON_A2_sxtw
    21029382U,	// HEXAGON_A2_tfr
    463366U,	// HEXAGON_A2_tfrih
    467462U,	// HEXAGON_A2_tfril
    21029382U,	// HEXAGON_A2_tfrp
    4060557830U,	// HEXAGON_A2_tfrpi
    4060557830U,	// HEXAGON_A2_tfrsi
    46612998U,	// HEXAGON_A2_vabsh
    50807302U,	// HEXAGON_A2_vabshsat
    46617094U,	// HEXAGON_A2_vabsw
    50811398U,	// HEXAGON_A2_vabswsat
    46559750U,	// HEXAGON_A2_vaddh
    50754054U,	// HEXAGON_A2_vaddhs
    46621190U,	// HEXAGON_A2_vaddub
    50815494U,	// HEXAGON_A2_vaddubs
    426502U,	// HEXAGON_A2_vadduhs
    46625286U,	// HEXAGON_A2_vaddw
    50819590U,	// HEXAGON_A2_vaddws
    46567942U,	// HEXAGON_A2_vavgh
    54956550U,	// HEXAGON_A2_vavghcr
    52859398U,	// HEXAGON_A2_vavghr
    46629382U,	// HEXAGON_A2_vavgub
    52920838U,	// HEXAGON_A2_vavgubr
    46633478U,	// HEXAGON_A2_vavguh
    52924934U,	// HEXAGON_A2_vavguhr
    46637574U,	// HEXAGON_A2_vavguw
    52929030U,	// HEXAGON_A2_vavguwr
    46641670U,	// HEXAGON_A2_vavgw
    55030278U,	// HEXAGON_A2_vavgwcr
    52933126U,	// HEXAGON_A2_vavgwr
    508422U,	// HEXAGON_A2_vcmpbeq
    512518U,	// HEXAGON_A2_vcmpbgtu
    516614U,	// HEXAGON_A2_vcmpheq
    520710U,	// HEXAGON_A2_vcmphgt
    524806U,	// HEXAGON_A2_vcmphgtu
    528902U,	// HEXAGON_A2_vcmpweq
    532998U,	// HEXAGON_A2_vcmpwgt
    537094U,	// HEXAGON_A2_vcmpwgtu
    541190U,	// HEXAGON_A2_vconj
    545286U,	// HEXAGON_A2_vmaxh
    549382U,	// HEXAGON_A2_vmaxub
    553478U,	// HEXAGON_A2_vmaxuh
    557574U,	// HEXAGON_A2_vmaxuw
    561670U,	// HEXAGON_A2_vmaxw
    565766U,	// HEXAGON_A2_vminh
    569862U,	// HEXAGON_A2_vminub
    573958U,	// HEXAGON_A2_vminuh
    578054U,	// HEXAGON_A2_vminuw
    582150U,	// HEXAGON_A2_vminw
    46572038U,	// HEXAGON_A2_vnavgh
    57057798U,	// HEXAGON_A2_vnavghcr
    59154950U,	// HEXAGON_A2_vnavghr
    46723590U,	// HEXAGON_A2_vnavgw
    57209350U,	// HEXAGON_A2_vnavgwcr
    59306502U,	// HEXAGON_A2_vnavgwr
    590342U,	// HEXAGON_A2_vraddub
    594438U,	// HEXAGON_A2_vraddub_acc
    598534U,	// HEXAGON_A2_vrsadub
    602630U,	// HEXAGON_A2_vrsadub_acc
    46576134U,	// HEXAGON_A2_vsubh
    50770438U,	// HEXAGON_A2_vsubhs
    46744070U,	// HEXAGON_A2_vsubub
    50938374U,	// HEXAGON_A2_vsububs
    442886U,	// HEXAGON_A2_vsubuhs
    46748166U,	// HEXAGON_A2_vsubw
    50942470U,	// HEXAGON_A2_vsubws
    614918U,	// HEXAGON_A2_xor
    614918U,	// HEXAGON_A2_xorp
    619014U,	// HEXAGON_A2_zxtb
    623110U,	// HEXAGON_A2_zxth
    2695467526U,	// HEXAGON_A4_cround_ri
    2160693766U,	// HEXAGON_A4_cround_rr
    631302U,	// HEXAGON_A4_modwrapu
    2695475718U,	// HEXAGON_A4_round_ri
    2695475718U,	// HEXAGON_A4_round_ri_sat
    2160701958U,	// HEXAGON_A4_round_rr
    2160701958U,	// HEXAGON_A4_round_rr_sat
    639494U,	// HEXAGON_A5_vaddhubs
    29190U,	// HEXAGON_C2_all8
    2160099846U,	// HEXAGON_C2_and
    14713350U,	// HEXAGON_C2_andn
    53766U,	// HEXAGON_C2_any8
    2160198150U,	// HEXAGON_C2_cmpeq
    2694971910U,	// HEXAGON_C2_cmpeqi
    2160198150U,	// HEXAGON_C2_cmpeqp
    3282182662U,	// HEXAGON_C2_cmpgei
    3282178566U,	// HEXAGON_C2_cmpgeui
    2160210438U,	// HEXAGON_C2_cmpgt
    2694984198U,	// HEXAGON_C2_cmpgti
    2160210438U,	// HEXAGON_C2_cmpgtp
    2160214534U,	// HEXAGON_C2_cmpgtu
    2694988294U,	// HEXAGON_C2_cmpgtui
    2160214534U,	// HEXAGON_C2_cmpgtup
    156166U,	// HEXAGON_C2_cmplt
    152070U,	// HEXAGON_C2_cmpltu
    643590U,	// HEXAGON_C2_mask
    2160714246U,	// HEXAGON_C2_mux
    2695488006U,	// HEXAGON_C2_muxii
    2160714246U,	// HEXAGON_C2_muxir
    2695488006U,	// HEXAGON_C2_muxri
    385542U,	// HEXAGON_C2_not
    2160456198U,	// HEXAGON_C2_or
    15069702U,	// HEXAGON_C2_orn
    21029382U,	// HEXAGON_C2_pxfer_map
    21029382U,	// HEXAGON_C2_tfrpr
    21029382U,	// HEXAGON_C2_tfrrp
    651782U,	// HEXAGON_C2_vitpack
    655878U,	// HEXAGON_C2_vmux
    614918U,	// HEXAGON_C2_xor
    659974U,	// HEXAGON_C4_fastcorner9
    664070U,	// HEXAGON_C4_fastcorner9_not
    217606U,	// HEXAGON_F2_conv_d2df
    221702U,	// HEXAGON_F2_conv_d2sf
    46363142U,	// HEXAGON_F2_conv_df2d
    46363142U,	// HEXAGON_F2_conv_df2d_chop
    229894U,	// HEXAGON_F2_conv_df2sf
    46371334U,	// HEXAGON_F2_conv_df2ud
    46371334U,	// HEXAGON_F2_conv_df2ud_chop
    46375430U,	// HEXAGON_F2_conv_df2uw
    46375430U,	// HEXAGON_F2_conv_df2uw_chop
    46379526U,	// HEXAGON_F2_conv_df2w
    46379526U,	// HEXAGON_F2_conv_df2w_chop
    46383622U,	// HEXAGON_F2_conv_sf2d
    46383622U,	// HEXAGON_F2_conv_sf2d_chop
    250374U,	// HEXAGON_F2_conv_sf2df
    46391814U,	// HEXAGON_F2_conv_sf2ud
    46391814U,	// HEXAGON_F2_conv_sf2ud_chop
    46395910U,	// HEXAGON_F2_conv_sf2uw
    46395910U,	// HEXAGON_F2_conv_sf2uw_chop
    46400006U,	// HEXAGON_F2_conv_sf2w
    46400006U,	// HEXAGON_F2_conv_sf2w_chop
    266758U,	// HEXAGON_F2_conv_ud2df
    270854U,	// HEXAGON_F2_conv_ud2sf
    274950U,	// HEXAGON_F2_conv_uw2df
    279046U,	// HEXAGON_F2_conv_uw2sf
    283142U,	// HEXAGON_F2_conv_w2df
    287238U,	// HEXAGON_F2_conv_w2sf
    668166U,	// HEXAGON_F2_dfadd
    672262U,	// HEXAGON_F2_dfclass
    315910U,	// HEXAGON_F2_dfcmpeq
    324102U,	// HEXAGON_F2_dfcmpge
    332294U,	// HEXAGON_F2_dfcmpgt
    676358U,	// HEXAGON_F2_dfcmpuo
    680454U,	// HEXAGON_F2_dffixupd
    684550U,	// HEXAGON_F2_dffixupn
    688646U,	// HEXAGON_F2_dffixupr
    336390U,	// HEXAGON_F2_dffma
    336390U,	// HEXAGON_F2_dffma_lib
    48570886U,	// HEXAGON_F2_dffma_sc
    46830086U,	// HEXAGON_F2_dffms
    63607302U,	// HEXAGON_F2_dffms_lib
    65708550U,	// HEXAGON_F2_dfimm_n
    67805702U,	// HEXAGON_F2_dfimm_p
    344582U,	// HEXAGON_F2_dfmax
    352774U,	// HEXAGON_F2_dfmin
    700934U,	// HEXAGON_F2_dfmpy
    705030U,	// HEXAGON_F2_dfsub
    709126U,	// HEXAGON_F2_sfadd
    713222U,	// HEXAGON_F2_sfclass
    311814U,	// HEXAGON_F2_sfcmpeq
    320006U,	// HEXAGON_F2_sfcmpge
    328198U,	// HEXAGON_F2_sfcmpgt
    717318U,	// HEXAGON_F2_sfcmpuo
    721414U,	// HEXAGON_F2_sffixupd
    725510U,	// HEXAGON_F2_sffixupn
    729606U,	// HEXAGON_F2_sffixupr
    340486U,	// HEXAGON_F2_sffma
    340486U,	// HEXAGON_F2_sffma_lib
    48574982U,	// HEXAGON_F2_sffma_sc
    46871046U,	// HEXAGON_F2_sffms
    63648262U,	// HEXAGON_F2_sffms_lib
    65749510U,	// HEXAGON_F2_sfimm_n
    67846662U,	// HEXAGON_F2_sfimm_p
    348678U,	// HEXAGON_F2_sfmax
    356870U,	// HEXAGON_F2_sfmin
    741894U,	// HEXAGON_F2_sfmpy
    745990U,	// HEXAGON_F2_sfsub
    1891652102U,	// HEXAGON_M2_acci
    2963296774U,	// HEXAGON_M2_accii
    750086U,	// HEXAGON_M2_cmaci_s0
    754182U,	// HEXAGON_M2_cmacr_s0
    51089926U,	// HEXAGON_M2_cmacs_s0
    69964294U,	// HEXAGON_M2_cmacs_s1
    72061446U,	// HEXAGON_M2_cmacsc_s0
    74158598U,	// HEXAGON_M2_cmacsc_s1
    762374U,	// HEXAGON_M2_cmpyi_s0
    766470U,	// HEXAGON_M2_cmpyr_s0
    59490822U,	// HEXAGON_M2_cmpyrs_s0
    76268038U,	// HEXAGON_M2_cmpyrs_s1
    78365190U,	// HEXAGON_M2_cmpyrsc_s0
    80462342U,	// HEXAGON_M2_cmpyrsc_s1
    51102214U,	// HEXAGON_M2_cmpys_s0
    69976582U,	// HEXAGON_M2_cmpys_s1
    72073734U,	// HEXAGON_M2_cmpysc_s0
    74170886U,	// HEXAGON_M2_cmpysc_s1
    51106310U,	// HEXAGON_M2_cnacs_s0
    69980678U,	// HEXAGON_M2_cnacs_s1
    72077830U,	// HEXAGON_M2_cnacsc_s0
    74174982U,	// HEXAGON_M2_cnacsc_s1
    1892409862U,	// HEXAGON_M2_dpmpyss_acc_s0
    1892413958U,	// HEXAGON_M2_dpmpyss_nac_s0
    2160853510U,	// HEXAGON_M2_dpmpyss_rnd_s0
    2160853510U,	// HEXAGON_M2_dpmpyss_s0
    1892422150U,	// HEXAGON_M2_dpmpyuu_acc_s0
    1892426246U,	// HEXAGON_M2_dpmpyuu_nac_s0
    2160865798U,	// HEXAGON_M2_dpmpyuu_s0
    2160853510U,	// HEXAGON_M2_hmmpyh_rs1
    2160853510U,	// HEXAGON_M2_hmmpyl_rs1
    1892434438U,	// HEXAGON_M2_maci
    82596358U,	// HEXAGON_M2_macsin
    2964079110U,	// HEXAGON_M2_macsip
    59531782U,	// HEXAGON_M2_mmachs_rs0
    76308998U,	// HEXAGON_M2_mmachs_rs1
    51143174U,	// HEXAGON_M2_mmachs_s0
    70017542U,	// HEXAGON_M2_mmachs_s1
    59535878U,	// HEXAGON_M2_mmacls_rs0
    76313094U,	// HEXAGON_M2_mmacls_rs1
    51147270U,	// HEXAGON_M2_mmacls_s0
    70021638U,	// HEXAGON_M2_mmacls_s1
    59539974U,	// HEXAGON_M2_mmacuhs_rs0
    76317190U,	// HEXAGON_M2_mmacuhs_rs1
    51151366U,	// HEXAGON_M2_mmacuhs_s0
    70025734U,	// HEXAGON_M2_mmacuhs_s1
    59544070U,	// HEXAGON_M2_mmaculs_rs0
    76321286U,	// HEXAGON_M2_mmaculs_rs1
    51155462U,	// HEXAGON_M2_mmaculs_s0
    70029830U,	// HEXAGON_M2_mmaculs_s1
    59548166U,	// HEXAGON_M2_mmpyh_rs0
    76325382U,	// HEXAGON_M2_mmpyh_rs1
    51159558U,	// HEXAGON_M2_mmpyh_s0
    70033926U,	// HEXAGON_M2_mmpyh_s1
    59552262U,	// HEXAGON_M2_mmpyl_rs0
    76329478U,	// HEXAGON_M2_mmpyl_rs1
    51163654U,	// HEXAGON_M2_mmpyl_s0
    70038022U,	// HEXAGON_M2_mmpyl_s1
    59556358U,	// HEXAGON_M2_mmpyuh_rs0
    76333574U,	// HEXAGON_M2_mmpyuh_rs1
    51167750U,	// HEXAGON_M2_mmpyuh_s0
    70042118U,	// HEXAGON_M2_mmpyuh_s1
    59560454U,	// HEXAGON_M2_mmpyul_rs0
    76337670U,	// HEXAGON_M2_mmpyul_rs1
    51171846U,	// HEXAGON_M2_mmpyul_s0
    70046214U,	// HEXAGON_M2_mmpyul_s1
    1911284230U,	// HEXAGON_M2_mpy_acc_hh_s0
    1911284230U,	// HEXAGON_M2_mpy_acc_hh_s1
    1911284230U,	// HEXAGON_M2_mpy_acc_hl_s0
    1911284230U,	// HEXAGON_M2_mpy_acc_hl_s1
    1915478534U,	// HEXAGON_M2_mpy_acc_lh_s0
    1915478534U,	// HEXAGON_M2_mpy_acc_lh_s1
    1915478534U,	// HEXAGON_M2_mpy_acc_ll_s0
    1915478534U,	// HEXAGON_M2_mpy_acc_ll_s1
    1911284230U,	// HEXAGON_M2_mpy_acc_sat_hh_s0
    1911284230U,	// HEXAGON_M2_mpy_acc_sat_hh_s1
    1911284230U,	// HEXAGON_M2_mpy_acc_sat_hl_s0
    1911284230U,	// HEXAGON_M2_mpy_acc_sat_hl_s1
    1915478534U,	// HEXAGON_M2_mpy_acc_sat_lh_s0
    1915478534U,	// HEXAGON_M2_mpy_acc_sat_lh_s1
    1915478534U,	// HEXAGON_M2_mpy_acc_sat_ll_s0
    1915478534U,	// HEXAGON_M2_mpy_acc_sat_ll_s1
    2179727878U,	// HEXAGON_M2_mpy_hh_s0
    2179727878U,	// HEXAGON_M2_mpy_hh_s1
    2179727878U,	// HEXAGON_M2_mpy_hl_s0
    2179727878U,	// HEXAGON_M2_mpy_hl_s1
    2183922182U,	// HEXAGON_M2_mpy_lh_s0
    2183922182U,	// HEXAGON_M2_mpy_lh_s1
    2183922182U,	// HEXAGON_M2_mpy_ll_s0
    2183922182U,	// HEXAGON_M2_mpy_ll_s1
    1911288326U,	// HEXAGON_M2_mpy_nac_hh_s0
    1911288326U,	// HEXAGON_M2_mpy_nac_hh_s1
    1911288326U,	// HEXAGON_M2_mpy_nac_hl_s0
    1911288326U,	// HEXAGON_M2_mpy_nac_hl_s1
    1915482630U,	// HEXAGON_M2_mpy_nac_lh_s0
    1915482630U,	// HEXAGON_M2_mpy_nac_lh_s1
    1915482630U,	// HEXAGON_M2_mpy_nac_ll_s0
    1915482630U,	// HEXAGON_M2_mpy_nac_ll_s1
    1911288326U,	// HEXAGON_M2_mpy_nac_sat_hh_s0
    1911288326U,	// HEXAGON_M2_mpy_nac_sat_hh_s1
    1911288326U,	// HEXAGON_M2_mpy_nac_sat_hl_s0
    1911288326U,	// HEXAGON_M2_mpy_nac_sat_hl_s1
    1915482630U,	// HEXAGON_M2_mpy_nac_sat_lh_s0
    1915482630U,	// HEXAGON_M2_mpy_nac_sat_lh_s1
    1915482630U,	// HEXAGON_M2_mpy_nac_sat_ll_s0
    1915482630U,	// HEXAGON_M2_mpy_nac_sat_ll_s1
    2179727878U,	// HEXAGON_M2_mpy_rnd_hh_s0
    2179727878U,	// HEXAGON_M2_mpy_rnd_hh_s1
    2179727878U,	// HEXAGON_M2_mpy_rnd_hl_s0
    2179727878U,	// HEXAGON_M2_mpy_rnd_hl_s1
    2183922182U,	// HEXAGON_M2_mpy_rnd_lh_s0
    2183922182U,	// HEXAGON_M2_mpy_rnd_lh_s1
    2183922182U,	// HEXAGON_M2_mpy_rnd_ll_s0
    2183922182U,	// HEXAGON_M2_mpy_rnd_ll_s1
    2179727878U,	// HEXAGON_M2_mpy_sat_hh_s0
    2179727878U,	// HEXAGON_M2_mpy_sat_hh_s1
    2179727878U,	// HEXAGON_M2_mpy_sat_hl_s0
    2179727878U,	// HEXAGON_M2_mpy_sat_hl_s1
    2183922182U,	// HEXAGON_M2_mpy_sat_lh_s0
    2183922182U,	// HEXAGON_M2_mpy_sat_lh_s1
    2183922182U,	// HEXAGON_M2_mpy_sat_ll_s0
    2183922182U,	// HEXAGON_M2_mpy_sat_ll_s1
    2179727878U,	// HEXAGON_M2_mpy_sat_rnd_hh_s0
    2179727878U,	// HEXAGON_M2_mpy_sat_rnd_hh_s1
    2179727878U,	// HEXAGON_M2_mpy_sat_rnd_hl_s0
    2179727878U,	// HEXAGON_M2_mpy_sat_rnd_hl_s1
    2183922182U,	// HEXAGON_M2_mpy_sat_rnd_lh_s0
    2183922182U,	// HEXAGON_M2_mpy_sat_rnd_lh_s1
    2183922182U,	// HEXAGON_M2_mpy_sat_rnd_ll_s0
    2183922182U,	// HEXAGON_M2_mpy_sat_rnd_ll_s1
    2160853510U,	// HEXAGON_M2_mpy_up
    1911284230U,	// HEXAGON_M2_mpyd_acc_hh_s0
    1911284230U,	// HEXAGON_M2_mpyd_acc_hh_s1
    1911284230U,	// HEXAGON_M2_mpyd_acc_hl_s0
    1911284230U,	// HEXAGON_M2_mpyd_acc_hl_s1
    1915478534U,	// HEXAGON_M2_mpyd_acc_lh_s0
    1915478534U,	// HEXAGON_M2_mpyd_acc_lh_s1
    1915478534U,	// HEXAGON_M2_mpyd_acc_ll_s0
    1915478534U,	// HEXAGON_M2_mpyd_acc_ll_s1
    2179727878U,	// HEXAGON_M2_mpyd_hh_s0
    2179727878U,	// HEXAGON_M2_mpyd_hh_s1
    2179727878U,	// HEXAGON_M2_mpyd_hl_s0
    2179727878U,	// HEXAGON_M2_mpyd_hl_s1
    2183922182U,	// HEXAGON_M2_mpyd_lh_s0
    2183922182U,	// HEXAGON_M2_mpyd_lh_s1
    2183922182U,	// HEXAGON_M2_mpyd_ll_s0
    2183922182U,	// HEXAGON_M2_mpyd_ll_s1
    1911288326U,	// HEXAGON_M2_mpyd_nac_hh_s0
    1911288326U,	// HEXAGON_M2_mpyd_nac_hh_s1
    1911288326U,	// HEXAGON_M2_mpyd_nac_hl_s0
    1911288326U,	// HEXAGON_M2_mpyd_nac_hl_s1
    1915482630U,	// HEXAGON_M2_mpyd_nac_lh_s0
    1915482630U,	// HEXAGON_M2_mpyd_nac_lh_s1
    1915482630U,	// HEXAGON_M2_mpyd_nac_ll_s0
    1915482630U,	// HEXAGON_M2_mpyd_nac_ll_s1
    2179727878U,	// HEXAGON_M2_mpyd_rnd_hh_s0
    2179727878U,	// HEXAGON_M2_mpyd_rnd_hh_s1
    2179727878U,	// HEXAGON_M2_mpyd_rnd_hl_s0
    2179727878U,	// HEXAGON_M2_mpyd_rnd_hl_s1
    2183922182U,	// HEXAGON_M2_mpyd_rnd_lh_s0
    2183922182U,	// HEXAGON_M2_mpyd_rnd_lh_s1
    2183922182U,	// HEXAGON_M2_mpyd_rnd_ll_s0
    2183922182U,	// HEXAGON_M2_mpyd_rnd_ll_s1
    2160910854U,	// HEXAGON_M2_mpyi
    1911296518U,	// HEXAGON_M2_mpyu_acc_hh_s0
    1911296518U,	// HEXAGON_M2_mpyu_acc_hh_s1
    1911296518U,	// HEXAGON_M2_mpyu_acc_hl_s0
    1911296518U,	// HEXAGON_M2_mpyu_acc_hl_s1
    1915490822U,	// HEXAGON_M2_mpyu_acc_lh_s0
    1915490822U,	// HEXAGON_M2_mpyu_acc_lh_s1
    1915490822U,	// HEXAGON_M2_mpyu_acc_ll_s0
    1915490822U,	// HEXAGON_M2_mpyu_acc_ll_s1
    2179740166U,	// HEXAGON_M2_mpyu_hh_s0
    2179740166U,	// HEXAGON_M2_mpyu_hh_s1
    2179740166U,	// HEXAGON_M2_mpyu_hl_s0
    2179740166U,	// HEXAGON_M2_mpyu_hl_s1
    2183934470U,	// HEXAGON_M2_mpyu_lh_s0
    2183934470U,	// HEXAGON_M2_mpyu_lh_s1
    2183934470U,	// HEXAGON_M2_mpyu_ll_s0
    2183934470U,	// HEXAGON_M2_mpyu_ll_s1
    1911300614U,	// HEXAGON_M2_mpyu_nac_hh_s0
    1911300614U,	// HEXAGON_M2_mpyu_nac_hh_s1
    1911300614U,	// HEXAGON_M2_mpyu_nac_hl_s0
    1911300614U,	// HEXAGON_M2_mpyu_nac_hl_s1
    1915494918U,	// HEXAGON_M2_mpyu_nac_lh_s0
    1915494918U,	// HEXAGON_M2_mpyu_nac_lh_s1
    1915494918U,	// HEXAGON_M2_mpyu_nac_ll_s0
    1915494918U,	// HEXAGON_M2_mpyu_nac_ll_s1
    2160865798U,	// HEXAGON_M2_mpyu_up
    1911296518U,	// HEXAGON_M2_mpyud_acc_hh_s0
    1911296518U,	// HEXAGON_M2_mpyud_acc_hh_s1
    1911296518U,	// HEXAGON_M2_mpyud_acc_hl_s0
    1911296518U,	// HEXAGON_M2_mpyud_acc_hl_s1
    1915490822U,	// HEXAGON_M2_mpyud_acc_lh_s0
    1915490822U,	// HEXAGON_M2_mpyud_acc_lh_s1
    1915490822U,	// HEXAGON_M2_mpyud_acc_ll_s0
    1915490822U,	// HEXAGON_M2_mpyud_acc_ll_s1
    2179740166U,	// HEXAGON_M2_mpyud_hh_s0
    2179740166U,	// HEXAGON_M2_mpyud_hh_s1
    2179740166U,	// HEXAGON_M2_mpyud_hl_s0
    2179740166U,	// HEXAGON_M2_mpyud_hl_s1
    2183934470U,	// HEXAGON_M2_mpyud_lh_s0
    2183934470U,	// HEXAGON_M2_mpyud_lh_s1
    2183934470U,	// HEXAGON_M2_mpyud_ll_s0
    2183934470U,	// HEXAGON_M2_mpyud_ll_s1
    1911300614U,	// HEXAGON_M2_mpyud_nac_hh_s0
    1911300614U,	// HEXAGON_M2_mpyud_nac_hh_s1
    1911300614U,	// HEXAGON_M2_mpyud_nac_hl_s0
    1911300614U,	// HEXAGON_M2_mpyud_nac_hl_s1
    1915494918U,	// HEXAGON_M2_mpyud_nac_lh_s0
    1915494918U,	// HEXAGON_M2_mpyud_nac_lh_s1
    1915494918U,	// HEXAGON_M2_mpyud_nac_ll_s0
    1915494918U,	// HEXAGON_M2_mpyud_nac_ll_s1
    848390U,	// HEXAGON_M2_mpyui
    1892483590U,	// HEXAGON_M2_nacci
    2964128262U,	// HEXAGON_M2_naccii
    856582U,	// HEXAGON_M2_subacc
    860678U,	// HEXAGON_M2_vabsdiffh
    864774U,	// HEXAGON_M2_vabsdiffw
    868870U,	// HEXAGON_M2_vcmac_s0_sat_i
    872966U,	// HEXAGON_M2_vcmac_s0_sat_r
    51208710U,	// HEXAGON_M2_vcmpy_s0_sat_i
    51212806U,	// HEXAGON_M2_vcmpy_s0_sat_r
    70083078U,	// HEXAGON_M2_vcmpy_s1_sat_i
    70087174U,	// HEXAGON_M2_vcmpy_s1_sat_r
    51216902U,	// HEXAGON_M2_vdmacs_s0
    70091270U,	// HEXAGON_M2_vdmacs_s1
    59609606U,	// HEXAGON_M2_vdmpyrs_s0
    76386822U,	// HEXAGON_M2_vdmpyrs_s1
    51220998U,	// HEXAGON_M2_vdmpys_s0
    70095366U,	// HEXAGON_M2_vdmpys_s1
    47030790U,	// HEXAGON_M2_vmac2
    47034886U,	// HEXAGON_M2_vmac2es
    51229190U,	// HEXAGON_M2_vmac2es_s0
    70103558U,	// HEXAGON_M2_vmac2es_s1
    51225094U,	// HEXAGON_M2_vmac2s_s0
    70099462U,	// HEXAGON_M2_vmac2s_s1
    51233286U,	// HEXAGON_M2_vmpy2es_s0
    70107654U,	// HEXAGON_M2_vmpy2es_s1
    51237382U,	// HEXAGON_M2_vmpy2s_s0
    59625990U,	// HEXAGON_M2_vmpy2s_s0pack
    70111750U,	// HEXAGON_M2_vmpy2s_s1
    76403206U,	// HEXAGON_M2_vmpy2s_s1pack
    47047174U,	// HEXAGON_M2_vrcmaci_s0
    84795910U,	// HEXAGON_M2_vrcmaci_s0c
    47051270U,	// HEXAGON_M2_vrcmacr_s0
    84800006U,	// HEXAGON_M2_vrcmacr_s0c
    47055366U,	// HEXAGON_M2_vrcmpyi_s0
    84804102U,	// HEXAGON_M2_vrcmpyi_s0c
    47059462U,	// HEXAGON_M2_vrcmpyr_s0
    84808198U,	// HEXAGON_M2_vrcmpyr_s0c
    926214U,	// HEXAGON_M2_vrmac_s0
    930310U,	// HEXAGON_M2_vrmpy_s0
    934406U,	// HEXAGON_M2_xor_xacc
    1891672582U,	// HEXAGON_M4_and_and
    1897964038U,	// HEXAGON_M4_and_andn
    45574U,	// HEXAGON_M4_and_or
    49670U,	// HEXAGON_M4_and_xor
    1892569606U,	// HEXAGON_M4_or_and
    1898861062U,	// HEXAGON_M4_or_andn
    1892573702U,	// HEXAGON_M4_or_or
    946694U,	// HEXAGON_M4_or_xor
    1892581894U,	// HEXAGON_M4_xor_and
    1898873350U,	// HEXAGON_M4_xor_andn
    954886U,	// HEXAGON_M4_xor_or
    958982U,	// HEXAGON_M5_vdmacbsu
    963078U,	// HEXAGON_M5_vdmpybsu
    967174U,	// HEXAGON_M5_vmacbsu
    971270U,	// HEXAGON_M5_vmacbuu
    975366U,	// HEXAGON_M5_vmpybsu
    979462U,	// HEXAGON_M5_vmpybuu
    983558U,	// HEXAGON_M5_vrmacbsu
    987654U,	// HEXAGON_M5_vrmacbuu
    991750U,	// HEXAGON_M5_vrmpybsu
    995846U,	// HEXAGON_M5_vrmpybuu
    4614U,	// HEXAGON_S2_addasl_rrri
    2694902278U,	// HEXAGON_S2_asl_i_p
    2963345926U,	// HEXAGON_S2_asl_i_p_acc
    2963350022U,	// HEXAGON_S2_asl_i_p_and
    2963358214U,	// HEXAGON_S2_asl_i_p_nac
    2963354118U,	// HEXAGON_S2_asl_i_p_or
    2963362310U,	// HEXAGON_S2_asl_i_p_xacc
    2694902278U,	// HEXAGON_S2_asl_i_r
    2963345926U,	// HEXAGON_S2_asl_i_r_acc
    2963350022U,	// HEXAGON_S2_asl_i_r_and
    2963358214U,	// HEXAGON_S2_asl_i_r_nac
    2963354118U,	// HEXAGON_S2_asl_i_r_or
    2160128518U,	// HEXAGON_S2_asl_i_r_sat
    2963362310U,	// HEXAGON_S2_asl_i_r_xacc
    999942U,	// HEXAGON_S2_asl_i_vh
    1004038U,	// HEXAGON_S2_asl_i_vw
    2160128518U,	// HEXAGON_S2_asl_r_p
    1891701254U,	// HEXAGON_S2_asl_r_p_acc
    1891705350U,	// HEXAGON_S2_asl_r_p_and
    1891713542U,	// HEXAGON_S2_asl_r_p_nac
    1891709446U,	// HEXAGON_S2_asl_r_p_or
    2160128518U,	// HEXAGON_S2_asl_r_r
    1891701254U,	// HEXAGON_S2_asl_r_r_acc
    1891705350U,	// HEXAGON_S2_asl_r_r_and
    1891713542U,	// HEXAGON_S2_asl_r_r_nac
    1891709446U,	// HEXAGON_S2_asl_r_r_or
    2160128518U,	// HEXAGON_S2_asl_r_r_sat
    999942U,	// HEXAGON_S2_asl_r_vh
    1004038U,	// HEXAGON_S2_asl_r_vw
    2694951430U,	// HEXAGON_S2_asr_i_p
    2963370502U,	// HEXAGON_S2_asr_i_p_acc
    2963374598U,	// HEXAGON_S2_asr_i_p_and
    2963382790U,	// HEXAGON_S2_asr_i_p_nac
    2963378694U,	// HEXAGON_S2_asr_i_p_or
    2694951430U,	// HEXAGON_S2_asr_i_p_rnd
    1008134U,	// HEXAGON_S2_asr_i_p_rnd_goodsyntax
    2694951430U,	// HEXAGON_S2_asr_i_r
    2963370502U,	// HEXAGON_S2_asr_i_r_acc
    2963374598U,	// HEXAGON_S2_asr_i_r_and
    2963382790U,	// HEXAGON_S2_asr_i_r_nac
    2963378694U,	// HEXAGON_S2_asr_i_r_or
    2694951430U,	// HEXAGON_S2_asr_i_r_rnd
    1008134U,	// HEXAGON_S2_asr_i_r_rnd_goodsyntax
    2695852550U,	// HEXAGON_S2_asr_i_svw_trun
    2161082886U,	// HEXAGON_S2_asr_i_vh
    2161078790U,	// HEXAGON_S2_asr_i_vw
    2160177670U,	// HEXAGON_S2_asr_r_p
    1891725830U,	// HEXAGON_S2_asr_r_p_acc
    1891729926U,	// HEXAGON_S2_asr_r_p_and
    1891738118U,	// HEXAGON_S2_asr_r_p_nac
    1891734022U,	// HEXAGON_S2_asr_r_p_or
    2160177670U,	// HEXAGON_S2_asr_r_r
    1891725830U,	// HEXAGON_S2_asr_r_r_acc
    1891729926U,	// HEXAGON_S2_asr_r_r_and
    1891738118U,	// HEXAGON_S2_asr_r_r_nac
    1891734022U,	// HEXAGON_S2_asr_r_r_or
    2160177670U,	// HEXAGON_S2_asr_r_r_sat
    2161078790U,	// HEXAGON_S2_asr_r_svw_trun
    2161082886U,	// HEXAGON_S2_asr_r_vh
    2161078790U,	// HEXAGON_S2_asr_r_vw
    291334U,	// HEXAGON_S2_cl0
    291334U,	// HEXAGON_S2_cl0p
    1020422U,	// HEXAGON_S2_cl1
    1020422U,	// HEXAGON_S2_cl1p
    1024518U,	// HEXAGON_S2_clb
    1028614U,	// HEXAGON_S2_clbnorm
    1024518U,	// HEXAGON_S2_clbp
    2694967814U,	// HEXAGON_S2_clrbit_i
    2160194054U,	// HEXAGON_S2_clrbit_r
    295430U,	// HEXAGON_S2_ct0
    1032710U,	// HEXAGON_S2_ct1
    2695877126U,	// HEXAGON_S2_extractu
    2161103366U,	// HEXAGON_S2_extractu_rp
    2695877126U,	// HEXAGON_S2_extractup
    2161103366U,	// HEXAGON_S2_extractup_rp
    1040902U,	// HEXAGON_S2_lsl_r_p
    1044998U,	// HEXAGON_S2_lsl_r_p_acc
    1049094U,	// HEXAGON_S2_lsl_r_p_and
    1053190U,	// HEXAGON_S2_lsl_r_p_nac
    1057286U,	// HEXAGON_S2_lsl_r_p_or
    1040902U,	// HEXAGON_S2_lsl_r_r
    1044998U,	// HEXAGON_S2_lsl_r_r_acc
    1049094U,	// HEXAGON_S2_lsl_r_r_and
    1053190U,	// HEXAGON_S2_lsl_r_r_nac
    1057286U,	// HEXAGON_S2_lsl_r_r_or
    1061382U,	// HEXAGON_S2_lsl_r_vh
    1065478U,	// HEXAGON_S2_lsl_r_vw
    2695909894U,	// HEXAGON_S2_lsr_i_p
    2964349446U,	// HEXAGON_S2_lsr_i_p_acc
    2964353542U,	// HEXAGON_S2_lsr_i_p_and
    2964357638U,	// HEXAGON_S2_lsr_i_p_nac
    2964361734U,	// HEXAGON_S2_lsr_i_p_or
    2964365830U,	// HEXAGON_S2_lsr_i_p_xacc
    2695909894U,	// HEXAGON_S2_lsr_i_r
    2964349446U,	// HEXAGON_S2_lsr_i_r_acc
    2964353542U,	// HEXAGON_S2_lsr_i_r_and
    2964357638U,	// HEXAGON_S2_lsr_i_r_nac
    2964361734U,	// HEXAGON_S2_lsr_i_r_or
    2964365830U,	// HEXAGON_S2_lsr_i_r_xacc
    1094150U,	// HEXAGON_S2_lsr_i_vh
    1098246U,	// HEXAGON_S2_lsr_i_vw
    2161136134U,	// HEXAGON_S2_lsr_r_p
    1892704774U,	// HEXAGON_S2_lsr_r_p_acc
    1892708870U,	// HEXAGON_S2_lsr_r_p_and
    1892712966U,	// HEXAGON_S2_lsr_r_p_nac
    1892717062U,	// HEXAGON_S2_lsr_r_p_or
    2161136134U,	// HEXAGON_S2_lsr_r_r
    1892704774U,	// HEXAGON_S2_lsr_r_r_acc
    1892708870U,	// HEXAGON_S2_lsr_r_r_and
    1892712966U,	// HEXAGON_S2_lsr_r_r_nac
    1892717062U,	// HEXAGON_S2_lsr_r_r_or
    1094150U,	// HEXAGON_S2_lsr_r_vh
    1098246U,	// HEXAGON_S2_lsr_r_vw
    1102342U,	// HEXAGON_S2_packhl
    1106438U,	// HEXAGON_S2_parityp
    2695950854U,	// HEXAGON_S2_setbit_i
    2161177094U,	// HEXAGON_S2_setbit_r
    1114630U,	// HEXAGON_S2_shuffeb
    1118726U,	// HEXAGON_S2_shuffeh
    1122822U,	// HEXAGON_S2_shuffob
    1126918U,	// HEXAGON_S2_shuffoh
    1131014U,	// HEXAGON_S2_svsathb
    1135110U,	// HEXAGON_S2_svsathub
    2695979526U,	// HEXAGON_S2_togglebit_i
    2161205766U,	// HEXAGON_S2_togglebit_r
    2695983622U,	// HEXAGON_S2_tstbit_i
    2161209862U,	// HEXAGON_S2_tstbit_r
    2964423174U,	// HEXAGON_S2_valignib
    1892778502U,	// HEXAGON_S2_valignrb
    1151494U,	// HEXAGON_S2_vcrotate
    47292934U,	// HEXAGON_S2_vrndpackwh
    51487238U,	// HEXAGON_S2_vrndpackwhs
    1131014U,	// HEXAGON_S2_vsathb
    1131014U,	// HEXAGON_S2_vsathb_nopack
    1135110U,	// HEXAGON_S2_vsathub
    1135110U,	// HEXAGON_S2_vsathub_nopack
    1159686U,	// HEXAGON_S2_vsatwh
    1159686U,	// HEXAGON_S2_vsatwh_nopack
    1163782U,	// HEXAGON_S2_vsatwuh
    1163782U,	// HEXAGON_S2_vsatwuh_nopack
    1167878U,	// HEXAGON_S2_vsplatrb
    1171974U,	// HEXAGON_S2_vsplatrh
    1176070U,	// HEXAGON_S2_vsxtbh
    1180166U,	// HEXAGON_S2_vsxthw
    1184262U,	// HEXAGON_S2_vtrunehb
    1188358U,	// HEXAGON_S2_vtrunewh
    1192454U,	// HEXAGON_S2_vtrunohb
    1196550U,	// HEXAGON_S2_vtrunowh
    1200646U,	// HEXAGON_S2_vzxtbh
    1204742U,	// HEXAGON_S2_vzxthw
    2964214278U,	// HEXAGON_S4_or_andi
    354808326U,	// HEXAGON_S4_or_andix
    2964218374U,	// HEXAGON_S4_or_ori
    59929094U,	// HEXAGON_S5_asrhub_rnd_sat_goodsyntax
    51540486U,	// HEXAGON_S5_asrhub_sat
    1212934U,	// HEXAGON_S5_popcountp
    2695856646U,	// HEXAGON_S5_vasrhrnd_goodsyntax
    49452038U,	// HEXAGON_circ_ldd
    3262292486U,	// HI
    43164166U,	// HI_jt
    3222446598U,	// HI_label
    3222446598U,	// HIi
    518U,	// Hexagon_A2_addpsat
    518U,	// Hexagon_A2_addsp
    365062U,	// Hexagon_A2_maxp
    369158U,	// Hexagon_A2_maxup
    2166391302U,	// Hexagon_A4_andn
    33751558U,	// Hexagon_A4_combineir
    2695041542U,	// Hexagon_A4_combineri
    2166747654U,	// Hexagon_A4_orn
    2160198150U,	// Hexagon_A4_rcmpeq
    2694971910U,	// Hexagon_A4_rcmpeqi
    2160251398U,	// Hexagon_A4_rcmpneq
    2695025158U,	// Hexagon_A4_rcmpneqi
    2161291782U,	// Hexagon_C2_bitsclr
    2696065542U,	// Hexagon_C2_bitsclri
    1229318U,	// Hexagon_C2_bitsset
    86016518U,	// Hexagon_C4_and_and
    354451974U,	// Hexagon_C4_and_andn
    88113670U,	// Hexagon_C4_and_or
    356549126U,	// Hexagon_C4_and_orn
    2160259590U,	// Hexagon_C4_cmplte
    2695033350U,	// Hexagon_C4_cmpltei
    2160255494U,	// Hexagon_C4_cmplteu
    2695029254U,	// Hexagon_C4_cmplteui
    2160251398U,	// Hexagon_C4_cmpneq
    2695025158U,	// Hexagon_C4_cmpneqi
    659974U,	// Hexagon_C4_fastcorner9
    664070U,	// Hexagon_C4_fastcorner9_not
    86372870U,	// Hexagon_C4_or_and
    354808326U,	// Hexagon_C4_or_andn
    88470022U,	// Hexagon_C4_or_or
    356905478U,	// Hexagon_C4_or_orn
    2695684614U,	// Hexagon_M2_mpysmi
    1233414U,	// Hexagon_M2_vradduh
    1237510U,	// Hexagon_M2_vrcmpys_acc_s1
    70447622U,	// Hexagon_M2_vrcmpys_s1
    76739078U,	// Hexagon_M2_vrcmpys_s1rp
    934406U,	// Hexagon_M4_xor_xacc
    1245702U,	// Hexagon_S2_brev
    1249798U,	// Hexagon_S2_deinterleave
    2964529670U,	// Hexagon_S2_insert
    1892884998U,	// Hexagon_S2_insert_rp
    2964529670U,	// Hexagon_S2_insertp
    1892884998U,	// Hexagon_S2_insertp_rp
    1257990U,	// Hexagon_S2_interleave
    1262086U,	// Hexagon_S2_lfsp
    1266182U,	// Hexagon_S2_tableidxb_goodsyntax
    1270278U,	// Hexagon_S2_tableidxd_goodsyntax
    1274374U,	// Hexagon_S2_tableidxh_goodsyntax
    1278470U,	// Hexagon_S2_tableidxw_goodsyntax
    2964558342U,	// Hexagon_S2_vspliceib
    1892913670U,	// Hexagon_S2_vsplicerb
    536871430U,	// Hexagon_S4_addaddi
    2166391302U,	// Hexagon_S4_andnp
    2166747654U,	// Hexagon_S4_ornp
    1342177798U,	// Hexagon_S4_subaddi
    25192U,	// IMMEXT_b
    25192U,	// IMMEXT_c
    26216U,	// IMMEXT_g
    26728U,	// IMMEXT_i
    123399U,	// JMP
    272U,	// JMPR
    1286683U,	// JMPR_cNotPt
    1286776U,	// JMPR_cPt
    1290779U,	// JMPR_cdnNotPnt
    1294875U,	// JMPR_cdnNotPt_V3
    1290872U,	// JMPR_cdnPnt
    1294968U,	// JMPR_cdnPt_V3
    571724442U,	// JMP_EQriNotPnt_ie_nv_V4
    571724442U,	// JMP_EQriNotPnt_nv_V4
    628347546U,	// JMP_EQriNotPntneg_ie_nv_V4
    628347546U,	// JMP_EQriNotPntneg_nv_V4
    840159898U,	// JMP_EQriNotPt_ie_nv_V4
    840159898U,	// JMP_EQriNotPt_nv_V4
    896783002U,	// JMP_EQriNotPtneg_ie_nv_V4
    896783002U,	// JMP_EQriNotPtneg_nv_V4
    571724455U,	// JMP_EQriPnt_ie_nv_V4
    571724455U,	// JMP_EQriPnt_nv_V4
    628347559U,	// JMP_EQriPntneg_ie_nv_V4
    628347559U,	// JMP_EQriPntneg_nv_V4
    840159911U,	// JMP_EQriPt_ie_nv_V4
    840159911U,	// JMP_EQriPt_nv_V4
    896783015U,	// JMP_EQriPtneg_ie_nv_V4
    896783015U,	// JMP_EQriPtneg_nv_V4
    93577882U,	// JMP_EQrrNotPnt_ie_nv_V4
    93577882U,	// JMP_EQrrNotPnt_nv_V4
    95675034U,	// JMP_EQrrNotPt_ie_nv_V4
    95675034U,	// JMP_EQrrNotPt_nv_V4
    93577895U,	// JMP_EQrrPnt_ie_nv_V4
    93577895U,	// JMP_EQrrPnt_nv_V4
    95675047U,	// JMP_EQrrPt_ie_nv_V4
    95675047U,	// JMP_EQrrPt_nv_V4
    571724517U,	// JMP_GTUriNotPnt_ie_nv_V4
    571724517U,	// JMP_GTUriNotPnt_nv_V4
    840159973U,	// JMP_GTUriNotPt_ie_nv_V4
    840159973U,	// JMP_GTUriNotPt_nv_V4
    571724531U,	// JMP_GTUriPnt_ie_nv_V4
    571724531U,	// JMP_GTUriPnt_nv_V4
    840159987U,	// JMP_GTUriPt_ie_nv_V4
    840159987U,	// JMP_GTUriPt_nv_V4
    93577957U,	// JMP_GTUrrNotPnt_ie_nv_V4
    93577957U,	// JMP_GTUrrNotPnt_nv_V4
    95675109U,	// JMP_GTUrrNotPt_ie_nv_V4
    95675109U,	// JMP_GTUrrNotPt_nv_V4
    93577971U,	// JMP_GTUrrPnt_ie_nv_V4
    93577971U,	// JMP_GTUrrPnt_nv_V4
    95675123U,	// JMP_GTUrrPt_ie_nv_V4
    95675123U,	// JMP_GTUrrPt_nv_V4
    97776357U,	// JMP_GTUrrdnNotPnt_ie_nv_V4
    97776357U,	// JMP_GTUrrdnNotPnt_nv_V4
    99873509U,	// JMP_GTUrrdnNotPt_ie_nv_V4
    99873509U,	// JMP_GTUrrdnNotPt_nv_V4
    97776371U,	// JMP_GTUrrdnPnt_ie_nv_V4
    97776371U,	// JMP_GTUrrdnPnt_nv_V4
    99873523U,	// JMP_GTUrrdnPt_ie_nv_V4
    99873523U,	// JMP_GTUrrdnPt_nv_V4
    571724467U,	// JMP_GTriNotPnt_ie_nv_V4
    571724467U,	// JMP_GTriNotPnt_nv_V4
    628347571U,	// JMP_GTriNotPntneg_ie_nv_V4
    628347571U,	// JMP_GTriNotPntneg_nv_V4
    840159923U,	// JMP_GTriNotPt_ie_nv_V4
    840159923U,	// JMP_GTriNotPt_nv_V4
    896783027U,	// JMP_GTriNotPtneg_ie_nv_V4
    896783027U,	// JMP_GTriNotPtneg_nv_V4
    571724480U,	// JMP_GTriPnt_ie_nv_V4
    571724480U,	// JMP_GTriPnt_nv_V4
    628347584U,	// JMP_GTriPntneg_ie_nv_V4
    628347584U,	// JMP_GTriPntneg_nv_V4
    840159936U,	// JMP_GTriPt_ie_nv_V4
    840159936U,	// JMP_GTriPt_nv_V4
    896783040U,	// JMP_GTriPtneg_ie_nv_V4
    896783040U,	// JMP_GTriPtneg_nv_V4
    93577907U,	// JMP_GTrrNotPnt_ie_nv_V4
    93577907U,	// JMP_GTrrNotPnt_nv_V4
    95675059U,	// JMP_GTrrNotPt_ie_nv_V4
    95675059U,	// JMP_GTrrNotPt_nv_V4
    93577920U,	// JMP_GTrrPnt_ie_nv_V4
    93577920U,	// JMP_GTrrPnt_nv_V4
    95675072U,	// JMP_GTrrPt_ie_nv_V4
    95675072U,	// JMP_GTrrPt_nv_V4
    97776307U,	// JMP_GTrrdnNotPnt_ie_nv_V4
    97776307U,	// JMP_GTrrdnNotPnt_nv_V4
    99873459U,	// JMP_GTrrdnNotPt_ie_nv_V4
    99873459U,	// JMP_GTrrdnNotPt_nv_V4
    97776320U,	// JMP_GTrrdnPnt_ie_nv_V4
    97776320U,	// JMP_GTrrdnPnt_nv_V4
    99873472U,	// JMP_GTrrdnPt_ie_nv_V4
    99873472U,	// JMP_GTrrdnPt_nv_V4
    571724492U,	// JMP_TSTBITr0NotPnt_ie_nv_V4
    571724492U,	// JMP_TSTBITr0NotPnt_nv_V4
    840159948U,	// JMP_TSTBITr0NotPt_ie_nv_V4
    840159948U,	// JMP_TSTBITr0NotPt_nv_V4
    571724505U,	// JMP_TSTBITr0Pnt_ie_nv_V4
    571724505U,	// JMP_TSTBITr0Pnt_nv_V4
    840159961U,	// JMP_TSTBITr0Pt_ie_nv_V4
    840159961U,	// JMP_TSTBITr0Pt_nv_V4
    119416U,	// JMP_c
    119323U,	// JMP_cNot
    1311259U,	// JMP_cdnNotPnt
    1315355U,	// JMP_cdnNotPt
    1311352U,	// JMP_cdnPnt
    1315448U,	// JMP_cdnPt
    47456774U,	// LDb_GP
    47460870U,	// LDb_GP_V4
    3321898011U,	// LDb_GP_cNotPt_V4
    3321898104U,	// LDb_GP_cPt_V4
    3321902107U,	// LDb_GP_cdnNotPt_V4
    3321902200U,	// LDb_GP_cdnPt_V4
    47464966U,	// LDd_GP
    47469062U,	// LDd_GP_V4
    3323995163U,	// LDd_GP_cNotPt_V4
    3323995256U,	// LDd_GP_cPt_V4
    3323999259U,	// LDd_GP_cdnNotPt_V4
    3323999352U,	// LDd_GP_cdnPt_V4
    47473158U,	// LDh_GP
    47477254U,	// LDh_GP_V4
    3326092315U,	// LDh_GP_cNotPt_V4
    3326092408U,	// LDh_GP_cPt_V4
    3326096411U,	// LDh_GP_cdnNotPt_V4
    3326096504U,	// LDh_GP_cdnPt_V4
    3329524230U,	// LDrib
    3331596806U,	// LDrib_GP
    3331600902U,	// LDrib_GP_V4
    1174414363U,	// LDrib_GP_cNotPt_V4
    1174414456U,	// LDrib_GP_cPt_V4
    1174418459U,	// LDrib_GP_cdnNotPt_V4
    1174418552U,	// LDrib_GP_cdnPt_V4
    3262419462U,	// LDrib_abs_V4
    1453335579U,	// LDrib_abs_cNotPt_V4
    1453335672U,	// LDrib_abs_cPt_V4
    1453339675U,	// LDrib_abs_cdnNotPt_V4
    1453339768U,	// LDrib_abs_cdnPt_V4
    1611956742U,	// LDrib_abs_set_V4
    1611956742U,	// LDrib_abs_setimm_V4
    1992303643U,	// LDrib_cNotPt
    1992303736U,	// LDrib_cPt
    1992307739U,	// LDrib_cdnNotPt
    1992307832U,	// LDrib_cdnPt
    3256128006U,	// LDrib_imm_abs_V4
    2795512859U,	// LDrib_imm_abs_cNotPt_V4
    2795512952U,	// LDrib_imm_abs_cPt_V4
    2795516955U,	// LDrib_imm_abs_cdnNotPt_V4
    2795517048U,	// LDrib_imm_abs_cdnPt_V4
    2148827654U,	// LDrib_ind_lo_V4
    2417263110U,	// LDrib_indexed
    2260739099U,	// LDrib_indexed_cNotPt
    2260739192U,	// LDrib_indexed_cPt
    2260743195U,	// LDrib_indexed_cdnNotPt
    2260743288U,	// LDrib_indexed_cdnPt
    1075085830U,	// LDrib_indexed_shl_V4
    2260739099U,	// LDrib_indexed_shl_cNotPt_V4
    2260739192U,	// LDrib_indexed_shl_cPt_V4
    2260743195U,	// LDrib_indexed_shl_cdnNotPt_V4
    2260743288U,	// LDrib_indexed_shl_cdnPt_V4
    3329397254U,	// LDrid
    3331604998U,	// LDrid_GP
    3331609094U,	// LDrid_GP_V4
    1176511515U,	// LDrid_GP_cNotPt_V4
    1176511608U,	// LDrid_GP_cPt_V4
    1176515611U,	// LDrid_GP_cdnNotPt_V4
    1176515704U,	// LDrid_GP_cdnPt_V4
    1352198U,	// LDrid_abs_V4
    115352603U,	// LDrid_abs_cNotPt_V4
    115352696U,	// LDrid_abs_cPt_V4
    115356699U,	// LDrid_abs_cdnNotPt_V4
    115356792U,	// LDrid_abs_cdnPt_V4
    1611829766U,	// LDrid_abs_set_V4
    1611829766U,	// LDrid_abs_setimm_V4
    1996497947U,	// LDrid_cNotPt
    1996498040U,	// LDrid_cPt
    1996502043U,	// LDrid_cdnNotPt
    1996502136U,	// LDrid_cdnPt
    3329397254U,	// LDrid_f
    1356294U,	// LDrid_ind_lo_V4
    2417136134U,	// LDrid_indexed
    2264933403U,	// LDrid_indexed_cNotPt
    2264933496U,	// LDrid_indexed_cPt
    2264937499U,	// LDrid_indexed_cdnNotPt
    2264937592U,	// LDrid_indexed_cdnPt
    2417136134U,	// LDrid_indexed_f
    1074958854U,	// LDrid_indexed_shl_V4
    2264933403U,	// LDrid_indexed_shl_cNotPt_V4
    2264933496U,	// LDrid_indexed_shl_cPt_V4
    2264937499U,	// LDrid_indexed_shl_cdnNotPt_V4
    2264937592U,	// LDrid_indexed_shl_cdnPt_V4
    3329540614U,	// LDrih
    3331613190U,	// LDrih_GP
    3331617286U,	// LDrih_GP_V4
    1178608667U,	// LDrih_GP_cNotPt_V4
    1178608760U,	// LDrih_GP_cPt_V4
    1178612763U,	// LDrih_GP_cdnNotPt_V4
    1178612856U,	// LDrih_GP_cdnPt_V4
    3262435846U,	// LDrih_abs_V4
    1461724187U,	// LDrih_abs_cNotPt_V4
    1461724280U,	// LDrih_abs_cPt_V4
    1461728283U,	// LDrih_abs_cdnNotPt_V4
    1461728376U,	// LDrih_abs_cdnPt_V4
    1611973126U,	// LDrih_abs_set_V4
    1611973126U,	// LDrih_abs_setimm_V4
    2000692251U,	// LDrih_cNotPt
    2000692344U,	// LDrih_cPt
    2000696347U,	// LDrih_cdnNotPt
    2000696440U,	// LDrih_cdnPt
    3256144390U,	// LDrih_imm_abs_V4
    2803901467U,	// LDrih_imm_abs_cNotPt_V4
    2803901560U,	// LDrih_imm_abs_cPt_V4
    2803905563U,	// LDrih_imm_abs_cdnNotPt_V4
    2803905656U,	// LDrih_imm_abs_cdnPt_V4
    2148844038U,	// LDrih_ind_lo_V4
    2417279494U,	// LDrih_indexed
    2269127707U,	// LDrih_indexed_cNotPt
    2269127800U,	// LDrih_indexed_cPt
    2269131803U,	// LDrih_indexed_cdnNotPt
    2269131896U,	// LDrih_indexed_cdnPt
    1075102214U,	// LDrih_indexed_shl_V4
    2269127707U,	// LDrih_indexed_shl_cNotPt_V4
    2269127800U,	// LDrih_indexed_shl_cPt_V4
    2269131803U,	// LDrih_indexed_shl_cdnNotPt_V4
    2269131896U,	// LDrih_indexed_shl_cdnPt_V4
    3329548806U,	// LDriub
    3331650054U,	// LDriub_GP
    3331654150U,	// LDriub_GP_V4
    1197483035U,	// LDriub_GP_cNotPt_V4
    1197483128U,	// LDriub_GP_cPt_V4
    1197487131U,	// LDriub_GP_cdnNotPt_V4
    1197487224U,	// LDriub_GP_cdnPt_V4
    3262452230U,	// LDriub_abs_V4
    1468015643U,	// LDriub_abs_cNotPt_V4
    1468015736U,	// LDriub_abs_cPt_V4
    1468019739U,	// LDriub_abs_cdnNotPt_V4
    1468019832U,	// LDriub_abs_cdnPt_V4
    1611981318U,	// LDriub_abs_set_V4
    1611981318U,	// LDriub_abs_setimm_V4
    2006983707U,	// LDriub_cNotPt
    2006983800U,	// LDriub_cPt
    2006987803U,	// LDriub_cdnNotPt
    2006987896U,	// LDriub_cdnPt
    3256160774U,	// LDriub_imm_abs_V4
    2810192923U,	// LDriub_imm_abs_cNotPt_V4
    2810193016U,	// LDriub_imm_abs_cPt_V4
    2810197019U,	// LDriub_imm_abs_cdnNotPt_V4
    2810197112U,	// LDriub_imm_abs_cdnPt_V4
    2148852230U,	// LDriub_ind_lo_V4
    2417287686U,	// LDriub_indexed
    2275419163U,	// LDriub_indexed_cNotPt
    2275419256U,	// LDriub_indexed_cPt
    2275423259U,	// LDriub_indexed_cdnNotPt
    2275423352U,	// LDriub_indexed_cdnPt
    1075110406U,	// LDriub_indexed_shl_V4
    2275419163U,	// LDriub_indexed_shl_cNotPt_V4
    2275419256U,	// LDriub_indexed_shl_cPt_V4
    2275423259U,	// LDriub_indexed_shl_cdnNotPt_V4
    2275423352U,	// LDriub_indexed_shl_cdnPt_V4
    3329565190U,	// LDriuh
    3331666438U,	// LDriuh_GP
    3331670534U,	// LDriuh_GP_V4
    1203774491U,	// LDriuh_GP_cNotPt_V4
    1203774584U,	// LDriuh_GP_cPt_V4
    1203778587U,	// LDriuh_GP_cdnNotPt_V4
    1203778680U,	// LDriuh_GP_cdnPt_V4
    3262468614U,	// LDriuh_abs_V4
    1474307099U,	// LDriuh_abs_cNotPt_V4
    1474307192U,	// LDriuh_abs_cPt_V4
    1474311195U,	// LDriuh_abs_cdnNotPt_V4
    1474311288U,	// LDriuh_abs_cdnPt_V4
    1611997702U,	// LDriuh_abs_set_V4
    1611997702U,	// LDriuh_abs_setimm_V4
    2013275163U,	// LDriuh_cNotPt
    2013275256U,	// LDriuh_cPt
    2013279259U,	// LDriuh_cdnNotPt
    2013279352U,	// LDriuh_cdnPt
    3256177158U,	// LDriuh_imm_abs_V4
    2816484379U,	// LDriuh_imm_abs_cNotPt_V4
    2816484472U,	// LDriuh_imm_abs_cPt_V4
    2816488475U,	// LDriuh_imm_abs_cdnNotPt_V4
    2816488568U,	// LDriuh_imm_abs_cdnPt_V4
    2148868614U,	// LDriuh_ind_lo_V4
    2417304070U,	// LDriuh_indexed
    2281710619U,	// LDriuh_indexed_cNotPt
    2281710712U,	// LDriuh_indexed_cPt
    2281714715U,	// LDriuh_indexed_cdnNotPt
    2281714808U,	// LDriuh_indexed_cdnPt
    1075126790U,	// LDriuh_indexed_shl_V4
    2281710619U,	// LDriuh_indexed_shl_cNotPt_V4
    2281710712U,	// LDriuh_indexed_shl_cPt_V4
    2281714715U,	// LDriuh_indexed_shl_cdnNotPt_V4
    2281714808U,	// LDriuh_indexed_shl_cdnPt_V4
    3329581574U,	// LDriw
    3331682822U,	// LDriw_GP
    3331686918U,	// LDriw_GP_V4
    1210065947U,	// LDriw_GP_cNotPt_V4
    1210066040U,	// LDriw_GP_cPt_V4
    1210070043U,	// LDriw_GP_cdnNotPt_V4
    1210070136U,	// LDriw_GP_cdnPt_V4
    3262484998U,	// LDriw_abs_V4
    1480598555U,	// LDriw_abs_cNotPt_V4
    1480598648U,	// LDriw_abs_cPt_V4
    1480602651U,	// LDriw_abs_cdnNotPt_V4
    1480602744U,	// LDriw_abs_cdnPt_V4
    1612014086U,	// LDriw_abs_set_V4
    1612014086U,	// LDriw_abs_setimm_V4
    2019566619U,	// LDriw_cNotPt
    2019566712U,	// LDriw_cPt
    2019570715U,	// LDriw_cdnNotPt
    2019570808U,	// LDriw_cdnPt
    3329581574U,	// LDriw_f
    3256193542U,	// LDriw_imm_abs_V4
    2822775835U,	// LDriw_imm_abs_cNotPt_V4
    2822775928U,	// LDriw_imm_abs_cPt_V4
    2822779931U,	// LDriw_imm_abs_cdnNotPt_V4
    2822780024U,	// LDriw_imm_abs_cdnPt_V4
    2148884998U,	// LDriw_ind_lo_V4
    2417320454U,	// LDriw_indexed
    2288002075U,	// LDriw_indexed_cNotPt
    2288002168U,	// LDriw_indexed_cPt
    2288006171U,	// LDriw_indexed_cdnNotPt
    2288006264U,	// LDriw_indexed_cdnPt
    2417320454U,	// LDriw_indexed_f
    1075143174U,	// LDriw_indexed_shl_V4
    2288002075U,	// LDriw_indexed_shl_cNotPt_V4
    2288002168U,	// LDriw_indexed_shl_cPt_V4
    2288006171U,	// LDriw_indexed_shl_cdnNotPt_V4
    2288006264U,	// LDriw_indexed_shl_cdnPt_V4
    391U,	// LDriw_pred
    47510022U,	// LDub_GP
    47514118U,	// LDub_GP_V4
    3344966683U,	// LDub_GP_cNotPt_V4
    3344966776U,	// LDub_GP_cPt_V4
    3344970779U,	// LDub_GP_cdnNotPt_V4
    3344970872U,	// LDub_GP_cdnPt_V4
    47526406U,	// LDuh_GP
    47530502U,	// LDuh_GP_V4
    3351258139U,	// LDuh_GP_cNotPt_V4
    3351258232U,	// LDuh_GP_cPt_V4
    3351262235U,	// LDuh_GP_cdnNotPt_V4
    3351262328U,	// LDuh_GP_cdnPt_V4
    47542790U,	// LDw_GP
    47546886U,	// LDw_GP_V4
    3357549595U,	// LDw_GP_cNotPt_V4
    3357549688U,	// LDw_GP_cPt_V4
    3357553691U,	// LDw_GP_cdnNotPt_V4
    3357553784U,	// LDw_GP_cdnPt_V4
    3262489094U,	// LO
    1421949U,	// LOOP0_i
    47444605U,	// LOOP0_r
    43360774U,	// LO_jt
    3222643206U,	// LO_label
    3222643206U,	// LOi
    1044998U,	// LSL_ADD_rr
    1044998U,	// LSL_ADDd_rr
    1049094U,	// LSL_AND_rr
    1049094U,	// LSL_ANDd_rr
    1057286U,	// LSL_OR_rr
    1057286U,	// LSL_ORd_rr
    1053190U,	// LSL_SUB_rr
    1053190U,	// LSL_SUBd_rr
    1040902U,	// LSL_rr
    1040902U,	// LSLd
    1425926U,	// LSLd_rr_xor_V4
    1430022U,	// LSLi_V4
    2964349446U,	// LSR_ADD_ri
    1892704774U,	// LSR_ADD_rr
    2964349446U,	// LSR_ADDd_ri
    1892704774U,	// LSR_ADDd_rr
    2964353542U,	// LSR_AND_ri
    1892708870U,	// LSR_AND_rr
    2964353542U,	// LSR_ANDd_ri
    1892708870U,	// LSR_ANDd_rr
    2964361734U,	// LSR_OR_ri
    1892717062U,	// LSR_OR_rr
    2964361734U,	// LSR_ORd_ri
    1892717062U,	// LSR_ORd_rr
    2964357638U,	// LSR_SUB_ri
    1892712966U,	// LSR_SUB_rr
    2964357638U,	// LSR_SUBd_ri
    1892712966U,	// LSR_SUBd_rr
    2964365830U,	// LSR_XOR_ri
    2964365830U,	// LSR_XORd_ri
    2695909894U,	// LSR_ri
    2161136134U,	// LSR_rr
    2695909894U,	// LSRd_ri
    2161136134U,	// LSRd_rr
    1892721158U,	// LSRd_rr_xor_V4
    643590U,	// MASK_p
    48603654U,	// MAXUd_rr
    48603654U,	// MAXUw_rr
    48599558U,	// MAXd_rr
    48599558U,	// MAXw_dd
    48599558U,	// MAXw_rr
    4088785540U,	// MEMb_ADDi_MEM_V4
    2719347332U,	// MEMb_ADDi_indexed_MEM_V4
    4076202628U,	// MEMb_ADDr_MEM_V4
    2719347332U,	// MEMb_ADDr_indexed_MEM_V4
    1444484U,	// MEMb_ANDr_MEM_V4
    2719347332U,	// MEMb_ANDr_indexed_MEM_V4
    1448580U,	// MEMb_ORr_MEM_V4
    2987782788U,	// MEMb_ORr_indexed_MEM_V4
    4088801924U,	// MEMb_SUBi_MEM_V4
    3256218244U,	// MEMb_SUBi_indexed_MEM_V4
    4076219012U,	// MEMb_SUBr_MEM_V4
    3256218244U,	// MEMb_SUBr_indexed_MEM_V4
    4088785556U,	// MEMh_ADDi_MEM_V4
    2719347348U,	// MEMh_ADDi_indexed_MEM_V4
    4076202644U,	// MEMh_ADDr_MEM_V4
    2719347348U,	// MEMh_ADDr_indexed_MEM_V4
    1444500U,	// MEMh_ANDr_MEM_V4
    2719347348U,	// MEMh_ANDr_indexed_MEM_V4
    1448596U,	// MEMh_ORr_MEM_V4
    2987782804U,	// MEMh_ORr_indexed_MEM_V4
    4088801940U,	// MEMh_SUBi_MEM_V4
    3256218260U,	// MEMh_SUBi_indexed_MEM_V4
    4076219028U,	// MEMh_SUBr_MEM_V4
    3256218260U,	// MEMh_SUBr_indexed_MEM_V4
    4088785664U,	// MEMw_ADDi_MEM_V4
    3524653824U,	// MEMw_ADDi_indexed_MEM_V4
    4076202752U,	// MEMw_ADDr_MEM_V4
    2719347456U,	// MEMw_ADDr_indexed_MEM_V4
    1444608U,	// MEMw_ANDr_MEM_V4
    3793089280U,	// MEMw_ANDr_indexed_MEM_V4
    1448704U,	// MEMw_ORr_MEM_V4
    2987782912U,	// MEMw_ORr_indexed_MEM_V4
    4088802048U,	// MEMw_SUBi_MEM_V4
    4061524736U,	// MEMw_SUBi_indexed_MEM_V4
    4076219136U,	// MEMw_SUBr_MEM_V4
    3256218368U,	// MEMw_SUBr_indexed_MEM_V4
    48611846U,	// MINUd_rr
    48611846U,	// MINUw_rr
    48607750U,	// MINd_rr
    48607750U,	// MINw_dd
    48607750U,	// MINw_rr
    2160853510U,	// MPY
    2160853510U,	// MPY64
    1892409862U,	// MPY64_acc
    1892413958U,	// MPY64_sub
    2160910854U,	// MPYI
    1621901830U,	// MPYI_acc_ri
    1892434438U,	// MPYI_acc_rr
    2427249158U,	// MPYI_ri
    1454598U,	// MPYI_rin
    1458694U,	// MPYI_riu
    143413766U,	// MPYI_sub_ri
    2160865798U,	// MPYU
    2160865798U,	// MPYU64
    1892422150U,	// MPYU64_acc
    1892426246U,	// MPYU64_sub
    2160853510U,	// MPY_trsext
    2427052550U,	// MUX_ii
    2427052550U,	// MUX_ir
    2160714246U,	// MUX_ri
    2160714246U,	// MUX_rr
    46518790U,	// NEG
    379U,	// NOP
    385542U,	// NOT_p
    385542U,	// NOT_rr
    385542U,	// NOT_rr64
    3283505670U,	// NTSTBIT_ri
    3270922758U,	// NTSTBIT_rr
    2160456198U,	// OR_pp
    2426794502U,	// OR_ri
    2160456198U,	// OR_rr
    2160456198U,	// OR_rr64
    144712731U,	// OR_rr_cNotPt
    144712824U,	// OR_rr_cPt
    144716827U,	// OR_rr_cdnNotPt
    144716920U,	// OR_rr_cdnPt
    2166747654U,	// ORd_NOTd_V4
    5661190U,	// ORi_ASLri_V4
    7758342U,	// ORi_LSRri_V4
    1898861062U,	// ORr_ANDr_NOTr_V4
    1622036998U,	// ORr_ANDri2_V4
    354808326U,	// ORr_ANDri_V4
    1892569606U,	// ORr_ANDrr_V4
    1622041094U,	// ORr_ORri_V4
    1892573702U,	// ORr_ORrr_V4
    946694U,	// ORr_XORrr_V4
    49578502U,	// POST_LDrib
    1992305691U,	// POST_LDrib_cNotPt
    1992305784U,	// POST_LDrib_cPt
    1992309787U,	// POST_LDrib_cdnNotPt_V4
    1992309880U,	// POST_LDrib_cdnPt_V4
    49451526U,	// POST_LDrid
    1996499995U,	// POST_LDrid_cNotPt
    1996500088U,	// POST_LDrid_cPt
    1996504091U,	// POST_LDrid_cdnNotPt_V4
    1996504184U,	// POST_LDrid_cdnPt_V4
    49594886U,	// POST_LDrih
    2000694299U,	// POST_LDrih_cNotPt
    2000694392U,	// POST_LDrih_cPt
    2000698395U,	// POST_LDrih_cdnNotPt_V4
    2000698488U,	// POST_LDrih_cdnPt_V4
    49603078U,	// POST_LDriub
    2006985755U,	// POST_LDriub_cNotPt
    2006985848U,	// POST_LDriub_cPt
    2006989851U,	// POST_LDriub_cdnNotPt_V4
    2006989944U,	// POST_LDriub_cdnPt_V4
    49619462U,	// POST_LDriuh
    2013277211U,	// POST_LDriuh_cNotPt
    2013277304U,	// POST_LDriuh_cPt
    2013281307U,	// POST_LDriuh_cdnNotPt_V4
    2013281400U,	// POST_LDriuh_cdnPt_V4
    49635846U,	// POST_LDriw
    2019568667U,	// POST_LDriw_cNotPt
    2019568760U,	// POST_LDriw_cPt
    2019572763U,	// POST_LDriw_cdnNotPt_V4
    2019572856U,	// POST_LDriw_cdnPt_V4
    22443140U,	// POST_STbri
    49710107U,	// POST_STbri_cNotPt
    49710107U,	// POST_STbri_cNotPt_nv_V4
    49710200U,	// POST_STbri_cPt
    49710200U,	// POST_STbri_cPt_nv_V4
    49714203U,	// POST_STbri_cdnNotPt_V4
    49714203U,	// POST_STbri_cdnNotPt_nv_V4
    49714296U,	// POST_STbri_cdnPt_V4
    49714296U,	// POST_STbri_cdnPt_nv_V4
    148272260U,	// POST_STbri_nv_V4
    22443146U,	// POST_STdri
    49718299U,	// POST_STdri_cNotPt
    49718392U,	// POST_STdri_cPt
    49722395U,	// POST_STdri_cdnNotPt_V4
    49722488U,	// POST_STdri_cdnPt_V4
    22443156U,	// POST_SThri
    49726491U,	// POST_SThri_cNotPt
    49726491U,	// POST_SThri_cNotPt_nv_V4
    49726584U,	// POST_SThri_cPt
    49726584U,	// POST_SThri_cPt_nv_V4
    49730587U,	// POST_SThri_cdnNotPt_V4
    49730587U,	// POST_SThri_cdnNotPt_nv_V4
    49730680U,	// POST_SThri_cdnPt_V4
    49730680U,	// POST_SThri_cdnPt_nv_V4
    148272276U,	// POST_SThri_nv_V4
    22443264U,	// POST_STwri
    49734683U,	// POST_STwri_cNotPt
    49734683U,	// POST_STwri_cNotPt_nv_V4
    49734776U,	// POST_STwri_cPt
    49734776U,	// POST_STwri_cPt_nv_V4
    49738779U,	// POST_STwri_cdnNotPt_V4
    49738779U,	// POST_STwri_cdnNotPt_nv_V4
    49738872U,	// POST_STwri_cdnPt_V4
    49738872U,	// POST_STwri_cdnPt_nv_V4
    148272384U,	// POST_STwri_nv_V4
    1507841U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    1511943U,	// RESTORE_DEALLOC_RET_JMP_V4
    1516033U,	// SAVE_REGISTERS_CALL_V4
    2695950854U,	// SETBIT
    2695950854U,	// SETBIT_31
    90630U,	// SI_to_SXTHI_asrh
    4028053062U,	// STb_GP
    4028053062U,	// STb_GP_V4
    4176953883U,	// STb_GP_cNotPt_V4
    150422043U,	// STb_GP_cNotPt_nv_V4
    4176953976U,	// STb_GP_cPt_V4
    150422136U,	// STb_GP_cPt_nv_V4
    4176957979U,	// STb_GP_cdnNotPt_V4
    150426139U,	// STb_GP_cdnNotPt_nv_V4
    4176958072U,	// STb_GP_cdnPt_V4
    150426232U,	// STb_GP_cdnPt_nv_V4
    1521222U,	// STb_GP_nv_V4
    4028053069U,	// STd_GP
    4028053069U,	// STd_GP_V4
    4176962075U,	// STd_GP_cNotPt_V4
    4176962168U,	// STd_GP_cPt_V4
    4176966171U,	// STd_GP_cdnNotPt_V4
    4176966264U,	// STd_GP_cdnPt_V4
    4028053089U,	// STh_GP
    4028053089U,	// STh_GP_V4
    4176970267U,	// STh_GP_cNotPt_V4
    150438427U,	// STh_GP_cNotPt_nv_V4
    4176970360U,	// STh_GP_cPt_V4
    150438520U,	// STh_GP_cPt_nv_V4
    4176974363U,	// STh_GP_cdnNotPt_V4
    150442523U,	// STh_GP_cdnNotPt_nv_V4
    4176974456U,	// STh_GP_cdnPt_V4
    150442616U,	// STh_GP_cdnPt_nv_V4
    1521249U,	// STh_GP_nv_V4
    4076288644U,	// STrib
    303539782U,	// STrib_GP
    303539782U,	// STrib_GP_V4
    379011611U,	// STrib_GP_cNotPt_V4
    379011611U,	// STrib_GP_cNotPt_nv_V4
    379011704U,	// STrib_GP_cPt_V4
    379011704U,	// STrib_GP_cPt_nv_V4
    379015707U,	// STrib_GP_cdnNotPt_V4
    379015707U,	// STrib_GP_cdnNotPt_nv_V4
    379015800U,	// STrib_GP_cdnPt_V4
    379015800U,	// STrib_GP_cdnPt_nv_V4
    303539782U,	// STrib_GP_nv_V4
    4028053030U,	// STrib_abs_V4
    4176953883U,	// STrib_abs_cNotPt_V4
    150422043U,	// STrib_abs_cNotPt_nv_V4
    4176953976U,	// STrib_abs_cPt_V4
    150422136U,	// STrib_abs_cPt_nv_V4
    4176957979U,	// STrib_abs_cdnNotPt_V4
    150426139U,	// STrib_abs_cdnNotPt_nv_V4
    4176958072U,	// STrib_abs_cdnPt_V4
    150426232U,	// STrib_abs_cdnPt_nv_V4
    1521190U,	// STrib_abs_nv_V4
    152547972U,	// STrib_abs_set_V4
    330805892U,	// STrib_abs_setimm_V4
    376865307U,	// STrib_cNotPt
    376865307U,	// STrib_cNotPt_nv_V4
    376865400U,	// STrib_cPt
    376865400U,	// STrib_cPt_nv_V4
    376869403U,	// STrib_cdnNotPt_V4
    376869403U,	// STrib_cdnNotPt_nv_V4
    376869496U,	// STrib_cdnPt_V4
    376869496U,	// STrib_cdnPt_nv_V4
    571863684U,	// STrib_imm_V4
    4028053542U,	// STrib_imm_abs_V4
    22528539U,	// STrib_imm_abs_cNotPt_V4
    148357659U,	// STrib_imm_abs_cNotPt_nv_V4
    22528632U,	// STrib_imm_abs_cPt_V4
    148357752U,	// STrib_imm_abs_cPt_nv_V4
    22532635U,	// STrib_imm_abs_cdnNotPt_V4
    148361755U,	// STrib_imm_abs_cdnNotPt_nv_V4
    22532728U,	// STrib_imm_abs_cdnPt_V4
    148361848U,	// STrib_imm_abs_cdnPt_nv_V4
    1521702U,	// STrib_imm_abs_nv_V4
    2417394203U,	// STrib_imm_cNotPt_V4
    2417394296U,	// STrib_imm_cPt_V4
    2417398299U,	// STrib_imm_cdnNotPt_V4
    2417398392U,	// STrib_imm_cdnPt_V4
    154657412U,	// STrib_ind_lo_V4
    299233924U,	// STrib_indexed
    2417394203U,	// STrib_indexed_cNotPt
    2417394203U,	// STrib_indexed_cNotPt_nv_V4
    2417394296U,	// STrib_indexed_cPt
    2417394296U,	// STrib_indexed_cPt_nv_V4
    2417398299U,	// STrib_indexed_cdnNotPt_V4
    2417398299U,	// STrib_indexed_cdnNotPt_nv_V4
    2417398392U,	// STrib_indexed_cdnPt_V4
    2417398392U,	// STrib_indexed_cdnPt_nv_V4
    299233924U,	// STrib_indexed_nv_V4
    2149032580U,	// STrib_indexed_shl_V4
    1075216923U,	// STrib_indexed_shl_cNotPt_V4
    1075216923U,	// STrib_indexed_shl_cNotPt_nv_V4
    1075217016U,	// STrib_indexed_shl_cPt_V4
    1075217016U,	// STrib_indexed_shl_cPt_nv_V4
    1075221019U,	// STrib_indexed_shl_cdnNotPt_V4
    1075221019U,	// STrib_indexed_shl_cdnNotPt_nv_V4
    1075221112U,	// STrib_indexed_shl_cdnPt_V4
    1075221112U,	// STrib_indexed_shl_cdnPt_nv_V4
    2149032580U,	// STrib_indexed_shl_nv_V4
    49756804U,	// STrib_nv_V4
    2841109124U,	// STrib_shl_V4
    2841109124U,	// STrib_shl_nv_V4
    4076288650U,	// STrid
    303539789U,	// STrid_GP
    303539789U,	// STrid_GP_V4
    379019803U,	// STrid_GP_cNotPt_V4
    379019896U,	// STrid_GP_cPt_V4
    379023899U,	// STrid_GP_cdnNotPt_V4
    379023992U,	// STrid_GP_cdnPt_V4
    4028053038U,	// STrid_abs_V4
    4176962075U,	// STrid_abs_cNotPt_V4
    4176962168U,	// STrid_abs_cPt_V4
    4176966171U,	// STrid_abs_cdnNotPt_V4
    4176966264U,	// STrid_abs_cdnPt_V4
    152547978U,	// STrid_abs_set_V4
    330805898U,	// STrid_abs_setimm_V4
    376873499U,	// STrid_cNotPt
    376873592U,	// STrid_cPt
    376877595U,	// STrid_cdnNotPt_V4
    376877688U,	// STrid_cdnPt_V4
    4076288650U,	// STrid_f
    1498931850U,	// STrid_ind_lo_V4
    299233930U,	// STrid_indexed
    2417402395U,	// STrid_indexed_cNotPt
    2417402488U,	// STrid_indexed_cPt
    2417406491U,	// STrid_indexed_cdnNotPt_V4
    2417406584U,	// STrid_indexed_cdnPt_V4
    303428234U,	// STrid_indexed_f
    2149032586U,	// STrid_indexed_shl_V4
    1075225115U,	// STrid_indexed_shl_cNotPt_V4
    1075225208U,	// STrid_indexed_shl_cPt_V4
    1075229211U,	// STrid_indexed_shl_cdnNotPt_V4
    1075229304U,	// STrid_indexed_shl_cdnPt_V4
    2841109130U,	// STrid_shl_V4
    4076288660U,	// STrih
    303539809U,	// STrih_GP
    303539809U,	// STrih_GP_V4
    379027995U,	// STrih_GP_cNotPt_V4
    379027995U,	// STrih_GP_cNotPt_nv_V4
    379028088U,	// STrih_GP_cPt_V4
    379028088U,	// STrih_GP_cPt_nv_V4
    379032091U,	// STrih_GP_cdnNotPt_V4
    379032091U,	// STrih_GP_cdnNotPt_nv_V4
    379032184U,	// STrih_GP_cdnPt_V4
    379032184U,	// STrih_GP_cdnPt_nv_V4
    303539809U,	// STrih_GP_nv_V4
    4028053046U,	// STrih_abs_V4
    4176970267U,	// STrih_abs_cNotPt_V4
    150438427U,	// STrih_abs_cNotPt_nv_V4
    4176970360U,	// STrih_abs_cPt_V4
    150438520U,	// STrih_abs_cPt_nv_V4
    4176974363U,	// STrih_abs_cdnNotPt_V4
    150442523U,	// STrih_abs_cdnNotPt_nv_V4
    4176974456U,	// STrih_abs_cdnPt_V4
    150442616U,	// STrih_abs_cdnPt_nv_V4
    1521206U,	// STrih_abs_nv_V4
    152547988U,	// STrih_abs_set_V4
    330805908U,	// STrih_abs_setimm_V4
    376881691U,	// STrih_cNotPt
    376881691U,	// STrih_cNotPt_nv_V4
    376881784U,	// STrih_cPt
    376881784U,	// STrih_cPt_nv_V4
    376885787U,	// STrih_cdnNotPt_V4
    376885787U,	// STrih_cdnNotPt_nv_V4
    376885880U,	// STrih_cdnPt_V4
    376885880U,	// STrih_cdnPt_nv_V4
    571863700U,	// STrih_imm_V4
    4028053558U,	// STrih_imm_abs_V4
    22540827U,	// STrih_imm_abs_cNotPt_V4
    148369947U,	// STrih_imm_abs_cNotPt_nv_V4
    22540920U,	// STrih_imm_abs_cPt_V4
    148370040U,	// STrih_imm_abs_cPt_nv_V4
    22544923U,	// STrih_imm_abs_cdnNotPt_V4
    148374043U,	// STrih_imm_abs_cdnNotPt_nv_V4
    22545016U,	// STrih_imm_abs_cdnPt_V4
    148374136U,	// STrih_imm_abs_cdnPt_nv_V4
    1521718U,	// STrih_imm_abs_nv_V4
    2417410587U,	// STrih_imm_cNotPt_V4
    2417410680U,	// STrih_imm_cPt_V4
    2417414683U,	// STrih_imm_cdnNotPt_V4
    2417414776U,	// STrih_imm_cdnPt_V4
    154657428U,	// STrih_ind_lo_V4
    299233940U,	// STrih_indexed
    2417410587U,	// STrih_indexed_cNotPt
    2417410587U,	// STrih_indexed_cNotPt_nv_V4
    2417410680U,	// STrih_indexed_cPt
    2417410680U,	// STrih_indexed_cPt_nv_V4
    2417414683U,	// STrih_indexed_cdnNotPt_V4
    2417414683U,	// STrih_indexed_cdnNotPt_nv_V4
    2417414776U,	// STrih_indexed_cdnPt_V4
    2417414776U,	// STrih_indexed_cdnPt_nv_V4
    299233940U,	// STrih_indexed_nv_V4
    2149032596U,	// STrih_indexed_shl_V4
    1075233307U,	// STrih_indexed_shl_cNotPt_V4
    1075233307U,	// STrih_indexed_shl_cNotPt_nv_V4
    1075233400U,	// STrih_indexed_shl_cPt_V4
    1075233400U,	// STrih_indexed_shl_cPt_nv_V4
    1075237403U,	// STrih_indexed_shl_cdnNotPt_V4
    1075237403U,	// STrih_indexed_shl_cdnNotPt_nv_V4
    1075237496U,	// STrih_indexed_shl_cdnPt_V4
    1075237496U,	// STrih_indexed_shl_cdnPt_nv_V4
    2149032596U,	// STrih_indexed_shl_nv_V4
    49756820U,	// STrih_nv_V4
    840299156U,	// STrih_offset_ext_V4
    2841109140U,	// STrih_shl_V4
    2841109140U,	// STrih_shl_nv_V4
    4076288768U,	// STriw
    303539825U,	// STriw_GP
    303539825U,	// STriw_GP_V4
    379064859U,	// STriw_GP_cNotPt_V4
    379064859U,	// STriw_GP_cNotPt_nv_V4
    379064952U,	// STriw_GP_cPt_V4
    379064952U,	// STriw_GP_cPt_nv_V4
    379068955U,	// STriw_GP_cdnNotPt_V4
    379068955U,	// STriw_GP_cdnNotPt_nv_V4
    379069048U,	// STriw_GP_cdnPt_V4
    379069048U,	// STriw_GP_cdnPt_nv_V4
    303539825U,	// STriw_GP_nv_V4
    4028053054U,	// STriw_abs_V4
    4177007131U,	// STriw_abs_cNotPt_V4
    150475291U,	// STriw_abs_cNotPt_nv_V4
    4177007224U,	// STriw_abs_cPt_V4
    150475384U,	// STriw_abs_cPt_nv_V4
    4177011227U,	// STriw_abs_cdnNotPt_V4
    150479387U,	// STriw_abs_cdnNotPt_nv_V4
    4177011320U,	// STriw_abs_cdnPt_V4
    150479480U,	// STriw_abs_cdnPt_nv_V4
    1521214U,	// STriw_abs_nv_V4
    152548096U,	// STriw_abs_set_V4
    330806016U,	// STriw_abs_setimm_V4
    376889883U,	// STriw_cNotPt
    376889883U,	// STriw_cNotPt_nv_V4
    376889976U,	// STriw_cPt
    376889976U,	// STriw_cPt_nv_V4
    376893979U,	// STriw_cdnNotPt_V4
    376893979U,	// STriw_cdnNotPt_nv_V4
    376894072U,	// STriw_cdnPt_V4
    376894072U,	// STriw_cdnPt_nv_V4
    4076288768U,	// STriw_f
    571863808U,	// STriw_imm_V4
    4028053566U,	// STriw_imm_abs_V4
    22557211U,	// STriw_imm_abs_cNotPt_V4
    148386331U,	// STriw_imm_abs_cNotPt_nv_V4
    22557304U,	// STriw_imm_abs_cPt_V4
    148386424U,	// STriw_imm_abs_cPt_nv_V4
    22561307U,	// STriw_imm_abs_cdnNotPt_V4
    148390427U,	// STriw_imm_abs_cdnNotPt_nv_V4
    22561400U,	// STriw_imm_abs_cdnPt_V4
    148390520U,	// STriw_imm_abs_cdnPt_nv_V4
    1521726U,	// STriw_imm_abs_nv_V4
    2417418779U,	// STriw_imm_cNotPt_V4
    2417418872U,	// STriw_imm_cPt_V4
    2417422875U,	// STriw_imm_cdnNotPt_V4
    2417422968U,	// STriw_imm_cdnPt_V4
    154657536U,	// STriw_ind_lo_V4
    299234048U,	// STriw_indexed
    2417418779U,	// STriw_indexed_cNotPt
    2417418779U,	// STriw_indexed_cNotPt_nv_V4
    2417418872U,	// STriw_indexed_cPt
    2417418872U,	// STriw_indexed_cPt_nv_V4
    2417422875U,	// STriw_indexed_cdnNotPt_V4
    2417422875U,	// STriw_indexed_cdnNotPt_nv_V4
    2417422968U,	// STriw_indexed_cdnPt_V4
    2417422968U,	// STriw_indexed_cdnPt_nv_V4
    303428352U,	// STriw_indexed_f
    299234048U,	// STriw_indexed_nv_V4
    2149032704U,	// STriw_indexed_shl_V4
    1075241499U,	// STriw_indexed_shl_cNotPt_V4
    1075241499U,	// STriw_indexed_shl_cNotPt_nv_V4
    1075241592U,	// STriw_indexed_shl_cPt_V4
    1075241592U,	// STriw_indexed_shl_cPt_nv_V4
    1075245595U,	// STriw_indexed_shl_cdnNotPt_V4
    1075245595U,	// STriw_indexed_shl_cdnNotPt_nv_V4
    1075245688U,	// STriw_indexed_shl_cdnPt_V4
    1075245688U,	// STriw_indexed_shl_cdnPt_nv_V4
    2149032704U,	// STriw_indexed_shl_nv_V4
    49756928U,	// STriw_nv_V4
    840299264U,	// STriw_offset_ext_V4
    391U,	// STriw_pred
    391U,	// STriw_pred_V4
    2841109248U,	// STriw_shl_V4
    2841109248U,	// STriw_shl_nv_V4
    4028053105U,	// STw_GP
    4028053105U,	// STw_GP_V4
    4177007131U,	// STw_GP_cNotPt_V4
    150475291U,	// STw_GP_cNotPt_nv_V4
    4177007224U,	// STw_GP_cPt_V4
    150475384U,	// STw_GP_cPt_nv_V4
    4177011227U,	// STw_GP_cdnNotPt_V4
    150479387U,	// STw_GP_cdnNotPt_nv_V4
    4177011320U,	// STw_GP_cdnPt_V4
    150479480U,	// STw_GP_cdnPt_nv_V4
    1521265U,	// STw_GP_nv_V4
    2160480774U,	// SUB64_rr
    29778438U,	// SUB_ri
    2160480774U,	// SUB_rr
    157295643U,	// SUB_rr_cNotPt
    157295736U,	// SUB_rr_cPt
    157299739U,	// SUB_rr_cdnNotPt
    157299832U,	// SUB_rr_cdnPt
    1103520262U,	// SUBi_ASLri_V4
    1371955718U,	// SUBi_LSRri_V4
    1621950982U,	// SUBri_acc
    1892483590U,	// SUBrr_acc
    451078U,	// SXTB
    159392795U,	// SXTB_cNotPt_V4
    159392888U,	// SXTB_cPt_V4
    159396891U,	// SXTB_cdnNotPt_V4
    159396984U,	// SXTB_cdnPt_V4
    455174U,	// SXTH
    161489947U,	// SXTH_cNotPt_V4
    161490040U,	// SXTH_cPt_V4
    161494043U,	// SXTH_cdnNotPt_V4
    161494136U,	// SXTH_cdnPt_V4
    459270U,	// SXTW
    1593876U,	// TCRETURNR
    1593863U,	// TCRETURNtext
    1593863U,	// TCRETURNtg
    21029382U,	// TFCR
    21029382U,	// TFR
    21029382U,	// TFR64
    163587099U,	// TFR64_cNotPt
    163587192U,	// TFR64_cPt
    163591195U,	// TFR64_cdnNotPt
    163591288U,	// TFR64_cdnPt
    4056363526U,	// TFRI
    4060557830U,	// TFRI64
    4067975686U,	// TFRI_V4
    165684251U,	// TFRI_cNotPt
    1509958689U,	// TFRI_cNotPt_V4
    2315265051U,	// TFRI_cNotPt_f
    165684344U,	// TFRI_cPt
    1509958800U,	// TFRI_cPt_V4
    2315265144U,	// TFRI_cPt_f
    165688347U,	// TFRI_cdnNotPt
    1509962785U,	// TFRI_cdnNotPt_V4
    165688440U,	// TFRI_cdnPt
    1509962896U,	// TFRI_cdnPt_V4
    4028129798U,	// TFRI_f
    169869830U,	// TFR_FI
    1610613254U,	// TFR_FI_immext_V4
    172581382U,	// TFR_PdFalse
    174121478U,	// TFR_PdRs
    174121478U,	// TFR_RsPd
    163587099U,	// TFR_cNotPt
    163587192U,	// TFR_cPt
    163591195U,	// TFR_cdnNotPt
    163591288U,	// TFR_cdnPt
    391U,	// TFR_condset_ii
    391U,	// TFR_condset_ii_f
    391U,	// TFR_condset_ir
    391U,	// TFR_condset_ir_f
    391U,	// TFR_condset_ri
    391U,	// TFR_condset_ri_f
    391U,	// TFR_condset_rr
    391U,	// TFR_condset_rr64_f
    391U,	// TFR_condset_rr_f
    2695950854U,	// TOGBIT
    2695979526U,	// TOGBIT_31
    2698080774U,	// TSTBIT_ri
    2161209862U,	// TSTBIT_rr
    2160198150U,	// V4_A4_rcmpeq
    2426536454U,	// V4_A4_rcmpeqi
    2160251398U,	// V4_A4_rcmpneq
    2426589702U,	// V4_A4_rcmpneqi
    1892778502U,	// VALIGN_rrp
    651782U,	// VITPACK_pp
    655878U,	// VMUX_prr64
    1892913670U,	// VSPLICE_rrp
    614918U,	// XOR_pp
    614918U,	// XOR_rr
    614918U,	// XOR_rr64
    176170011U,	// XOR_rr_cNotPt
    176170104U,	// XOR_rr_cPt
    176174107U,	// XOR_rr_cdnNotPt
    176174200U,	// XOR_rr_cdnPt
    934406U,	// XORd_XORdd
    1898873350U,	// XORr_ANDr_NOTr_V4
    1892581894U,	// XORr_ANDrr_V4
    954886U,	// XORr_ORrr_V4
    934406U,	// XORr_XORrr_V4
    619014U,	// ZXTB
    178267163U,	// ZXTB_cNotPt_V4
    178267256U,	// ZXTB_cPt_V4
    178271259U,	// ZXTB_cdnNotPt_V4
    178271352U,	// ZXTB_cdnPt_V4
    623110U,	// ZXTH
    180364315U,	// ZXTH_cNotPt_V4
    180364408U,	// ZXTH_cPt_V4
    180368411U,	// ZXTH_cdnNotPt_V4
    180368504U,	// ZXTH_cdnPt_V4
    668166U,	// fADD64_rr
    709126U,	// fADD_rr
    700934U,	// fMUL64_rr
    741894U,	// fMUL_rr
    705030U,	// fSUB64_rr
    745990U,	// fSUB_rr
    0U
  };

  static const uint32_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// ADD64_rr
    0U,	// ADDASL
    4U,	// ADD_ri
    8U,	// ADD_ri_cNotPt
    8U,	// ADD_ri_cPt
    8U,	// ADD_ri_cdnNotPt
    8U,	// ADD_ri_cdnPt
    0U,	// ADD_rr
    12U,	// ADD_rr_cNotPt
    12U,	// ADD_rr_cPt
    12U,	// ADD_rr_cdnNotPt
    12U,	// ADD_rr_cdnPt
    0U,	// ADDi_ASLri_V4
    0U,	// ADDi_LSRri_V4
    272U,	// ADDi_MPYri_V4
    268U,	// ADDi_MPYrr_V4
    264U,	// ADDr_ADDri_V4
    0U,	// ADDr_MPYir_V4
    532U,	// ADDr_MPYri_V4
    280U,	// ADDr_MPYrr_V4
    4868U,	// ADDr_SUBri_V4
    4868U,	// ADDri_SUBr_V4
    0U,	// ADDri_acc
    28U,	// ADDrr_acc
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    32U,	// ADJDYNALLOC
    0U,	// ALLOCFRAME
    0U,	// ALL_pp
    0U,	// AND_pnotp
    28U,	// AND_pp
    28U,	// AND_ri
    28U,	// AND_rr
    28U,	// AND_rr64
    0U,	// AND_rr_cNotPt
    0U,	// AND_rr_cPt
    0U,	// AND_rr_cdnNotPt
    0U,	// AND_rr_cdnPt
    28U,	// ANDd_NOTd_V4
    0U,	// ANDi_ASLri_V4
    0U,	// ANDi_LSRri_V4
    28U,	// ANDr_ANDr_NOTr_V4
    28U,	// ANDr_ANDrr_V4
    0U,	// ANDr_ORrr_V4
    0U,	// ANDr_XORrr_V4
    0U,	// ANY_pp
    0U,	// ARGEXTEND
    28U,	// ASL
    0U,	// ASLH
    0U,	// ASLH_cNotPt_V4
    0U,	// ASLH_cPt_V4
    0U,	// ASLH_cdnNotPt_V4
    0U,	// ASLH_cdnPt_V4
    28U,	// ASL_ADD_ri
    28U,	// ASL_ADD_rr
    28U,	// ASL_ADDd_ri
    28U,	// ASL_ADDd_rr
    28U,	// ASL_AND_ri
    28U,	// ASL_AND_rr
    28U,	// ASL_ANDd_ri
    28U,	// ASL_ANDd_rr
    28U,	// ASL_OR_ri
    28U,	// ASL_OR_rr
    28U,	// ASL_ORd_ri
    28U,	// ASL_ORd_rr
    28U,	// ASL_SUB_ri
    28U,	// ASL_SUB_rr
    28U,	// ASL_SUBd_ri
    28U,	// ASL_SUBd_rr
    28U,	// ASL_XOR_ri
    28U,	// ASL_XORd_ri
    28U,	// ASL_rr
    28U,	// ASLd
    28U,	// ASLd_ri
    28U,	// ASLd_rr_xor_V4
    0U,	// ASRH
    0U,	// ASRH_cNotPt_V4
    0U,	// ASRH_cPt_V4
    0U,	// ASRH_cdnNotPt_V4
    0U,	// ASRH_cdnPt_V4
    28U,	// ASR_ADD_ri
    28U,	// ASR_ADD_rr
    28U,	// ASR_ADDd_ri
    28U,	// ASR_ADDd_rr
    28U,	// ASR_AND_ri
    28U,	// ASR_AND_rr
    28U,	// ASR_ANDd_ri
    28U,	// ASR_ANDd_rr
    28U,	// ASR_OR_ri
    28U,	// ASR_OR_rr
    28U,	// ASR_ORd_ri
    28U,	// ASR_ORd_rr
    28U,	// ASR_SUB_ri
    28U,	// ASR_SUB_rr
    28U,	// ASR_SUBd_ri
    28U,	// ASR_SUBd_rr
    28U,	// ASR_ri
    28U,	// ASR_rr
    28U,	// ASRd_ri
    28U,	// ASRd_rr
    0U,	// ASRd_rr_xor_V4
    0U,	// BARRIER
    0U,	// BRCOND
    0U,	// BR_JT
    0U,	// CALL
    0U,	// CALLR
    0U,	// CALLRv3
    0U,	// CALLv3
    28U,	// CLRBIT
    28U,	// CLRBIT_31
    28U,	// CMPEHexagon4rr
    28U,	// CMPEQri
    28U,	// CMPEQrr
    0U,	// CMPGEUri
    0U,	// CMPGEri
    28U,	// CMPGT64rr
    28U,	// CMPGTU64rr
    28U,	// CMPGTUri
    28U,	// CMPGTUrr
    28U,	// CMPGTri
    28U,	// CMPGTrr
    0U,	// CMPLTUrr
    0U,	// CMPLTrr
    28U,	// CMPbEQri_V4
    28U,	// CMPbEQrr_sbsb_V4
    28U,	// CMPbEQrr_ubub_V4
    28U,	// CMPbGTUri_V4
    28U,	// CMPbGTUrr_V4
    0U,	// CMPbGTrr_V4
    28U,	// CMPhEQri_V4
    28U,	// CMPhEQrr_shl_V4
    28U,	// CMPhEQrr_xor_V4
    28U,	// CMPhGTUri_V4
    28U,	// CMPhGTUrr_V4
    0U,	// CMPhGTrr_shl_V4
    28U,	// CMPnotEQ_ri
    28U,	// CMPnotEQ_rr
    28U,	// CMPnotGTU_ri
    28U,	// CMPnotGTU_rr
    28U,	// CMPnotGT_ri
    28U,	// CMPnotGT_rr
    32U,	// COMBINE_Ii
    0U,	// COMBINE_Ir_V4
    36U,	// COMBINE_hh
    40U,	// COMBINE_hl
    4U,	// COMBINE_iI_V4
    36U,	// COMBINE_lh
    40U,	// COMBINE_ll
    28U,	// COMBINE_rI_V4
    28U,	// COMBINE_rr
    0U,	// COMBINE_rr_cNotPt
    0U,	// COMBINE_rr_cPt
    0U,	// COMBINE_rr_cdnNotPt
    0U,	// COMBINE_rr_cdnPt
    0U,	// CONST32
    0U,	// CONST32GP_set
    0U,	// CONST32_Float_Real
    0U,	// CONST32_Int_Real
    0U,	// CONST32_Label
    0U,	// CONST32_set
    0U,	// CONST32_set_jt
    0U,	// CONST64_Float_Real
    0U,	// CONST64_Int_Real
    0U,	// CONVERT_d2df
    0U,	// CONVERT_d2sf
    0U,	// CONVERT_df2d
    0U,	// CONVERT_df2d_nchop
    0U,	// CONVERT_df2sf
    0U,	// CONVERT_df2ud
    0U,	// CONVERT_df2ud_nchop
    0U,	// CONVERT_df2uw
    0U,	// CONVERT_df2uw_nchop
    0U,	// CONVERT_df2w
    0U,	// CONVERT_df2w_nchop
    0U,	// CONVERT_sf2d
    0U,	// CONVERT_sf2d_nchop
    0U,	// CONVERT_sf2df
    0U,	// CONVERT_sf2ud
    0U,	// CONVERT_sf2ud_nchop
    0U,	// CONVERT_sf2uw
    0U,	// CONVERT_sf2uw_nchop
    0U,	// CONVERT_sf2w
    0U,	// CONVERT_sf2w_nchop
    0U,	// CONVERT_ud2df
    0U,	// CONVERT_ud2sf
    0U,	// CONVERT_uw2df
    0U,	// CONVERT_uw2sf
    0U,	// CONVERT_w2df
    0U,	// CONVERT_w2sf
    0U,	// CTLZ64_rr
    0U,	// CTLZ_rr
    0U,	// CTTZ64_rr
    0U,	// CTTZ_rr
    0U,	// DEALLOCFRAME
    0U,	// DEALLOC_RET_V4
    0U,	// DEALLOC_RET_cNotPt_V4
    0U,	// DEALLOC_RET_cNotdnPnt_V4
    0U,	// DEALLOC_RET_cNotdnPt_V4
    0U,	// DEALLOC_RET_cPt_V4
    0U,	// DEALLOC_RET_cdnPnt_V4
    0U,	// DEALLOC_RET_cdnPt_V4
    0U,	// ENDLOOP0
    0U,	// FCMPOEQ32_rr
    0U,	// FCMPOEQ64_rr
    0U,	// FCMPOGE32_rr
    0U,	// FCMPOGE64_rr
    0U,	// FCMPOGT32_rr
    0U,	// FCMPOGT64_rr
    0U,	// FCMPUEQ32_rr
    0U,	// FCMPUEQ64_rr
    0U,	// FCMPUGE32_rr
    0U,	// FCMPUGE64_rr
    0U,	// FCMPUGT32_rr
    0U,	// FCMPUGT64_rr
    0U,	// FCONST32_nsdata
    12U,	// FMADD_dp
    12U,	// FMADD_sp
    0U,	// FMAX_dp
    0U,	// FMAX_sp
    0U,	// FMIN_dp
    0U,	// FMIN_sp
    0U,	// HEXAGON_A2_abs
    0U,	// HEXAGON_A2_absp
    0U,	// HEXAGON_A2_abssat
    0U,	// HEXAGON_A2_add
    44U,	// HEXAGON_A2_addh_h16_hh
    48U,	// HEXAGON_A2_addh_h16_hl
    44U,	// HEXAGON_A2_addh_h16_lh
    48U,	// HEXAGON_A2_addh_h16_ll
    52U,	// HEXAGON_A2_addh_h16_sat_hh
    56U,	// HEXAGON_A2_addh_h16_sat_hl
    52U,	// HEXAGON_A2_addh_h16_sat_lh
    56U,	// HEXAGON_A2_addh_h16_sat_ll
    36U,	// HEXAGON_A2_addh_l16_hl
    40U,	// HEXAGON_A2_addh_l16_ll
    60U,	// HEXAGON_A2_addh_l16_sat_hl
    64U,	// HEXAGON_A2_addh_l16_sat_ll
    32U,	// HEXAGON_A2_addi
    0U,	// HEXAGON_A2_addp
    1024U,	// HEXAGON_A2_addsat
    28U,	// HEXAGON_A2_and
    28U,	// HEXAGON_A2_andir
    28U,	// HEXAGON_A2_andp
    0U,	// HEXAGON_A2_aslh
    0U,	// HEXAGON_A2_asrh
    36U,	// HEXAGON_A2_combine_hh
    40U,	// HEXAGON_A2_combine_hl
    36U,	// HEXAGON_A2_combine_lh
    40U,	// HEXAGON_A2_combine_ll
    32U,	// HEXAGON_A2_combineii
    28U,	// HEXAGON_A2_combinew
    0U,	// HEXAGON_A2_max
    0U,	// HEXAGON_A2_maxu
    0U,	// HEXAGON_A2_min
    0U,	// HEXAGON_A2_minu
    0U,	// HEXAGON_A2_neg
    0U,	// HEXAGON_A2_negp
    0U,	// HEXAGON_A2_negsat
    0U,	// HEXAGON_A2_not
    0U,	// HEXAGON_A2_notp
    28U,	// HEXAGON_A2_or
    28U,	// HEXAGON_A2_orir
    28U,	// HEXAGON_A2_orp
    0U,	// HEXAGON_A2_sat
    0U,	// HEXAGON_A2_satb
    0U,	// HEXAGON_A2_sath
    0U,	// HEXAGON_A2_satub
    0U,	// HEXAGON_A2_satuh
    28U,	// HEXAGON_A2_sub
    44U,	// HEXAGON_A2_subh_h16_hh
    48U,	// HEXAGON_A2_subh_h16_hl
    44U,	// HEXAGON_A2_subh_h16_lh
    48U,	// HEXAGON_A2_subh_h16_ll
    52U,	// HEXAGON_A2_subh_h16_sat_hh
    56U,	// HEXAGON_A2_subh_h16_sat_hl
    52U,	// HEXAGON_A2_subh_h16_sat_lh
    56U,	// HEXAGON_A2_subh_h16_sat_ll
    36U,	// HEXAGON_A2_subh_l16_hl
    40U,	// HEXAGON_A2_subh_l16_ll
    60U,	// HEXAGON_A2_subh_l16_sat_hl
    64U,	// HEXAGON_A2_subh_l16_sat_ll
    28U,	// HEXAGON_A2_subp
    0U,	// HEXAGON_A2_subri
    68U,	// HEXAGON_A2_subsat
    0U,	// HEXAGON_A2_svaddh
    0U,	// HEXAGON_A2_svaddhs
    0U,	// HEXAGON_A2_svadduhs
    0U,	// HEXAGON_A2_svavgh
    0U,	// HEXAGON_A2_svavghs
    0U,	// HEXAGON_A2_svnavgh
    0U,	// HEXAGON_A2_svsubh
    0U,	// HEXAGON_A2_svsubhs
    0U,	// HEXAGON_A2_svsubuhs
    0U,	// HEXAGON_A2_swiz
    0U,	// HEXAGON_A2_sxtb
    0U,	// HEXAGON_A2_sxth
    0U,	// HEXAGON_A2_sxtw
    0U,	// HEXAGON_A2_tfr
    0U,	// HEXAGON_A2_tfrih
    0U,	// HEXAGON_A2_tfril
    0U,	// HEXAGON_A2_tfrp
    0U,	// HEXAGON_A2_tfrpi
    0U,	// HEXAGON_A2_tfrsi
    0U,	// HEXAGON_A2_vabsh
    0U,	// HEXAGON_A2_vabshsat
    0U,	// HEXAGON_A2_vabsw
    0U,	// HEXAGON_A2_vabswsat
    0U,	// HEXAGON_A2_vaddh
    0U,	// HEXAGON_A2_vaddhs
    0U,	// HEXAGON_A2_vaddub
    0U,	// HEXAGON_A2_vaddubs
    0U,	// HEXAGON_A2_vadduhs
    0U,	// HEXAGON_A2_vaddw
    0U,	// HEXAGON_A2_vaddws
    0U,	// HEXAGON_A2_vavgh
    0U,	// HEXAGON_A2_vavghcr
    0U,	// HEXAGON_A2_vavghr
    0U,	// HEXAGON_A2_vavgub
    0U,	// HEXAGON_A2_vavgubr
    0U,	// HEXAGON_A2_vavguh
    0U,	// HEXAGON_A2_vavguhr
    0U,	// HEXAGON_A2_vavguw
    0U,	// HEXAGON_A2_vavguwr
    0U,	// HEXAGON_A2_vavgw
    0U,	// HEXAGON_A2_vavgwcr
    0U,	// HEXAGON_A2_vavgwr
    0U,	// HEXAGON_A2_vcmpbeq
    0U,	// HEXAGON_A2_vcmpbgtu
    0U,	// HEXAGON_A2_vcmpheq
    0U,	// HEXAGON_A2_vcmphgt
    0U,	// HEXAGON_A2_vcmphgtu
    0U,	// HEXAGON_A2_vcmpweq
    0U,	// HEXAGON_A2_vcmpwgt
    0U,	// HEXAGON_A2_vcmpwgtu
    0U,	// HEXAGON_A2_vconj
    0U,	// HEXAGON_A2_vmaxh
    0U,	// HEXAGON_A2_vmaxub
    0U,	// HEXAGON_A2_vmaxuh
    0U,	// HEXAGON_A2_vmaxuw
    0U,	// HEXAGON_A2_vmaxw
    0U,	// HEXAGON_A2_vminh
    0U,	// HEXAGON_A2_vminub
    0U,	// HEXAGON_A2_vminuh
    0U,	// HEXAGON_A2_vminuw
    0U,	// HEXAGON_A2_vminw
    0U,	// HEXAGON_A2_vnavgh
    0U,	// HEXAGON_A2_vnavghcr
    0U,	// HEXAGON_A2_vnavghr
    0U,	// HEXAGON_A2_vnavgw
    0U,	// HEXAGON_A2_vnavgwcr
    0U,	// HEXAGON_A2_vnavgwr
    0U,	// HEXAGON_A2_vraddub
    0U,	// HEXAGON_A2_vraddub_acc
    0U,	// HEXAGON_A2_vrsadub
    0U,	// HEXAGON_A2_vrsadub_acc
    0U,	// HEXAGON_A2_vsubh
    0U,	// HEXAGON_A2_vsubhs
    0U,	// HEXAGON_A2_vsubub
    0U,	// HEXAGON_A2_vsububs
    0U,	// HEXAGON_A2_vsubuhs
    0U,	// HEXAGON_A2_vsubw
    0U,	// HEXAGON_A2_vsubws
    0U,	// HEXAGON_A2_xor
    0U,	// HEXAGON_A2_xorp
    0U,	// HEXAGON_A2_zxtb
    0U,	// HEXAGON_A2_zxth
    28U,	// HEXAGON_A4_cround_ri
    28U,	// HEXAGON_A4_cround_rr
    0U,	// HEXAGON_A4_modwrapu
    28U,	// HEXAGON_A4_round_ri
    68U,	// HEXAGON_A4_round_ri_sat
    28U,	// HEXAGON_A4_round_rr
    68U,	// HEXAGON_A4_round_rr_sat
    0U,	// HEXAGON_A5_vaddhubs
    0U,	// HEXAGON_C2_all8
    28U,	// HEXAGON_C2_and
    0U,	// HEXAGON_C2_andn
    0U,	// HEXAGON_C2_any8
    28U,	// HEXAGON_C2_cmpeq
    28U,	// HEXAGON_C2_cmpeqi
    28U,	// HEXAGON_C2_cmpeqp
    0U,	// HEXAGON_C2_cmpgei
    0U,	// HEXAGON_C2_cmpgeui
    28U,	// HEXAGON_C2_cmpgt
    28U,	// HEXAGON_C2_cmpgti
    28U,	// HEXAGON_C2_cmpgtp
    28U,	// HEXAGON_C2_cmpgtu
    28U,	// HEXAGON_C2_cmpgtui
    28U,	// HEXAGON_C2_cmpgtup
    0U,	// HEXAGON_C2_cmplt
    0U,	// HEXAGON_C2_cmpltu
    0U,	// HEXAGON_C2_mask
    24U,	// HEXAGON_C2_mux
    1300U,	// HEXAGON_C2_muxii
    1300U,	// HEXAGON_C2_muxir
    24U,	// HEXAGON_C2_muxri
    0U,	// HEXAGON_C2_not
    28U,	// HEXAGON_C2_or
    0U,	// HEXAGON_C2_orn
    0U,	// HEXAGON_C2_pxfer_map
    0U,	// HEXAGON_C2_tfrpr
    0U,	// HEXAGON_C2_tfrrp
    0U,	// HEXAGON_C2_vitpack
    0U,	// HEXAGON_C2_vmux
    0U,	// HEXAGON_C2_xor
    0U,	// HEXAGON_C4_fastcorner9
    0U,	// HEXAGON_C4_fastcorner9_not
    0U,	// HEXAGON_F2_conv_d2df
    0U,	// HEXAGON_F2_conv_d2sf
    0U,	// HEXAGON_F2_conv_df2d
    0U,	// HEXAGON_F2_conv_df2d_chop
    0U,	// HEXAGON_F2_conv_df2sf
    0U,	// HEXAGON_F2_conv_df2ud
    0U,	// HEXAGON_F2_conv_df2ud_chop
    0U,	// HEXAGON_F2_conv_df2uw
    0U,	// HEXAGON_F2_conv_df2uw_chop
    0U,	// HEXAGON_F2_conv_df2w
    0U,	// HEXAGON_F2_conv_df2w_chop
    0U,	// HEXAGON_F2_conv_sf2d
    0U,	// HEXAGON_F2_conv_sf2d_chop
    0U,	// HEXAGON_F2_conv_sf2df
    0U,	// HEXAGON_F2_conv_sf2ud
    0U,	// HEXAGON_F2_conv_sf2ud_chop
    0U,	// HEXAGON_F2_conv_sf2uw
    0U,	// HEXAGON_F2_conv_sf2uw_chop
    0U,	// HEXAGON_F2_conv_sf2w
    0U,	// HEXAGON_F2_conv_sf2w_chop
    0U,	// HEXAGON_F2_conv_ud2df
    0U,	// HEXAGON_F2_conv_ud2sf
    0U,	// HEXAGON_F2_conv_uw2df
    0U,	// HEXAGON_F2_conv_uw2sf
    0U,	// HEXAGON_F2_conv_w2df
    0U,	// HEXAGON_F2_conv_w2sf
    0U,	// HEXAGON_F2_dfadd
    0U,	// HEXAGON_F2_dfclass
    0U,	// HEXAGON_F2_dfcmpeq
    0U,	// HEXAGON_F2_dfcmpge
    0U,	// HEXAGON_F2_dfcmpgt
    0U,	// HEXAGON_F2_dfcmpuo
    0U,	// HEXAGON_F2_dffixupd
    0U,	// HEXAGON_F2_dffixupn
    0U,	// HEXAGON_F2_dffixupr
    0U,	// HEXAGON_F2_dffma
    1536U,	// HEXAGON_F2_dffma_lib
    41740U,	// HEXAGON_F2_dffma_sc
    0U,	// HEXAGON_F2_dffms
    0U,	// HEXAGON_F2_dffms_lib
    0U,	// HEXAGON_F2_dfimm_n
    0U,	// HEXAGON_F2_dfimm_p
    0U,	// HEXAGON_F2_dfmax
    0U,	// HEXAGON_F2_dfmin
    0U,	// HEXAGON_F2_dfmpy
    0U,	// HEXAGON_F2_dfsub
    0U,	// HEXAGON_F2_sfadd
    0U,	// HEXAGON_F2_sfclass
    0U,	// HEXAGON_F2_sfcmpeq
    0U,	// HEXAGON_F2_sfcmpge
    0U,	// HEXAGON_F2_sfcmpgt
    0U,	// HEXAGON_F2_sfcmpuo
    0U,	// HEXAGON_F2_sffixupd
    0U,	// HEXAGON_F2_sffixupn
    0U,	// HEXAGON_F2_sffixupr
    0U,	// HEXAGON_F2_sffma
    1536U,	// HEXAGON_F2_sffma_lib
    41740U,	// HEXAGON_F2_sffma_sc
    0U,	// HEXAGON_F2_sffms
    0U,	// HEXAGON_F2_sffms_lib
    0U,	// HEXAGON_F2_sfimm_n
    0U,	// HEXAGON_F2_sfimm_p
    0U,	// HEXAGON_F2_sfmax
    0U,	// HEXAGON_F2_sfmin
    0U,	// HEXAGON_F2_sfmpy
    0U,	// HEXAGON_F2_sfsub
    28U,	// HEXAGON_M2_acci
    28U,	// HEXAGON_M2_accii
    0U,	// HEXAGON_M2_cmaci_s0
    0U,	// HEXAGON_M2_cmacr_s0
    0U,	// HEXAGON_M2_cmacs_s0
    0U,	// HEXAGON_M2_cmacs_s1
    0U,	// HEXAGON_M2_cmacsc_s0
    0U,	// HEXAGON_M2_cmacsc_s1
    0U,	// HEXAGON_M2_cmpyi_s0
    0U,	// HEXAGON_M2_cmpyr_s0
    0U,	// HEXAGON_M2_cmpyrs_s0
    0U,	// HEXAGON_M2_cmpyrs_s1
    0U,	// HEXAGON_M2_cmpyrsc_s0
    0U,	// HEXAGON_M2_cmpyrsc_s1
    0U,	// HEXAGON_M2_cmpys_s0
    0U,	// HEXAGON_M2_cmpys_s1
    0U,	// HEXAGON_M2_cmpysc_s0
    0U,	// HEXAGON_M2_cmpysc_s1
    0U,	// HEXAGON_M2_cnacs_s0
    0U,	// HEXAGON_M2_cnacs_s1
    0U,	// HEXAGON_M2_cnacsc_s0
    0U,	// HEXAGON_M2_cnacsc_s1
    28U,	// HEXAGON_M2_dpmpyss_acc_s0
    28U,	// HEXAGON_M2_dpmpyss_nac_s0
    72U,	// HEXAGON_M2_dpmpyss_rnd_s0
    28U,	// HEXAGON_M2_dpmpyss_s0
    28U,	// HEXAGON_M2_dpmpyuu_acc_s0
    28U,	// HEXAGON_M2_dpmpyuu_nac_s0
    28U,	// HEXAGON_M2_dpmpyuu_s0
    76U,	// HEXAGON_M2_hmmpyh_rs1
    80U,	// HEXAGON_M2_hmmpyl_rs1
    28U,	// HEXAGON_M2_maci
    0U,	// HEXAGON_M2_macsin
    28U,	// HEXAGON_M2_macsip
    0U,	// HEXAGON_M2_mmachs_rs0
    0U,	// HEXAGON_M2_mmachs_rs1
    0U,	// HEXAGON_M2_mmachs_s0
    0U,	// HEXAGON_M2_mmachs_s1
    0U,	// HEXAGON_M2_mmacls_rs0
    0U,	// HEXAGON_M2_mmacls_rs1
    0U,	// HEXAGON_M2_mmacls_s0
    0U,	// HEXAGON_M2_mmacls_s1
    0U,	// HEXAGON_M2_mmacuhs_rs0
    0U,	// HEXAGON_M2_mmacuhs_rs1
    0U,	// HEXAGON_M2_mmacuhs_s0
    0U,	// HEXAGON_M2_mmacuhs_s1
    0U,	// HEXAGON_M2_mmaculs_rs0
    0U,	// HEXAGON_M2_mmaculs_rs1
    0U,	// HEXAGON_M2_mmaculs_s0
    0U,	// HEXAGON_M2_mmaculs_s1
    0U,	// HEXAGON_M2_mmpyh_rs0
    0U,	// HEXAGON_M2_mmpyh_rs1
    0U,	// HEXAGON_M2_mmpyh_s0
    0U,	// HEXAGON_M2_mmpyh_s1
    0U,	// HEXAGON_M2_mmpyl_rs0
    0U,	// HEXAGON_M2_mmpyl_rs1
    0U,	// HEXAGON_M2_mmpyl_s0
    0U,	// HEXAGON_M2_mmpyl_s1
    0U,	// HEXAGON_M2_mmpyuh_rs0
    0U,	// HEXAGON_M2_mmpyuh_rs1
    0U,	// HEXAGON_M2_mmpyuh_s0
    0U,	// HEXAGON_M2_mmpyuh_s1
    0U,	// HEXAGON_M2_mmpyul_rs0
    0U,	// HEXAGON_M2_mmpyul_rs1
    0U,	// HEXAGON_M2_mmpyul_s0
    0U,	// HEXAGON_M2_mmpyul_s1
    36U,	// HEXAGON_M2_mpy_acc_hh_s0
    84U,	// HEXAGON_M2_mpy_acc_hh_s1
    40U,	// HEXAGON_M2_mpy_acc_hl_s0
    88U,	// HEXAGON_M2_mpy_acc_hl_s1
    36U,	// HEXAGON_M2_mpy_acc_lh_s0
    84U,	// HEXAGON_M2_mpy_acc_lh_s1
    40U,	// HEXAGON_M2_mpy_acc_ll_s0
    88U,	// HEXAGON_M2_mpy_acc_ll_s1
    60U,	// HEXAGON_M2_mpy_acc_sat_hh_s0
    92U,	// HEXAGON_M2_mpy_acc_sat_hh_s1
    64U,	// HEXAGON_M2_mpy_acc_sat_hl_s0
    96U,	// HEXAGON_M2_mpy_acc_sat_hl_s1
    60U,	// HEXAGON_M2_mpy_acc_sat_lh_s0
    92U,	// HEXAGON_M2_mpy_acc_sat_lh_s1
    64U,	// HEXAGON_M2_mpy_acc_sat_ll_s0
    96U,	// HEXAGON_M2_mpy_acc_sat_ll_s1
    36U,	// HEXAGON_M2_mpy_hh_s0
    84U,	// HEXAGON_M2_mpy_hh_s1
    40U,	// HEXAGON_M2_mpy_hl_s0
    88U,	// HEXAGON_M2_mpy_hl_s1
    36U,	// HEXAGON_M2_mpy_lh_s0
    84U,	// HEXAGON_M2_mpy_lh_s1
    40U,	// HEXAGON_M2_mpy_ll_s0
    88U,	// HEXAGON_M2_mpy_ll_s1
    36U,	// HEXAGON_M2_mpy_nac_hh_s0
    84U,	// HEXAGON_M2_mpy_nac_hh_s1
    40U,	// HEXAGON_M2_mpy_nac_hl_s0
    88U,	// HEXAGON_M2_mpy_nac_hl_s1
    36U,	// HEXAGON_M2_mpy_nac_lh_s0
    84U,	// HEXAGON_M2_mpy_nac_lh_s1
    40U,	// HEXAGON_M2_mpy_nac_ll_s0
    88U,	// HEXAGON_M2_mpy_nac_ll_s1
    60U,	// HEXAGON_M2_mpy_nac_sat_hh_s0
    92U,	// HEXAGON_M2_mpy_nac_sat_hh_s1
    64U,	// HEXAGON_M2_mpy_nac_sat_hl_s0
    96U,	// HEXAGON_M2_mpy_nac_sat_hl_s1
    60U,	// HEXAGON_M2_mpy_nac_sat_lh_s0
    92U,	// HEXAGON_M2_mpy_nac_sat_lh_s1
    64U,	// HEXAGON_M2_mpy_nac_sat_ll_s0
    96U,	// HEXAGON_M2_mpy_nac_sat_ll_s1
    100U,	// HEXAGON_M2_mpy_rnd_hh_s0
    104U,	// HEXAGON_M2_mpy_rnd_hh_s1
    108U,	// HEXAGON_M2_mpy_rnd_hl_s0
    112U,	// HEXAGON_M2_mpy_rnd_hl_s1
    100U,	// HEXAGON_M2_mpy_rnd_lh_s0
    104U,	// HEXAGON_M2_mpy_rnd_lh_s1
    108U,	// HEXAGON_M2_mpy_rnd_ll_s0
    112U,	// HEXAGON_M2_mpy_rnd_ll_s1
    60U,	// HEXAGON_M2_mpy_sat_hh_s0
    92U,	// HEXAGON_M2_mpy_sat_hh_s1
    64U,	// HEXAGON_M2_mpy_sat_hl_s0
    96U,	// HEXAGON_M2_mpy_sat_hl_s1
    60U,	// HEXAGON_M2_mpy_sat_lh_s0
    92U,	// HEXAGON_M2_mpy_sat_lh_s1
    64U,	// HEXAGON_M2_mpy_sat_ll_s0
    96U,	// HEXAGON_M2_mpy_sat_ll_s1
    116U,	// HEXAGON_M2_mpy_sat_rnd_hh_s0
    76U,	// HEXAGON_M2_mpy_sat_rnd_hh_s1
    120U,	// HEXAGON_M2_mpy_sat_rnd_hl_s0
    80U,	// HEXAGON_M2_mpy_sat_rnd_hl_s1
    116U,	// HEXAGON_M2_mpy_sat_rnd_lh_s0
    76U,	// HEXAGON_M2_mpy_sat_rnd_lh_s1
    120U,	// HEXAGON_M2_mpy_sat_rnd_ll_s0
    80U,	// HEXAGON_M2_mpy_sat_rnd_ll_s1
    28U,	// HEXAGON_M2_mpy_up
    36U,	// HEXAGON_M2_mpyd_acc_hh_s0
    84U,	// HEXAGON_M2_mpyd_acc_hh_s1
    40U,	// HEXAGON_M2_mpyd_acc_hl_s0
    88U,	// HEXAGON_M2_mpyd_acc_hl_s1
    36U,	// HEXAGON_M2_mpyd_acc_lh_s0
    84U,	// HEXAGON_M2_mpyd_acc_lh_s1
    40U,	// HEXAGON_M2_mpyd_acc_ll_s0
    88U,	// HEXAGON_M2_mpyd_acc_ll_s1
    36U,	// HEXAGON_M2_mpyd_hh_s0
    84U,	// HEXAGON_M2_mpyd_hh_s1
    40U,	// HEXAGON_M2_mpyd_hl_s0
    88U,	// HEXAGON_M2_mpyd_hl_s1
    36U,	// HEXAGON_M2_mpyd_lh_s0
    84U,	// HEXAGON_M2_mpyd_lh_s1
    40U,	// HEXAGON_M2_mpyd_ll_s0
    88U,	// HEXAGON_M2_mpyd_ll_s1
    36U,	// HEXAGON_M2_mpyd_nac_hh_s0
    84U,	// HEXAGON_M2_mpyd_nac_hh_s1
    40U,	// HEXAGON_M2_mpyd_nac_hl_s0
    88U,	// HEXAGON_M2_mpyd_nac_hl_s1
    36U,	// HEXAGON_M2_mpyd_nac_lh_s0
    84U,	// HEXAGON_M2_mpyd_nac_lh_s1
    40U,	// HEXAGON_M2_mpyd_nac_ll_s0
    88U,	// HEXAGON_M2_mpyd_nac_ll_s1
    100U,	// HEXAGON_M2_mpyd_rnd_hh_s0
    104U,	// HEXAGON_M2_mpyd_rnd_hh_s1
    108U,	// HEXAGON_M2_mpyd_rnd_hl_s0
    112U,	// HEXAGON_M2_mpyd_rnd_hl_s1
    100U,	// HEXAGON_M2_mpyd_rnd_lh_s0
    104U,	// HEXAGON_M2_mpyd_rnd_lh_s1
    108U,	// HEXAGON_M2_mpyd_rnd_ll_s0
    112U,	// HEXAGON_M2_mpyd_rnd_ll_s1
    28U,	// HEXAGON_M2_mpyi
    36U,	// HEXAGON_M2_mpyu_acc_hh_s0
    84U,	// HEXAGON_M2_mpyu_acc_hh_s1
    40U,	// HEXAGON_M2_mpyu_acc_hl_s0
    88U,	// HEXAGON_M2_mpyu_acc_hl_s1
    36U,	// HEXAGON_M2_mpyu_acc_lh_s0
    84U,	// HEXAGON_M2_mpyu_acc_lh_s1
    40U,	// HEXAGON_M2_mpyu_acc_ll_s0
    88U,	// HEXAGON_M2_mpyu_acc_ll_s1
    36U,	// HEXAGON_M2_mpyu_hh_s0
    84U,	// HEXAGON_M2_mpyu_hh_s1
    40U,	// HEXAGON_M2_mpyu_hl_s0
    88U,	// HEXAGON_M2_mpyu_hl_s1
    36U,	// HEXAGON_M2_mpyu_lh_s0
    84U,	// HEXAGON_M2_mpyu_lh_s1
    40U,	// HEXAGON_M2_mpyu_ll_s0
    88U,	// HEXAGON_M2_mpyu_ll_s1
    36U,	// HEXAGON_M2_mpyu_nac_hh_s0
    84U,	// HEXAGON_M2_mpyu_nac_hh_s1
    40U,	// HEXAGON_M2_mpyu_nac_hl_s0
    88U,	// HEXAGON_M2_mpyu_nac_hl_s1
    36U,	// HEXAGON_M2_mpyu_nac_lh_s0
    84U,	// HEXAGON_M2_mpyu_nac_lh_s1
    40U,	// HEXAGON_M2_mpyu_nac_ll_s0
    88U,	// HEXAGON_M2_mpyu_nac_ll_s1
    28U,	// HEXAGON_M2_mpyu_up
    36U,	// HEXAGON_M2_mpyud_acc_hh_s0
    84U,	// HEXAGON_M2_mpyud_acc_hh_s1
    40U,	// HEXAGON_M2_mpyud_acc_hl_s0
    88U,	// HEXAGON_M2_mpyud_acc_hl_s1
    36U,	// HEXAGON_M2_mpyud_acc_lh_s0
    84U,	// HEXAGON_M2_mpyud_acc_lh_s1
    40U,	// HEXAGON_M2_mpyud_acc_ll_s0
    88U,	// HEXAGON_M2_mpyud_acc_ll_s1
    36U,	// HEXAGON_M2_mpyud_hh_s0
    84U,	// HEXAGON_M2_mpyud_hh_s1
    40U,	// HEXAGON_M2_mpyud_hl_s0
    88U,	// HEXAGON_M2_mpyud_hl_s1
    36U,	// HEXAGON_M2_mpyud_lh_s0
    84U,	// HEXAGON_M2_mpyud_lh_s1
    40U,	// HEXAGON_M2_mpyud_ll_s0
    88U,	// HEXAGON_M2_mpyud_ll_s1
    36U,	// HEXAGON_M2_mpyud_nac_hh_s0
    84U,	// HEXAGON_M2_mpyud_nac_hh_s1
    40U,	// HEXAGON_M2_mpyud_nac_hl_s0
    88U,	// HEXAGON_M2_mpyud_nac_hl_s1
    36U,	// HEXAGON_M2_mpyud_nac_lh_s0
    84U,	// HEXAGON_M2_mpyud_nac_lh_s1
    40U,	// HEXAGON_M2_mpyud_nac_ll_s0
    88U,	// HEXAGON_M2_mpyud_nac_ll_s1
    0U,	// HEXAGON_M2_mpyui
    28U,	// HEXAGON_M2_nacci
    28U,	// HEXAGON_M2_naccii
    0U,	// HEXAGON_M2_subacc
    0U,	// HEXAGON_M2_vabsdiffh
    0U,	// HEXAGON_M2_vabsdiffw
    0U,	// HEXAGON_M2_vcmac_s0_sat_i
    0U,	// HEXAGON_M2_vcmac_s0_sat_r
    0U,	// HEXAGON_M2_vcmpy_s0_sat_i
    0U,	// HEXAGON_M2_vcmpy_s0_sat_r
    0U,	// HEXAGON_M2_vcmpy_s1_sat_i
    0U,	// HEXAGON_M2_vcmpy_s1_sat_r
    0U,	// HEXAGON_M2_vdmacs_s0
    0U,	// HEXAGON_M2_vdmacs_s1
    0U,	// HEXAGON_M2_vdmpyrs_s0
    0U,	// HEXAGON_M2_vdmpyrs_s1
    0U,	// HEXAGON_M2_vdmpys_s0
    0U,	// HEXAGON_M2_vdmpys_s1
    0U,	// HEXAGON_M2_vmac2
    0U,	// HEXAGON_M2_vmac2es
    0U,	// HEXAGON_M2_vmac2es_s0
    0U,	// HEXAGON_M2_vmac2es_s1
    0U,	// HEXAGON_M2_vmac2s_s0
    0U,	// HEXAGON_M2_vmac2s_s1
    0U,	// HEXAGON_M2_vmpy2es_s0
    0U,	// HEXAGON_M2_vmpy2es_s1
    0U,	// HEXAGON_M2_vmpy2s_s0
    0U,	// HEXAGON_M2_vmpy2s_s0pack
    0U,	// HEXAGON_M2_vmpy2s_s1
    0U,	// HEXAGON_M2_vmpy2s_s1pack
    0U,	// HEXAGON_M2_vrcmaci_s0
    0U,	// HEXAGON_M2_vrcmaci_s0c
    0U,	// HEXAGON_M2_vrcmacr_s0
    0U,	// HEXAGON_M2_vrcmacr_s0c
    0U,	// HEXAGON_M2_vrcmpyi_s0
    0U,	// HEXAGON_M2_vrcmpyi_s0c
    0U,	// HEXAGON_M2_vrcmpyr_s0
    0U,	// HEXAGON_M2_vrcmpyr_s0c
    0U,	// HEXAGON_M2_vrmac_s0
    0U,	// HEXAGON_M2_vrmpy_s0
    0U,	// HEXAGON_M2_xor_xacc
    28U,	// HEXAGON_M4_and_and
    28U,	// HEXAGON_M4_and_andn
    0U,	// HEXAGON_M4_and_or
    0U,	// HEXAGON_M4_and_xor
    28U,	// HEXAGON_M4_or_and
    28U,	// HEXAGON_M4_or_andn
    28U,	// HEXAGON_M4_or_or
    0U,	// HEXAGON_M4_or_xor
    28U,	// HEXAGON_M4_xor_and
    28U,	// HEXAGON_M4_xor_andn
    0U,	// HEXAGON_M4_xor_or
    0U,	// HEXAGON_M5_vdmacbsu
    0U,	// HEXAGON_M5_vdmpybsu
    0U,	// HEXAGON_M5_vmacbsu
    0U,	// HEXAGON_M5_vmacbuu
    0U,	// HEXAGON_M5_vmpybsu
    0U,	// HEXAGON_M5_vmpybuu
    0U,	// HEXAGON_M5_vrmacbsu
    0U,	// HEXAGON_M5_vrmacbuu
    0U,	// HEXAGON_M5_vrmpybsu
    0U,	// HEXAGON_M5_vrmpybuu
    0U,	// HEXAGON_S2_addasl_rrri
    28U,	// HEXAGON_S2_asl_i_p
    28U,	// HEXAGON_S2_asl_i_p_acc
    28U,	// HEXAGON_S2_asl_i_p_and
    28U,	// HEXAGON_S2_asl_i_p_nac
    28U,	// HEXAGON_S2_asl_i_p_or
    28U,	// HEXAGON_S2_asl_i_p_xacc
    28U,	// HEXAGON_S2_asl_i_r
    28U,	// HEXAGON_S2_asl_i_r_acc
    28U,	// HEXAGON_S2_asl_i_r_and
    28U,	// HEXAGON_S2_asl_i_r_nac
    28U,	// HEXAGON_S2_asl_i_r_or
    68U,	// HEXAGON_S2_asl_i_r_sat
    28U,	// HEXAGON_S2_asl_i_r_xacc
    0U,	// HEXAGON_S2_asl_i_vh
    0U,	// HEXAGON_S2_asl_i_vw
    28U,	// HEXAGON_S2_asl_r_p
    28U,	// HEXAGON_S2_asl_r_p_acc
    28U,	// HEXAGON_S2_asl_r_p_and
    28U,	// HEXAGON_S2_asl_r_p_nac
    28U,	// HEXAGON_S2_asl_r_p_or
    28U,	// HEXAGON_S2_asl_r_r
    28U,	// HEXAGON_S2_asl_r_r_acc
    28U,	// HEXAGON_S2_asl_r_r_and
    28U,	// HEXAGON_S2_asl_r_r_nac
    28U,	// HEXAGON_S2_asl_r_r_or
    68U,	// HEXAGON_S2_asl_r_r_sat
    0U,	// HEXAGON_S2_asl_r_vh
    0U,	// HEXAGON_S2_asl_r_vw
    28U,	// HEXAGON_S2_asr_i_p
    28U,	// HEXAGON_S2_asr_i_p_acc
    28U,	// HEXAGON_S2_asr_i_p_and
    28U,	// HEXAGON_S2_asr_i_p_nac
    28U,	// HEXAGON_S2_asr_i_p_or
    28U,	// HEXAGON_S2_asr_i_p_rnd
    0U,	// HEXAGON_S2_asr_i_p_rnd_goodsyntax
    28U,	// HEXAGON_S2_asr_i_r
    28U,	// HEXAGON_S2_asr_i_r_acc
    28U,	// HEXAGON_S2_asr_i_r_and
    28U,	// HEXAGON_S2_asr_i_r_nac
    28U,	// HEXAGON_S2_asr_i_r_or
    72U,	// HEXAGON_S2_asr_i_r_rnd
    0U,	// HEXAGON_S2_asr_i_r_rnd_goodsyntax
    28U,	// HEXAGON_S2_asr_i_svw_trun
    28U,	// HEXAGON_S2_asr_i_vh
    28U,	// HEXAGON_S2_asr_i_vw
    28U,	// HEXAGON_S2_asr_r_p
    28U,	// HEXAGON_S2_asr_r_p_acc
    28U,	// HEXAGON_S2_asr_r_p_and
    28U,	// HEXAGON_S2_asr_r_p_nac
    28U,	// HEXAGON_S2_asr_r_p_or
    28U,	// HEXAGON_S2_asr_r_r
    28U,	// HEXAGON_S2_asr_r_r_acc
    28U,	// HEXAGON_S2_asr_r_r_and
    28U,	// HEXAGON_S2_asr_r_r_nac
    28U,	// HEXAGON_S2_asr_r_r_or
    68U,	// HEXAGON_S2_asr_r_r_sat
    28U,	// HEXAGON_S2_asr_r_svw_trun
    28U,	// HEXAGON_S2_asr_r_vh
    28U,	// HEXAGON_S2_asr_r_vw
    0U,	// HEXAGON_S2_cl0
    0U,	// HEXAGON_S2_cl0p
    0U,	// HEXAGON_S2_cl1
    0U,	// HEXAGON_S2_cl1p
    0U,	// HEXAGON_S2_clb
    0U,	// HEXAGON_S2_clbnorm
    0U,	// HEXAGON_S2_clbp
    28U,	// HEXAGON_S2_clrbit_i
    28U,	// HEXAGON_S2_clrbit_r
    0U,	// HEXAGON_S2_ct0
    0U,	// HEXAGON_S2_ct1
    1300U,	// HEXAGON_S2_extractu
    28U,	// HEXAGON_S2_extractu_rp
    1300U,	// HEXAGON_S2_extractup
    28U,	// HEXAGON_S2_extractup_rp
    0U,	// HEXAGON_S2_lsl_r_p
    0U,	// HEXAGON_S2_lsl_r_p_acc
    0U,	// HEXAGON_S2_lsl_r_p_and
    0U,	// HEXAGON_S2_lsl_r_p_nac
    0U,	// HEXAGON_S2_lsl_r_p_or
    0U,	// HEXAGON_S2_lsl_r_r
    0U,	// HEXAGON_S2_lsl_r_r_acc
    0U,	// HEXAGON_S2_lsl_r_r_and
    0U,	// HEXAGON_S2_lsl_r_r_nac
    0U,	// HEXAGON_S2_lsl_r_r_or
    0U,	// HEXAGON_S2_lsl_r_vh
    0U,	// HEXAGON_S2_lsl_r_vw
    28U,	// HEXAGON_S2_lsr_i_p
    28U,	// HEXAGON_S2_lsr_i_p_acc
    28U,	// HEXAGON_S2_lsr_i_p_and
    28U,	// HEXAGON_S2_lsr_i_p_nac
    28U,	// HEXAGON_S2_lsr_i_p_or
    28U,	// HEXAGON_S2_lsr_i_p_xacc
    28U,	// HEXAGON_S2_lsr_i_r
    28U,	// HEXAGON_S2_lsr_i_r_acc
    28U,	// HEXAGON_S2_lsr_i_r_and
    28U,	// HEXAGON_S2_lsr_i_r_nac
    28U,	// HEXAGON_S2_lsr_i_r_or
    28U,	// HEXAGON_S2_lsr_i_r_xacc
    0U,	// HEXAGON_S2_lsr_i_vh
    0U,	// HEXAGON_S2_lsr_i_vw
    28U,	// HEXAGON_S2_lsr_r_p
    28U,	// HEXAGON_S2_lsr_r_p_acc
    28U,	// HEXAGON_S2_lsr_r_p_and
    28U,	// HEXAGON_S2_lsr_r_p_nac
    28U,	// HEXAGON_S2_lsr_r_p_or
    28U,	// HEXAGON_S2_lsr_r_r
    28U,	// HEXAGON_S2_lsr_r_r_acc
    28U,	// HEXAGON_S2_lsr_r_r_and
    28U,	// HEXAGON_S2_lsr_r_r_nac
    28U,	// HEXAGON_S2_lsr_r_r_or
    0U,	// HEXAGON_S2_lsr_r_vh
    0U,	// HEXAGON_S2_lsr_r_vw
    0U,	// HEXAGON_S2_packhl
    0U,	// HEXAGON_S2_parityp
    28U,	// HEXAGON_S2_setbit_i
    28U,	// HEXAGON_S2_setbit_r
    0U,	// HEXAGON_S2_shuffeb
    0U,	// HEXAGON_S2_shuffeh
    0U,	// HEXAGON_S2_shuffob
    0U,	// HEXAGON_S2_shuffoh
    0U,	// HEXAGON_S2_svsathb
    0U,	// HEXAGON_S2_svsathub
    28U,	// HEXAGON_S2_togglebit_i
    28U,	// HEXAGON_S2_togglebit_r
    28U,	// HEXAGON_S2_tstbit_i
    28U,	// HEXAGON_S2_tstbit_r
    28U,	// HEXAGON_S2_valignib
    28U,	// HEXAGON_S2_valignrb
    0U,	// HEXAGON_S2_vcrotate
    0U,	// HEXAGON_S2_vrndpackwh
    0U,	// HEXAGON_S2_vrndpackwhs
    0U,	// HEXAGON_S2_vsathb
    0U,	// HEXAGON_S2_vsathb_nopack
    0U,	// HEXAGON_S2_vsathub
    0U,	// HEXAGON_S2_vsathub_nopack
    0U,	// HEXAGON_S2_vsatwh
    0U,	// HEXAGON_S2_vsatwh_nopack
    0U,	// HEXAGON_S2_vsatwuh
    0U,	// HEXAGON_S2_vsatwuh_nopack
    0U,	// HEXAGON_S2_vsplatrb
    0U,	// HEXAGON_S2_vsplatrh
    0U,	// HEXAGON_S2_vsxtbh
    0U,	// HEXAGON_S2_vsxthw
    0U,	// HEXAGON_S2_vtrunehb
    0U,	// HEXAGON_S2_vtrunewh
    0U,	// HEXAGON_S2_vtrunohb
    0U,	// HEXAGON_S2_vtrunowh
    0U,	// HEXAGON_S2_vzxtbh
    0U,	// HEXAGON_S2_vzxthw
    28U,	// HEXAGON_S4_or_andi
    272U,	// HEXAGON_S4_or_andix
    28U,	// HEXAGON_S4_or_ori
    0U,	// HEXAGON_S5_asrhub_rnd_sat_goodsyntax
    0U,	// HEXAGON_S5_asrhub_sat
    0U,	// HEXAGON_S5_popcountp
    72U,	// HEXAGON_S5_vasrhrnd_goodsyntax
    125U,	// HEXAGON_circ_ldd
    0U,	// HI
    0U,	// HI_jt
    0U,	// HI_label
    0U,	// HIi
    0U,	// Hexagon_A2_addpsat
    0U,	// Hexagon_A2_addsp
    0U,	// Hexagon_A2_maxp
    0U,	// Hexagon_A2_maxup
    28U,	// Hexagon_A4_andn
    0U,	// Hexagon_A4_combineir
    28U,	// Hexagon_A4_combineri
    28U,	// Hexagon_A4_orn
    28U,	// Hexagon_A4_rcmpeq
    28U,	// Hexagon_A4_rcmpeqi
    28U,	// Hexagon_A4_rcmpneq
    28U,	// Hexagon_A4_rcmpneqi
    28U,	// Hexagon_C2_bitsclr
    28U,	// Hexagon_C2_bitsclri
    0U,	// Hexagon_C2_bitsset
    12U,	// Hexagon_C4_and_and
    1U,	// Hexagon_C4_and_andn
    12U,	// Hexagon_C4_and_or
    1U,	// Hexagon_C4_and_orn
    28U,	// Hexagon_C4_cmplte
    28U,	// Hexagon_C4_cmpltei
    28U,	// Hexagon_C4_cmplteu
    28U,	// Hexagon_C4_cmplteui
    28U,	// Hexagon_C4_cmpneq
    28U,	// Hexagon_C4_cmpneqi
    0U,	// Hexagon_C4_fastcorner9
    0U,	// Hexagon_C4_fastcorner9_not
    12U,	// Hexagon_C4_or_and
    1U,	// Hexagon_C4_or_andn
    12U,	// Hexagon_C4_or_or
    1U,	// Hexagon_C4_or_orn
    28U,	// Hexagon_M2_mpysmi
    0U,	// Hexagon_M2_vradduh
    0U,	// Hexagon_M2_vrcmpys_acc_s1
    0U,	// Hexagon_M2_vrcmpys_s1
    0U,	// Hexagon_M2_vrcmpys_s1rp
    0U,	// Hexagon_M4_xor_xacc
    0U,	// Hexagon_S2_brev
    0U,	// Hexagon_S2_deinterleave
    1812U,	// Hexagon_S2_insert
    28U,	// Hexagon_S2_insert_rp
    1812U,	// Hexagon_S2_insertp
    28U,	// Hexagon_S2_insertp_rp
    0U,	// Hexagon_S2_interleave
    0U,	// Hexagon_S2_lfsp
    0U,	// Hexagon_S2_tableidxb_goodsyntax
    0U,	// Hexagon_S2_tableidxd_goodsyntax
    0U,	// Hexagon_S2_tableidxh_goodsyntax
    0U,	// Hexagon_S2_tableidxw_goodsyntax
    28U,	// Hexagon_S2_vspliceib
    28U,	// Hexagon_S2_vsplicerb
    16U,	// Hexagon_S4_addaddi
    28U,	// Hexagon_S4_andnp
    28U,	// Hexagon_S4_ornp
    70432U,	// Hexagon_S4_subaddi
    0U,	// IMMEXT_b
    0U,	// IMMEXT_c
    0U,	// IMMEXT_g
    0U,	// IMMEXT_i
    0U,	// JMP
    0U,	// JMPR
    0U,	// JMPR_cNotPt
    0U,	// JMPR_cPt
    0U,	// JMPR_cdnNotPnt
    0U,	// JMPR_cdnNotPt_V3
    0U,	// JMPR_cdnPnt
    0U,	// JMPR_cdnPt_V3
    1U,	// JMP_EQriNotPnt_ie_nv_V4
    1U,	// JMP_EQriNotPnt_nv_V4
    1U,	// JMP_EQriNotPntneg_ie_nv_V4
    1U,	// JMP_EQriNotPntneg_nv_V4
    1U,	// JMP_EQriNotPt_ie_nv_V4
    1U,	// JMP_EQriNotPt_nv_V4
    1U,	// JMP_EQriNotPtneg_ie_nv_V4
    1U,	// JMP_EQriNotPtneg_nv_V4
    1U,	// JMP_EQriPnt_ie_nv_V4
    1U,	// JMP_EQriPnt_nv_V4
    1U,	// JMP_EQriPntneg_ie_nv_V4
    1U,	// JMP_EQriPntneg_nv_V4
    1U,	// JMP_EQriPt_ie_nv_V4
    1U,	// JMP_EQriPt_nv_V4
    1U,	// JMP_EQriPtneg_ie_nv_V4
    1U,	// JMP_EQriPtneg_nv_V4
    0U,	// JMP_EQrrNotPnt_ie_nv_V4
    0U,	// JMP_EQrrNotPnt_nv_V4
    0U,	// JMP_EQrrNotPt_ie_nv_V4
    0U,	// JMP_EQrrNotPt_nv_V4
    0U,	// JMP_EQrrPnt_ie_nv_V4
    0U,	// JMP_EQrrPnt_nv_V4
    0U,	// JMP_EQrrPt_ie_nv_V4
    0U,	// JMP_EQrrPt_nv_V4
    1U,	// JMP_GTUriNotPnt_ie_nv_V4
    1U,	// JMP_GTUriNotPnt_nv_V4
    1U,	// JMP_GTUriNotPt_ie_nv_V4
    1U,	// JMP_GTUriNotPt_nv_V4
    1U,	// JMP_GTUriPnt_ie_nv_V4
    1U,	// JMP_GTUriPnt_nv_V4
    1U,	// JMP_GTUriPt_ie_nv_V4
    1U,	// JMP_GTUriPt_nv_V4
    0U,	// JMP_GTUrrNotPnt_ie_nv_V4
    0U,	// JMP_GTUrrNotPnt_nv_V4
    0U,	// JMP_GTUrrNotPt_ie_nv_V4
    0U,	// JMP_GTUrrNotPt_nv_V4
    0U,	// JMP_GTUrrPnt_ie_nv_V4
    0U,	// JMP_GTUrrPnt_nv_V4
    0U,	// JMP_GTUrrPt_ie_nv_V4
    0U,	// JMP_GTUrrPt_nv_V4
    0U,	// JMP_GTUrrdnNotPnt_ie_nv_V4
    0U,	// JMP_GTUrrdnNotPnt_nv_V4
    0U,	// JMP_GTUrrdnNotPt_ie_nv_V4
    0U,	// JMP_GTUrrdnNotPt_nv_V4
    0U,	// JMP_GTUrrdnPnt_ie_nv_V4
    0U,	// JMP_GTUrrdnPnt_nv_V4
    0U,	// JMP_GTUrrdnPt_ie_nv_V4
    0U,	// JMP_GTUrrdnPt_nv_V4
    1U,	// JMP_GTriNotPnt_ie_nv_V4
    1U,	// JMP_GTriNotPnt_nv_V4
    1U,	// JMP_GTriNotPntneg_ie_nv_V4
    1U,	// JMP_GTriNotPntneg_nv_V4
    1U,	// JMP_GTriNotPt_ie_nv_V4
    1U,	// JMP_GTriNotPt_nv_V4
    1U,	// JMP_GTriNotPtneg_ie_nv_V4
    1U,	// JMP_GTriNotPtneg_nv_V4
    1U,	// JMP_GTriPnt_ie_nv_V4
    1U,	// JMP_GTriPnt_nv_V4
    1U,	// JMP_GTriPntneg_ie_nv_V4
    1U,	// JMP_GTriPntneg_nv_V4
    1U,	// JMP_GTriPt_ie_nv_V4
    1U,	// JMP_GTriPt_nv_V4
    1U,	// JMP_GTriPtneg_ie_nv_V4
    1U,	// JMP_GTriPtneg_nv_V4
    0U,	// JMP_GTrrNotPnt_ie_nv_V4
    0U,	// JMP_GTrrNotPnt_nv_V4
    0U,	// JMP_GTrrNotPt_ie_nv_V4
    0U,	// JMP_GTrrNotPt_nv_V4
    0U,	// JMP_GTrrPnt_ie_nv_V4
    0U,	// JMP_GTrrPnt_nv_V4
    0U,	// JMP_GTrrPt_ie_nv_V4
    0U,	// JMP_GTrrPt_nv_V4
    0U,	// JMP_GTrrdnNotPnt_ie_nv_V4
    0U,	// JMP_GTrrdnNotPnt_nv_V4
    0U,	// JMP_GTrrdnNotPt_ie_nv_V4
    0U,	// JMP_GTrrdnNotPt_nv_V4
    0U,	// JMP_GTrrdnPnt_ie_nv_V4
    0U,	// JMP_GTrrdnPnt_nv_V4
    0U,	// JMP_GTrrdnPt_ie_nv_V4
    0U,	// JMP_GTrrdnPt_nv_V4
    1U,	// JMP_TSTBITr0NotPnt_ie_nv_V4
    1U,	// JMP_TSTBITr0NotPnt_nv_V4
    1U,	// JMP_TSTBITr0NotPt_ie_nv_V4
    1U,	// JMP_TSTBITr0NotPt_nv_V4
    1U,	// JMP_TSTBITr0Pnt_ie_nv_V4
    1U,	// JMP_TSTBITr0Pnt_nv_V4
    1U,	// JMP_TSTBITr0Pt_ie_nv_V4
    1U,	// JMP_TSTBITr0Pt_nv_V4
    0U,	// JMP_c
    0U,	// JMP_cNot
    0U,	// JMP_cdnNotPnt
    0U,	// JMP_cdnNotPt
    0U,	// JMP_cdnPnt
    0U,	// JMP_cdnPt
    0U,	// LDb_GP
    0U,	// LDb_GP_V4
    0U,	// LDb_GP_cNotPt_V4
    0U,	// LDb_GP_cPt_V4
    0U,	// LDb_GP_cdnNotPt_V4
    0U,	// LDb_GP_cdnPt_V4
    0U,	// LDd_GP
    0U,	// LDd_GP_V4
    0U,	// LDd_GP_cNotPt_V4
    0U,	// LDd_GP_cPt_V4
    0U,	// LDd_GP_cdnNotPt_V4
    0U,	// LDd_GP_cdnPt_V4
    0U,	// LDh_GP
    0U,	// LDh_GP_V4
    0U,	// LDh_GP_cNotPt_V4
    0U,	// LDh_GP_cPt_V4
    0U,	// LDh_GP_cdnNotPt_V4
    0U,	// LDh_GP_cdnPt_V4
    0U,	// LDrib
    0U,	// LDrib_GP
    0U,	// LDrib_GP_V4
    17U,	// LDrib_GP_cNotPt_V4
    17U,	// LDrib_GP_cPt_V4
    17U,	// LDrib_GP_cdnNotPt_V4
    17U,	// LDrib_GP_cdnPt_V4
    0U,	// LDrib_abs_V4
    29U,	// LDrib_abs_cNotPt_V4
    29U,	// LDrib_abs_cPt_V4
    29U,	// LDrib_abs_cdnNotPt_V4
    29U,	// LDrib_abs_cdnPt_V4
    129U,	// LDrib_abs_set_V4
    33U,	// LDrib_abs_setimm_V4
    1U,	// LDrib_cNotPt
    1U,	// LDrib_cPt
    1U,	// LDrib_cdnNotPt
    1U,	// LDrib_cdnPt
    0U,	// LDrib_imm_abs_V4
    28U,	// LDrib_imm_abs_cNotPt_V4
    28U,	// LDrib_imm_abs_cPt_V4
    28U,	// LDrib_imm_abs_cdnNotPt_V4
    28U,	// LDrib_imm_abs_cdnPt_V4
    133U,	// LDrib_ind_lo_V4
    5U,	// LDrib_indexed
    136U,	// LDrib_indexed_cNotPt
    136U,	// LDrib_indexed_cPt
    136U,	// LDrib_indexed_cdnNotPt
    136U,	// LDrib_indexed_cdnPt
    14337U,	// LDrib_indexed_shl_V4
    140U,	// LDrib_indexed_shl_cNotPt_V4
    140U,	// LDrib_indexed_shl_cPt_V4
    140U,	// LDrib_indexed_shl_cdnNotPt_V4
    140U,	// LDrib_indexed_shl_cdnPt_V4
    0U,	// LDrid
    0U,	// LDrid_GP
    0U,	// LDrid_GP_V4
    17U,	// LDrid_GP_cNotPt_V4
    17U,	// LDrid_GP_cPt_V4
    17U,	// LDrid_GP_cdnNotPt_V4
    17U,	// LDrid_GP_cdnPt_V4
    0U,	// LDrid_abs_V4
    0U,	// LDrid_abs_cNotPt_V4
    0U,	// LDrid_abs_cPt_V4
    0U,	// LDrid_abs_cdnNotPt_V4
    0U,	// LDrid_abs_cdnPt_V4
    129U,	// LDrid_abs_set_V4
    33U,	// LDrid_abs_setimm_V4
    1U,	// LDrid_cNotPt
    1U,	// LDrid_cPt
    1U,	// LDrid_cdnNotPt
    1U,	// LDrid_cdnPt
    0U,	// LDrid_f
    0U,	// LDrid_ind_lo_V4
    5U,	// LDrid_indexed
    136U,	// LDrid_indexed_cNotPt
    136U,	// LDrid_indexed_cPt
    136U,	// LDrid_indexed_cdnNotPt
    136U,	// LDrid_indexed_cdnPt
    33U,	// LDrid_indexed_f
    14337U,	// LDrid_indexed_shl_V4
    140U,	// LDrid_indexed_shl_cNotPt_V4
    140U,	// LDrid_indexed_shl_cPt_V4
    140U,	// LDrid_indexed_shl_cdnNotPt_V4
    140U,	// LDrid_indexed_shl_cdnPt_V4
    0U,	// LDrih
    0U,	// LDrih_GP
    0U,	// LDrih_GP_V4
    17U,	// LDrih_GP_cNotPt_V4
    17U,	// LDrih_GP_cPt_V4
    17U,	// LDrih_GP_cdnNotPt_V4
    17U,	// LDrih_GP_cdnPt_V4
    0U,	// LDrih_abs_V4
    29U,	// LDrih_abs_cNotPt_V4
    29U,	// LDrih_abs_cPt_V4
    29U,	// LDrih_abs_cdnNotPt_V4
    29U,	// LDrih_abs_cdnPt_V4
    129U,	// LDrih_abs_set_V4
    33U,	// LDrih_abs_setimm_V4
    1U,	// LDrih_cNotPt
    1U,	// LDrih_cPt
    1U,	// LDrih_cdnNotPt
    1U,	// LDrih_cdnPt
    0U,	// LDrih_imm_abs_V4
    28U,	// LDrih_imm_abs_cNotPt_V4
    28U,	// LDrih_imm_abs_cPt_V4
    28U,	// LDrih_imm_abs_cdnNotPt_V4
    28U,	// LDrih_imm_abs_cdnPt_V4
    133U,	// LDrih_ind_lo_V4
    5U,	// LDrih_indexed
    136U,	// LDrih_indexed_cNotPt
    136U,	// LDrih_indexed_cPt
    136U,	// LDrih_indexed_cdnNotPt
    136U,	// LDrih_indexed_cdnPt
    14337U,	// LDrih_indexed_shl_V4
    140U,	// LDrih_indexed_shl_cNotPt_V4
    140U,	// LDrih_indexed_shl_cPt_V4
    140U,	// LDrih_indexed_shl_cdnNotPt_V4
    140U,	// LDrih_indexed_shl_cdnPt_V4
    0U,	// LDriub
    0U,	// LDriub_GP
    0U,	// LDriub_GP_V4
    17U,	// LDriub_GP_cNotPt_V4
    17U,	// LDriub_GP_cPt_V4
    17U,	// LDriub_GP_cdnNotPt_V4
    17U,	// LDriub_GP_cdnPt_V4
    0U,	// LDriub_abs_V4
    29U,	// LDriub_abs_cNotPt_V4
    29U,	// LDriub_abs_cPt_V4
    29U,	// LDriub_abs_cdnNotPt_V4
    29U,	// LDriub_abs_cdnPt_V4
    129U,	// LDriub_abs_set_V4
    33U,	// LDriub_abs_setimm_V4
    1U,	// LDriub_cNotPt
    1U,	// LDriub_cPt
    1U,	// LDriub_cdnNotPt
    1U,	// LDriub_cdnPt
    0U,	// LDriub_imm_abs_V4
    28U,	// LDriub_imm_abs_cNotPt_V4
    28U,	// LDriub_imm_abs_cPt_V4
    28U,	// LDriub_imm_abs_cdnNotPt_V4
    28U,	// LDriub_imm_abs_cdnPt_V4
    133U,	// LDriub_ind_lo_V4
    5U,	// LDriub_indexed
    136U,	// LDriub_indexed_cNotPt
    136U,	// LDriub_indexed_cPt
    136U,	// LDriub_indexed_cdnNotPt
    136U,	// LDriub_indexed_cdnPt
    14337U,	// LDriub_indexed_shl_V4
    140U,	// LDriub_indexed_shl_cNotPt_V4
    140U,	// LDriub_indexed_shl_cPt_V4
    140U,	// LDriub_indexed_shl_cdnNotPt_V4
    140U,	// LDriub_indexed_shl_cdnPt_V4
    0U,	// LDriuh
    0U,	// LDriuh_GP
    0U,	// LDriuh_GP_V4
    17U,	// LDriuh_GP_cNotPt_V4
    17U,	// LDriuh_GP_cPt_V4
    17U,	// LDriuh_GP_cdnNotPt_V4
    17U,	// LDriuh_GP_cdnPt_V4
    0U,	// LDriuh_abs_V4
    29U,	// LDriuh_abs_cNotPt_V4
    29U,	// LDriuh_abs_cPt_V4
    29U,	// LDriuh_abs_cdnNotPt_V4
    29U,	// LDriuh_abs_cdnPt_V4
    129U,	// LDriuh_abs_set_V4
    33U,	// LDriuh_abs_setimm_V4
    1U,	// LDriuh_cNotPt
    1U,	// LDriuh_cPt
    1U,	// LDriuh_cdnNotPt
    1U,	// LDriuh_cdnPt
    0U,	// LDriuh_imm_abs_V4
    28U,	// LDriuh_imm_abs_cNotPt_V4
    28U,	// LDriuh_imm_abs_cPt_V4
    28U,	// LDriuh_imm_abs_cdnNotPt_V4
    28U,	// LDriuh_imm_abs_cdnPt_V4
    133U,	// LDriuh_ind_lo_V4
    5U,	// LDriuh_indexed
    136U,	// LDriuh_indexed_cNotPt
    136U,	// LDriuh_indexed_cPt
    136U,	// LDriuh_indexed_cdnNotPt
    136U,	// LDriuh_indexed_cdnPt
    14337U,	// LDriuh_indexed_shl_V4
    140U,	// LDriuh_indexed_shl_cNotPt_V4
    140U,	// LDriuh_indexed_shl_cPt_V4
    140U,	// LDriuh_indexed_shl_cdnNotPt_V4
    140U,	// LDriuh_indexed_shl_cdnPt_V4
    0U,	// LDriw
    0U,	// LDriw_GP
    0U,	// LDriw_GP_V4
    17U,	// LDriw_GP_cNotPt_V4
    17U,	// LDriw_GP_cPt_V4
    17U,	// LDriw_GP_cdnNotPt_V4
    17U,	// LDriw_GP_cdnPt_V4
    0U,	// LDriw_abs_V4
    29U,	// LDriw_abs_cNotPt_V4
    29U,	// LDriw_abs_cPt_V4
    29U,	// LDriw_abs_cdnNotPt_V4
    29U,	// LDriw_abs_cdnPt_V4
    129U,	// LDriw_abs_set_V4
    33U,	// LDriw_abs_setimm_V4
    1U,	// LDriw_cNotPt
    1U,	// LDriw_cPt
    1U,	// LDriw_cdnNotPt
    1U,	// LDriw_cdnPt
    0U,	// LDriw_f
    0U,	// LDriw_imm_abs_V4
    28U,	// LDriw_imm_abs_cNotPt_V4
    28U,	// LDriw_imm_abs_cPt_V4
    28U,	// LDriw_imm_abs_cdnNotPt_V4
    28U,	// LDriw_imm_abs_cdnPt_V4
    133U,	// LDriw_ind_lo_V4
    5U,	// LDriw_indexed
    136U,	// LDriw_indexed_cNotPt
    136U,	// LDriw_indexed_cPt
    136U,	// LDriw_indexed_cdnNotPt
    136U,	// LDriw_indexed_cdnPt
    33U,	// LDriw_indexed_f
    14337U,	// LDriw_indexed_shl_V4
    140U,	// LDriw_indexed_shl_cNotPt_V4
    140U,	// LDriw_indexed_shl_cPt_V4
    140U,	// LDriw_indexed_shl_cdnNotPt_V4
    140U,	// LDriw_indexed_shl_cdnPt_V4
    0U,	// LDriw_pred
    0U,	// LDub_GP
    0U,	// LDub_GP_V4
    0U,	// LDub_GP_cNotPt_V4
    0U,	// LDub_GP_cPt_V4
    0U,	// LDub_GP_cdnNotPt_V4
    0U,	// LDub_GP_cdnPt_V4
    0U,	// LDuh_GP
    0U,	// LDuh_GP_V4
    0U,	// LDuh_GP_cNotPt_V4
    0U,	// LDuh_GP_cPt_V4
    0U,	// LDuh_GP_cdnNotPt_V4
    0U,	// LDuh_GP_cdnPt_V4
    0U,	// LDw_GP
    0U,	// LDw_GP_V4
    0U,	// LDw_GP_cNotPt_V4
    0U,	// LDw_GP_cPt_V4
    0U,	// LDw_GP_cdnNotPt_V4
    0U,	// LDw_GP_cdnPt_V4
    0U,	// LO
    0U,	// LOOP0_i
    0U,	// LOOP0_r
    0U,	// LO_jt
    0U,	// LO_label
    0U,	// LOi
    0U,	// LSL_ADD_rr
    0U,	// LSL_ADDd_rr
    0U,	// LSL_AND_rr
    0U,	// LSL_ANDd_rr
    0U,	// LSL_OR_rr
    0U,	// LSL_ORd_rr
    0U,	// LSL_SUB_rr
    0U,	// LSL_SUBd_rr
    0U,	// LSL_rr
    0U,	// LSLd
    0U,	// LSLd_rr_xor_V4
    0U,	// LSLi_V4
    28U,	// LSR_ADD_ri
    28U,	// LSR_ADD_rr
    28U,	// LSR_ADDd_ri
    28U,	// LSR_ADDd_rr
    28U,	// LSR_AND_ri
    28U,	// LSR_AND_rr
    28U,	// LSR_ANDd_ri
    28U,	// LSR_ANDd_rr
    28U,	// LSR_OR_ri
    28U,	// LSR_OR_rr
    28U,	// LSR_ORd_ri
    28U,	// LSR_ORd_rr
    28U,	// LSR_SUB_ri
    28U,	// LSR_SUB_rr
    28U,	// LSR_SUBd_ri
    28U,	// LSR_SUBd_rr
    28U,	// LSR_XOR_ri
    28U,	// LSR_XORd_ri
    28U,	// LSR_ri
    28U,	// LSR_rr
    28U,	// LSRd_ri
    28U,	// LSRd_rr
    28U,	// LSRd_rr_xor_V4
    0U,	// MASK_p
    144U,	// MAXUd_rr
    144U,	// MAXUw_rr
    144U,	// MAXd_rr
    144U,	// MAXw_dd
    144U,	// MAXw_rr
    0U,	// MEMb_ADDi_MEM_V4
    2337U,	// MEMb_ADDi_indexed_MEM_V4
    0U,	// MEMb_ADDr_MEM_V4
    2305U,	// MEMb_ADDr_indexed_MEM_V4
    0U,	// MEMb_ANDr_MEM_V4
    2305U,	// MEMb_ANDr_indexed_MEM_V4
    0U,	// MEMb_ORr_MEM_V4
    1U,	// MEMb_ORr_indexed_MEM_V4
    0U,	// MEMb_SUBi_MEM_V4
    2337U,	// MEMb_SUBi_indexed_MEM_V4
    0U,	// MEMb_SUBr_MEM_V4
    2305U,	// MEMb_SUBr_indexed_MEM_V4
    0U,	// MEMh_ADDi_MEM_V4
    2337U,	// MEMh_ADDi_indexed_MEM_V4
    0U,	// MEMh_ADDr_MEM_V4
    2305U,	// MEMh_ADDr_indexed_MEM_V4
    0U,	// MEMh_ANDr_MEM_V4
    2305U,	// MEMh_ANDr_indexed_MEM_V4
    0U,	// MEMh_ORr_MEM_V4
    1U,	// MEMh_ORr_indexed_MEM_V4
    0U,	// MEMh_SUBi_MEM_V4
    2337U,	// MEMh_SUBi_indexed_MEM_V4
    0U,	// MEMh_SUBr_MEM_V4
    2305U,	// MEMh_SUBr_indexed_MEM_V4
    0U,	// MEMw_ADDi_MEM_V4
    1U,	// MEMw_ADDi_indexed_MEM_V4
    0U,	// MEMw_ADDr_MEM_V4
    2305U,	// MEMw_ADDr_indexed_MEM_V4
    0U,	// MEMw_ANDr_MEM_V4
    1U,	// MEMw_ANDr_indexed_MEM_V4
    0U,	// MEMw_ORr_MEM_V4
    1U,	// MEMw_ORr_indexed_MEM_V4
    0U,	// MEMw_SUBi_MEM_V4
    1U,	// MEMw_SUBi_indexed_MEM_V4
    0U,	// MEMw_SUBr_MEM_V4
    2305U,	// MEMw_SUBr_indexed_MEM_V4
    144U,	// MINUd_rr
    144U,	// MINUw_rr
    144U,	// MINd_rr
    144U,	// MINw_dd
    144U,	// MINw_rr
    28U,	// MPY
    28U,	// MPY64
    28U,	// MPY64_acc
    28U,	// MPY64_sub
    28U,	// MPYI
    0U,	// MPYI_acc_ri
    28U,	// MPYI_acc_rr
    28U,	// MPYI_ri
    0U,	// MPYI_rin
    0U,	// MPYI_riu
    0U,	// MPYI_sub_ri
    28U,	// MPYU
    28U,	// MPYU64
    28U,	// MPYU64_acc
    28U,	// MPYU64_sub
    28U,	// MPY_trsext
    1300U,	// MUX_ii
    24U,	// MUX_ir
    12820U,	// MUX_ri
    24U,	// MUX_rr
    0U,	// NEG
    0U,	// NOP
    0U,	// NOT_p
    0U,	// NOT_rr
    0U,	// NOT_rr64
    0U,	// NTSTBIT_ri
    0U,	// NTSTBIT_rr
    28U,	// OR_pp
    28U,	// OR_ri
    28U,	// OR_rr
    28U,	// OR_rr64
    0U,	// OR_rr_cNotPt
    0U,	// OR_rr_cPt
    0U,	// OR_rr_cdnNotPt
    0U,	// OR_rr_cdnPt
    28U,	// ORd_NOTd_V4
    0U,	// ORi_ASLri_V4
    0U,	// ORi_LSRri_V4
    28U,	// ORr_ANDr_NOTr_V4
    0U,	// ORr_ANDri2_V4
    264U,	// ORr_ANDri_V4
    28U,	// ORr_ANDrr_V4
    0U,	// ORr_ORri_V4
    28U,	// ORr_ORrr_V4
    0U,	// ORr_XORrr_V4
    17U,	// POST_LDrib
    148U,	// POST_LDrib_cNotPt
    148U,	// POST_LDrib_cPt
    148U,	// POST_LDrib_cdnNotPt_V4
    148U,	// POST_LDrib_cdnPt_V4
    17U,	// POST_LDrid
    148U,	// POST_LDrid_cNotPt
    148U,	// POST_LDrid_cPt
    148U,	// POST_LDrid_cdnNotPt_V4
    148U,	// POST_LDrid_cdnPt_V4
    17U,	// POST_LDrih
    148U,	// POST_LDrih_cNotPt
    148U,	// POST_LDrih_cPt
    148U,	// POST_LDrih_cdnNotPt_V4
    148U,	// POST_LDrih_cdnPt_V4
    17U,	// POST_LDriub
    148U,	// POST_LDriub_cNotPt
    148U,	// POST_LDriub_cPt
    148U,	// POST_LDriub_cdnNotPt_V4
    148U,	// POST_LDriub_cdnPt_V4
    17U,	// POST_LDriuh
    148U,	// POST_LDriuh_cNotPt
    148U,	// POST_LDriuh_cPt
    148U,	// POST_LDriuh_cdnNotPt_V4
    148U,	// POST_LDriuh_cdnPt_V4
    17U,	// POST_LDriw
    148U,	// POST_LDriw_cNotPt
    148U,	// POST_LDriw_cPt
    148U,	// POST_LDriw_cdnNotPt_V4
    148U,	// POST_LDriw_cdnPt_V4
    0U,	// POST_STbri
    109073U,	// POST_STbri_cNotPt
    141841U,	// POST_STbri_cNotPt_nv_V4
    109073U,	// POST_STbri_cPt
    141841U,	// POST_STbri_cPt_nv_V4
    109073U,	// POST_STbri_cdnNotPt_V4
    141841U,	// POST_STbri_cdnNotPt_nv_V4
    109073U,	// POST_STbri_cdnPt_V4
    141841U,	// POST_STbri_cdnPt_nv_V4
    0U,	// POST_STbri_nv_V4
    0U,	// POST_STdri
    109073U,	// POST_STdri_cNotPt
    109073U,	// POST_STdri_cPt
    109073U,	// POST_STdri_cdnNotPt_V4
    109073U,	// POST_STdri_cdnPt_V4
    0U,	// POST_SThri
    109073U,	// POST_SThri_cNotPt
    141841U,	// POST_SThri_cNotPt_nv_V4
    109073U,	// POST_SThri_cPt
    141841U,	// POST_SThri_cPt_nv_V4
    109073U,	// POST_SThri_cdnNotPt_V4
    141841U,	// POST_SThri_cdnNotPt_nv_V4
    109073U,	// POST_SThri_cdnPt_V4
    141841U,	// POST_SThri_cdnPt_nv_V4
    0U,	// POST_SThri_nv_V4
    0U,	// POST_STwri
    109073U,	// POST_STwri_cNotPt
    141841U,	// POST_STwri_cNotPt_nv_V4
    109073U,	// POST_STwri_cPt
    141841U,	// POST_STwri_cPt_nv_V4
    109073U,	// POST_STwri_cdnNotPt_V4
    141841U,	// POST_STwri_cdnNotPt_nv_V4
    109073U,	// POST_STwri_cdnPt_V4
    141841U,	// POST_STwri_cdnPt_nv_V4
    0U,	// POST_STwri_nv_V4
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    0U,	// RESTORE_DEALLOC_RET_JMP_V4
    0U,	// SAVE_REGISTERS_CALL_V4
    28U,	// SETBIT
    28U,	// SETBIT_31
    0U,	// SI_to_SXTHI_asrh
    0U,	// STb_GP
    0U,	// STb_GP_V4
    0U,	// STb_GP_cNotPt_V4
    2U,	// STb_GP_cNotPt_nv_V4
    0U,	// STb_GP_cPt_V4
    2U,	// STb_GP_cPt_nv_V4
    0U,	// STb_GP_cdnNotPt_V4
    2U,	// STb_GP_cdnNotPt_nv_V4
    0U,	// STb_GP_cdnPt_V4
    2U,	// STb_GP_cdnPt_nv_V4
    2U,	// STb_GP_nv_V4
    0U,	// STd_GP
    0U,	// STd_GP_V4
    0U,	// STd_GP_cNotPt_V4
    0U,	// STd_GP_cPt_V4
    0U,	// STd_GP_cdnNotPt_V4
    0U,	// STd_GP_cdnPt_V4
    0U,	// STh_GP
    0U,	// STh_GP_V4
    0U,	// STh_GP_cNotPt_V4
    2U,	// STh_GP_cNotPt_nv_V4
    0U,	// STh_GP_cPt_V4
    2U,	// STh_GP_cPt_nv_V4
    0U,	// STh_GP_cdnNotPt_V4
    2U,	// STh_GP_cdnNotPt_nv_V4
    0U,	// STh_GP_cdnPt_V4
    2U,	// STh_GP_cdnPt_nv_V4
    2U,	// STh_GP_nv_V4
    0U,	// STrib
    2306U,	// STrib_GP
    2306U,	// STrib_GP_V4
    2318U,	// STrib_GP_cNotPt_V4
    2830U,	// STrib_GP_cNotPt_nv_V4
    2318U,	// STrib_GP_cPt_V4
    2830U,	// STrib_GP_cPt_nv_V4
    2318U,	// STrib_GP_cdnNotPt_V4
    2830U,	// STrib_GP_cdnNotPt_nv_V4
    2318U,	// STrib_GP_cdnPt_V4
    2830U,	// STrib_GP_cdnPt_nv_V4
    2818U,	// STrib_GP_nv_V4
    0U,	// STrib_abs_V4
    0U,	// STrib_abs_cNotPt_V4
    2U,	// STrib_abs_cNotPt_nv_V4
    0U,	// STrib_abs_cPt_V4
    2U,	// STrib_abs_cPt_nv_V4
    0U,	// STrib_abs_cdnNotPt_V4
    2U,	// STrib_abs_cdnNotPt_nv_V4
    0U,	// STrib_abs_cdnPt_V4
    2U,	// STrib_abs_cdnPt_nv_V4
    2U,	// STrib_abs_nv_V4
    0U,	// STrib_abs_set_V4
    2450U,	// STrib_abs_setimm_V4
    2318U,	// STrib_cNotPt
    2830U,	// STrib_cNotPt_nv_V4
    2318U,	// STrib_cPt
    2830U,	// STrib_cPt_nv_V4
    2318U,	// STrib_cdnNotPt_V4
    2830U,	// STrib_cdnNotPt_nv_V4
    2318U,	// STrib_cdnPt_V4
    2830U,	// STrib_cdnPt_nv_V4
    2U,	// STrib_imm_V4
    0U,	// STrib_imm_abs_V4
    0U,	// STrib_imm_abs_cNotPt_V4
    0U,	// STrib_imm_abs_cNotPt_nv_V4
    0U,	// STrib_imm_abs_cPt_V4
    0U,	// STrib_imm_abs_cPt_nv_V4
    0U,	// STrib_imm_abs_cdnNotPt_V4
    0U,	// STrib_imm_abs_cdnNotPt_nv_V4
    0U,	// STrib_imm_abs_cdnPt_V4
    0U,	// STrib_imm_abs_cdnPt_nv_V4
    2U,	// STrib_imm_abs_nv_V4
    3105U,	// STrib_imm_cNotPt_V4
    3105U,	// STrib_imm_cPt_V4
    3105U,	// STrib_imm_cdnNotPt_V4
    3105U,	// STrib_imm_cdnPt_V4
    0U,	// STrib_ind_lo_V4
    2306U,	// STrib_indexed
    104965U,	// STrib_indexed_cNotPt
    137733U,	// STrib_indexed_cNotPt_nv_V4
    104965U,	// STrib_indexed_cPt
    137733U,	// STrib_indexed_cPt_nv_V4
    104965U,	// STrib_indexed_cdnNotPt_V4
    137733U,	// STrib_indexed_cdnNotPt_nv_V4
    104965U,	// STrib_indexed_cdnPt_V4
    137733U,	// STrib_indexed_cdnPt_nv_V4
    2818U,	// STrib_indexed_nv_V4
    2457U,	// STrib_indexed_shl_V4
    116737U,	// STrib_indexed_shl_cNotPt_V4
    149505U,	// STrib_indexed_shl_cNotPt_nv_V4
    116737U,	// STrib_indexed_shl_cPt_V4
    149505U,	// STrib_indexed_shl_cPt_nv_V4
    116737U,	// STrib_indexed_shl_cdnNotPt_V4
    149505U,	// STrib_indexed_shl_cdnNotPt_nv_V4
    116737U,	// STrib_indexed_shl_cdnPt_V4
    149505U,	// STrib_indexed_shl_cdnPt_nv_V4
    2969U,	// STrib_indexed_shl_nv_V4
    2U,	// STrib_nv_V4
    2456U,	// STrib_shl_V4
    2968U,	// STrib_shl_nv_V4
    0U,	// STrid
    2306U,	// STrid_GP
    2306U,	// STrid_GP_V4
    2318U,	// STrid_GP_cNotPt_V4
    2318U,	// STrid_GP_cPt_V4
    2318U,	// STrid_GP_cdnNotPt_V4
    2318U,	// STrid_GP_cdnPt_V4
    0U,	// STrid_abs_V4
    0U,	// STrid_abs_cNotPt_V4
    0U,	// STrid_abs_cPt_V4
    0U,	// STrid_abs_cdnNotPt_V4
    0U,	// STrid_abs_cdnPt_V4
    0U,	// STrid_abs_set_V4
    2450U,	// STrid_abs_setimm_V4
    2318U,	// STrid_cNotPt
    2318U,	// STrid_cPt
    2318U,	// STrid_cdnNotPt_V4
    2318U,	// STrid_cdnPt_V4
    0U,	// STrid_f
    2457U,	// STrid_ind_lo_V4
    2306U,	// STrid_indexed
    104965U,	// STrid_indexed_cNotPt
    104965U,	// STrid_indexed_cPt
    104965U,	// STrid_indexed_cdnNotPt_V4
    104965U,	// STrid_indexed_cdnPt_V4
    2306U,	// STrid_indexed_f
    2457U,	// STrid_indexed_shl_V4
    116737U,	// STrid_indexed_shl_cNotPt_V4
    116737U,	// STrid_indexed_shl_cPt_V4
    116737U,	// STrid_indexed_shl_cdnNotPt_V4
    116737U,	// STrid_indexed_shl_cdnPt_V4
    2456U,	// STrid_shl_V4
    0U,	// STrih
    2306U,	// STrih_GP
    2306U,	// STrih_GP_V4
    2318U,	// STrih_GP_cNotPt_V4
    2830U,	// STrih_GP_cNotPt_nv_V4
    2318U,	// STrih_GP_cPt_V4
    2830U,	// STrih_GP_cPt_nv_V4
    2318U,	// STrih_GP_cdnNotPt_V4
    2830U,	// STrih_GP_cdnNotPt_nv_V4
    2318U,	// STrih_GP_cdnPt_V4
    2830U,	// STrih_GP_cdnPt_nv_V4
    2818U,	// STrih_GP_nv_V4
    0U,	// STrih_abs_V4
    0U,	// STrih_abs_cNotPt_V4
    2U,	// STrih_abs_cNotPt_nv_V4
    0U,	// STrih_abs_cPt_V4
    2U,	// STrih_abs_cPt_nv_V4
    0U,	// STrih_abs_cdnNotPt_V4
    2U,	// STrih_abs_cdnNotPt_nv_V4
    0U,	// STrih_abs_cdnPt_V4
    2U,	// STrih_abs_cdnPt_nv_V4
    2U,	// STrih_abs_nv_V4
    0U,	// STrih_abs_set_V4
    2450U,	// STrih_abs_setimm_V4
    2318U,	// STrih_cNotPt
    2830U,	// STrih_cNotPt_nv_V4
    2318U,	// STrih_cPt
    2830U,	// STrih_cPt_nv_V4
    2318U,	// STrih_cdnNotPt_V4
    2830U,	// STrih_cdnNotPt_nv_V4
    2318U,	// STrih_cdnPt_V4
    2830U,	// STrih_cdnPt_nv_V4
    2U,	// STrih_imm_V4
    0U,	// STrih_imm_abs_V4
    0U,	// STrih_imm_abs_cNotPt_V4
    0U,	// STrih_imm_abs_cNotPt_nv_V4
    0U,	// STrih_imm_abs_cPt_V4
    0U,	// STrih_imm_abs_cPt_nv_V4
    0U,	// STrih_imm_abs_cdnNotPt_V4
    0U,	// STrih_imm_abs_cdnNotPt_nv_V4
    0U,	// STrih_imm_abs_cdnPt_V4
    0U,	// STrih_imm_abs_cdnPt_nv_V4
    2U,	// STrih_imm_abs_nv_V4
    3105U,	// STrih_imm_cNotPt_V4
    3105U,	// STrih_imm_cPt_V4
    3105U,	// STrih_imm_cdnNotPt_V4
    3105U,	// STrih_imm_cdnPt_V4
    0U,	// STrih_ind_lo_V4
    2306U,	// STrih_indexed
    104965U,	// STrih_indexed_cNotPt
    137733U,	// STrih_indexed_cNotPt_nv_V4
    104965U,	// STrih_indexed_cPt
    137733U,	// STrih_indexed_cPt_nv_V4
    104965U,	// STrih_indexed_cdnNotPt_V4
    137733U,	// STrih_indexed_cdnNotPt_nv_V4
    104965U,	// STrih_indexed_cdnPt_V4
    137733U,	// STrih_indexed_cdnPt_nv_V4
    2818U,	// STrih_indexed_nv_V4
    2457U,	// STrih_indexed_shl_V4
    116737U,	// STrih_indexed_shl_cNotPt_V4
    149505U,	// STrih_indexed_shl_cNotPt_nv_V4
    116737U,	// STrih_indexed_shl_cPt_V4
    149505U,	// STrih_indexed_shl_cPt_nv_V4
    116737U,	// STrih_indexed_shl_cdnNotPt_V4
    149505U,	// STrih_indexed_shl_cdnNotPt_nv_V4
    116737U,	// STrih_indexed_shl_cdnPt_V4
    149505U,	// STrih_indexed_shl_cdnPt_nv_V4
    2969U,	// STrih_indexed_shl_nv_V4
    2U,	// STrih_nv_V4
    2U,	// STrih_offset_ext_V4
    2456U,	// STrih_shl_V4
    2968U,	// STrih_shl_nv_V4
    0U,	// STriw
    2306U,	// STriw_GP
    2306U,	// STriw_GP_V4
    2318U,	// STriw_GP_cNotPt_V4
    2830U,	// STriw_GP_cNotPt_nv_V4
    2318U,	// STriw_GP_cPt_V4
    2830U,	// STriw_GP_cPt_nv_V4
    2318U,	// STriw_GP_cdnNotPt_V4
    2830U,	// STriw_GP_cdnNotPt_nv_V4
    2318U,	// STriw_GP_cdnPt_V4
    2830U,	// STriw_GP_cdnPt_nv_V4
    2818U,	// STriw_GP_nv_V4
    0U,	// STriw_abs_V4
    0U,	// STriw_abs_cNotPt_V4
    2U,	// STriw_abs_cNotPt_nv_V4
    0U,	// STriw_abs_cPt_V4
    2U,	// STriw_abs_cPt_nv_V4
    0U,	// STriw_abs_cdnNotPt_V4
    2U,	// STriw_abs_cdnNotPt_nv_V4
    0U,	// STriw_abs_cdnPt_V4
    2U,	// STriw_abs_cdnPt_nv_V4
    2U,	// STriw_abs_nv_V4
    0U,	// STriw_abs_set_V4
    2450U,	// STriw_abs_setimm_V4
    2318U,	// STriw_cNotPt
    2830U,	// STriw_cNotPt_nv_V4
    2318U,	// STriw_cPt
    2830U,	// STriw_cPt_nv_V4
    2318U,	// STriw_cdnNotPt_V4
    2830U,	// STriw_cdnNotPt_nv_V4
    2318U,	// STriw_cdnPt_V4
    2830U,	// STriw_cdnPt_nv_V4
    0U,	// STriw_f
    2U,	// STriw_imm_V4
    0U,	// STriw_imm_abs_V4
    0U,	// STriw_imm_abs_cNotPt_V4
    0U,	// STriw_imm_abs_cNotPt_nv_V4
    0U,	// STriw_imm_abs_cPt_V4
    0U,	// STriw_imm_abs_cPt_nv_V4
    0U,	// STriw_imm_abs_cdnNotPt_V4
    0U,	// STriw_imm_abs_cdnNotPt_nv_V4
    0U,	// STriw_imm_abs_cdnPt_V4
    0U,	// STriw_imm_abs_cdnPt_nv_V4
    2U,	// STriw_imm_abs_nv_V4
    3105U,	// STriw_imm_cNotPt_V4
    3105U,	// STriw_imm_cPt_V4
    3105U,	// STriw_imm_cdnNotPt_V4
    3105U,	// STriw_imm_cdnPt_V4
    0U,	// STriw_ind_lo_V4
    2306U,	// STriw_indexed
    104965U,	// STriw_indexed_cNotPt
    137733U,	// STriw_indexed_cNotPt_nv_V4
    104965U,	// STriw_indexed_cPt
    137733U,	// STriw_indexed_cPt_nv_V4
    104965U,	// STriw_indexed_cdnNotPt_V4
    137733U,	// STriw_indexed_cdnNotPt_nv_V4
    104965U,	// STriw_indexed_cdnPt_V4
    137733U,	// STriw_indexed_cdnPt_nv_V4
    2306U,	// STriw_indexed_f
    2818U,	// STriw_indexed_nv_V4
    2457U,	// STriw_indexed_shl_V4
    116737U,	// STriw_indexed_shl_cNotPt_V4
    149505U,	// STriw_indexed_shl_cNotPt_nv_V4
    116737U,	// STriw_indexed_shl_cPt_V4
    149505U,	// STriw_indexed_shl_cPt_nv_V4
    116737U,	// STriw_indexed_shl_cdnNotPt_V4
    149505U,	// STriw_indexed_shl_cdnNotPt_nv_V4
    116737U,	// STriw_indexed_shl_cdnPt_V4
    149505U,	// STriw_indexed_shl_cdnPt_nv_V4
    2969U,	// STriw_indexed_shl_nv_V4
    2U,	// STriw_nv_V4
    2U,	// STriw_offset_ext_V4
    0U,	// STriw_pred
    0U,	// STriw_pred_V4
    2456U,	// STriw_shl_V4
    2968U,	// STriw_shl_nv_V4
    0U,	// STw_GP
    0U,	// STw_GP_V4
    0U,	// STw_GP_cNotPt_V4
    2U,	// STw_GP_cNotPt_nv_V4
    0U,	// STw_GP_cPt_V4
    2U,	// STw_GP_cPt_nv_V4
    0U,	// STw_GP_cdnNotPt_V4
    2U,	// STw_GP_cdnNotPt_nv_V4
    0U,	// STw_GP_cdnPt_V4
    2U,	// STw_GP_cdnPt_nv_V4
    2U,	// STw_GP_nv_V4
    28U,	// SUB64_rr
    0U,	// SUB_ri
    28U,	// SUB_rr
    0U,	// SUB_rr_cNotPt
    0U,	// SUB_rr_cPt
    0U,	// SUB_rr_cdnNotPt
    0U,	// SUB_rr_cdnPt
    2U,	// SUBi_ASLri_V4
    2U,	// SUBi_LSRri_V4
    0U,	// SUBri_acc
    28U,	// SUBrr_acc
    0U,	// SXTB
    0U,	// SXTB_cNotPt_V4
    0U,	// SXTB_cPt_V4
    0U,	// SXTB_cdnNotPt_V4
    0U,	// SXTB_cdnPt_V4
    0U,	// SXTH
    0U,	// SXTH_cNotPt_V4
    0U,	// SXTH_cPt_V4
    0U,	// SXTH_cdnNotPt_V4
    0U,	// SXTH_cdnPt_V4
    0U,	// SXTW
    0U,	// TCRETURNR
    0U,	// TCRETURNtext
    0U,	// TCRETURNtg
    0U,	// TFCR
    0U,	// TFR
    0U,	// TFR64
    0U,	// TFR64_cNotPt
    0U,	// TFR64_cPt
    0U,	// TFR64_cdnNotPt
    0U,	// TFR64_cdnPt
    0U,	// TFRI
    0U,	// TFRI64
    0U,	// TFRI_V4
    0U,	// TFRI_cNotPt
    157U,	// TFRI_cNotPt_V4
    156U,	// TFRI_cNotPt_f
    0U,	// TFRI_cPt
    157U,	// TFRI_cPt_V4
    156U,	// TFRI_cPt_f
    0U,	// TFRI_cdnNotPt
    157U,	// TFRI_cdnNotPt_V4
    0U,	// TFRI_cdnPt
    157U,	// TFRI_cdnPt_V4
    0U,	// TFRI_f
    0U,	// TFR_FI
    2U,	// TFR_FI_immext_V4
    0U,	// TFR_PdFalse
    0U,	// TFR_PdRs
    0U,	// TFR_RsPd
    0U,	// TFR_cNotPt
    0U,	// TFR_cPt
    0U,	// TFR_cdnNotPt
    0U,	// TFR_cdnPt
    0U,	// TFR_condset_ii
    0U,	// TFR_condset_ii_f
    0U,	// TFR_condset_ir
    0U,	// TFR_condset_ir_f
    0U,	// TFR_condset_ri
    0U,	// TFR_condset_ri_f
    0U,	// TFR_condset_rr
    0U,	// TFR_condset_rr64_f
    0U,	// TFR_condset_rr_f
    28U,	// TOGBIT
    28U,	// TOGBIT_31
    28U,	// TSTBIT_ri
    28U,	// TSTBIT_rr
    28U,	// V4_A4_rcmpeq
    28U,	// V4_A4_rcmpeqi
    28U,	// V4_A4_rcmpneq
    28U,	// V4_A4_rcmpneqi
    28U,	// VALIGN_rrp
    0U,	// VITPACK_pp
    0U,	// VMUX_prr64
    28U,	// VSPLICE_rrp
    0U,	// XOR_pp
    0U,	// XOR_rr
    0U,	// XOR_rr64
    0U,	// XOR_rr_cNotPt
    0U,	// XOR_rr_cPt
    0U,	// XOR_rr_cdnNotPt
    0U,	// XOR_rr_cdnPt
    0U,	// XORd_XORdd
    28U,	// XORr_ANDr_NOTr_V4
    28U,	// XORr_ANDrr_V4
    0U,	// XORr_ORrr_V4
    0U,	// XORr_XORrr_V4
    0U,	// ZXTB
    0U,	// ZXTB_cNotPt_V4
    0U,	// ZXTB_cPt_V4
    0U,	// ZXTB_cdnNotPt_V4
    0U,	// ZXTB_cdnPt_V4
    0U,	// ZXTH
    0U,	// ZXTH_cNotPt_V4
    0U,	// ZXTH_cPt_V4
    0U,	// ZXTH_cdnNotPt_V4
    0U,	// ZXTH_cdnPt_V4
    0U,	// fADD64_rr
    0U,	// fADD_rr
    0U,	// fMUL64_rr
    0U,	// fMUL_rr
    0U,	// fSUB64_rr
    0U,	// fSUB_rr
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 6 */ 'j', 'u', 'm', 'p', 32, 0,
  /* 12 */ 'c', 'a', 'l', 'l', 'r', 32, 0,
  /* 19 */ 'j', 'u', 'm', 'p', 'r', 32, 0,
  /* 26 */ 'i', 'f', 32, '(', '!', 0,
  /* 32 */ 'i', 'f', '(', '!', 0,
  /* 37 */ 'm', 'e', 'm', 'b', '(', '#', '#', 0,
  /* 45 */ 'm', 'e', 'm', 'd', '(', '#', '#', 0,
  /* 53 */ 'm', 'e', 'm', 'h', '(', '#', '#', 0,
  /* 61 */ 'm', 'e', 'm', 'w', '(', '#', '#', 0,
  /* 69 */ 'm', 'e', 'm', 'b', '(', '#', 0,
  /* 76 */ 'm', 'e', 'm', 'd', '(', '#', 0,
  /* 83 */ 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', '(', '#', 0,
  /* 96 */ 'm', 'e', 'm', 'h', '(', '#', 0,
  /* 103 */ 'i', 'm', 'm', 'e', 'x', 't', '(', '#', 0,
  /* 112 */ 'm', 'e', 'm', 'w', '(', '#', 0,
  /* 119 */ 'i', 'f', 32, '(', 0,
  /* 124 */ 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 131 */ 'm', 'e', 'm', 'b', '(', 0,
  /* 137 */ 'm', 'e', 'm', 'd', '(', 0,
  /* 143 */ 'i', 'f', '(', 0,
  /* 147 */ 'm', 'e', 'm', 'h', '(', 0,
  /* 153 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 166 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 178 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 191 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 203 */ 'i', 'f', 32, '(', '!', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 216 */ 'i', 'f', 32, '(', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 228 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 242 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 255 */ 'm', 'e', 'm', 'w', '(', 0,
  /* 261 */ ':', 'e', 'n', 'd', 'l', 'o', 'o', 'p', '0', 0,
  /* 271 */ 'j', 'u', 'm', 'p', 'r', 32, 'r', '3', '1', 0,
  /* 281 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 294 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 301 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 311 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 326 */ 'S', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'e', 'v', 'e', 'r', 32, 'b', 'e', 32, 'e', 'm', 'i', 't', 't', 'e', 'd', 0,
  /* 350 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', 0,
  /* 363 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', 0,
  /* 378 */ 'n', 'o', 'p', 0,
  /* 382 */ 'b', 'a', 'r', 'r', 'i', 'e', 'r', 0,
  /* 390 */ 'E', 'r', 'r', 'o', 'r', ';', 32, 's', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'o', 't', 32, 'e', 'm', 'i', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 511)-1;


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 9) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, ADJCALLSTACKDOWN, ADJ...
    return;
    break;
  case 1:
    // ADD64_rr, ADDASL, ADD_ri, ADD_rr, ADDi_ASLri_V4, ADDi_LSRri_V4, ADDi_M...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cNotP...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // IMMEXT_g, STb_GP, STb_GP_V4, STb_GP_nv_V4, STd_GP, STd_GP_V4, STh_GP, ...
    printGlobalOperand(MI, 0, O); 
    break;
  case 4:
    // IMMEXT_i, STrib_imm_abs_V4, STrib_imm_abs_nv_V4, STrih_imm_abs_V4, STr...
    printImmOperand(MI, 0, O); 
    break;
  case 5:
    // MEMb_ADDi_MEM_V4, MEMb_ADDr_MEM_V4, MEMb_ANDr_MEM_V4, MEMb_ORr_MEM_V4,...
    printMEMriOperand(MI, 0, O); 
    break;
  case 6:
    // POST_LDrib_cNotPt, POST_LDrib_cPt, POST_LDrib_cdnNotPt_V4, POST_LDrib_...
    printOperand(MI, 2, O); 
    break;
  }


  // Fragment 1 encoded into 9 bits for 391 unique commands.
  switch ((Bits >> 12) & 511) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_ri, ADD_rr, ADDr_ADDri_V4, ADDr_MPYir_V4, ADDr_MPYri_V4,...
    O << " = add("; 
    break;
  case 1:
    // ADDASL, HEXAGON_S2_addasl_rrri
    O << " = addasl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 2:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_rr_cNotPt, ADD_rr_cPt, AND_rr_cNotPt, A...
    O << ") "; 
    printOperand(MI, 0, O); 
    break;
  case 3:
    // ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cdnNotPt, ADD_rr_cdnPt, AND_rr_c...
    O << ".new) "; 
    printOperand(MI, 0, O); 
    break;
  case 4:
    // ADDi_ASLri_V4, ADDi_LSRri_V4, ADDi_MPYri_V4, ADDi_MPYrr_V4
    O << " = add(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 5:
    // ADDri_acc, ADDrr_acc, HEXAGON_M2_acci, HEXAGON_M2_accii
    O << " += add("; 
    printOperand(MI, 2, O); 
    break;
  case 6:
    // ALLOCFRAME, IMMEXT_b, IMMEXT_c, IMMEXT_g, IMMEXT_i
    O << ')'; 
    return;
    break;
  case 7:
    // ALL_pp, HEXAGON_C2_all8
    O << " = all8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // AND_pnotp, AND_pp, AND_ri, AND_rr, AND_rr64, ANDd_NOTd_V4, HEXAGON_A2_...
    O << " = and("; 
    printOperand(MI, 1, O); 
    break;
  case 9:
    // ANDi_ASLri_V4, ANDi_LSRri_V4
    O << " = and(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 10:
    // ANDr_ANDr_NOTr_V4, ANDr_ANDrr_V4, HEXAGON_M4_and_and, HEXAGON_M4_and_a...
    O << " &= and("; 
    printOperand(MI, 2, O); 
    break;
  case 11:
    // ANDr_ORrr_V4, HEXAGON_M4_and_or
    O << " &= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // ANDr_XORrr_V4, HEXAGON_M4_and_xor
    O << " &= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // ANY_pp, HEXAGON_C2_any8
    O << " = any8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 14:
    // ARGEXTEND, HEXAGON_A2_tfr, HEXAGON_A2_tfrp, HEXAGON_C2_pxfer_map, HEXA...
    O << " = "; 
    printOperand(MI, 1, O); 
    break;
  case 15:
    // ASL, ASL_rr, ASLd, ASLd_ri, HEXAGON_S2_asl_i_p, HEXAGON_S2_asl_i_r, HE...
    O << " = asl("; 
    printOperand(MI, 1, O); 
    break;
  case 16:
    // ASLH, HEXAGON_A2_aslh
    O << " = aslh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 17:
    // ASL_ADD_ri, ASL_ADD_rr, ASL_ADDd_ri, ASL_ADDd_rr, HEXAGON_S2_asl_i_p_a...
    O << " += asl("; 
    printOperand(MI, 2, O); 
    break;
  case 18:
    // ASL_AND_ri, ASL_AND_rr, ASL_ANDd_ri, ASL_ANDd_rr, HEXAGON_S2_asl_i_p_a...
    O << " &= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 19:
    // ASL_OR_ri, ASL_OR_rr, ASL_ORd_ri, ASL_ORd_rr, HEXAGON_S2_asl_i_p_or, H...
    O << " |= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 20:
    // ASL_SUB_ri, ASL_SUB_rr, ASL_SUBd_ri, ASL_SUBd_rr, HEXAGON_S2_asl_i_p_n...
    O << " -= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 21:
    // ASL_XOR_ri, ASL_XORd_ri, ASLd_rr_xor_V4, HEXAGON_S2_asl_i_p_xacc, HEXA...
    O << " ^= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 22:
    // ASRH, HEXAGON_A2_asrh, SI_to_SXTHI_asrh
    O << " = asrh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 23:
    // ASR_ADD_ri, ASR_ADD_rr, ASR_ADDd_ri, ASR_ADDd_rr, HEXAGON_S2_asr_i_p_a...
    O << " += asr("; 
    printOperand(MI, 2, O); 
    break;
  case 24:
    // ASR_AND_ri, ASR_AND_rr, ASR_ANDd_ri, ASR_ANDd_rr, HEXAGON_S2_asr_i_p_a...
    O << " &= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 25:
    // ASR_OR_ri, ASR_OR_rr, ASR_ORd_ri, ASR_ORd_rr, HEXAGON_S2_asr_i_p_or, H...
    O << " |= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 26:
    // ASR_SUB_ri, ASR_SUB_rr, ASR_SUBd_ri, ASR_SUBd_rr, HEXAGON_S2_asr_i_p_n...
    O << " -= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 27:
    // ASR_ri, ASR_rr, ASRd_ri, ASRd_rr, HEXAGON_S2_asr_i_p, HEXAGON_S2_asr_i...
    O << " = asr("; 
    printOperand(MI, 1, O); 
    break;
  case 28:
    // ASRd_rr_xor_V4
    O << " ^= asr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 29:
    // BRCOND, JMP_c, JMP_cNot
    O << ") jump "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 30:
    // BR_JT, CALL, CALLR, CALLRv3, CALLv3, JMP
    return;
    break;
  case 31:
    // CLRBIT, CLRBIT_31, HEXAGON_S2_clrbit_i, HEXAGON_S2_clrbit_r
    O << " = clrbit("; 
    printOperand(MI, 1, O); 
    break;
  case 32:
    // CMPEHexagon4rr, CMPEQri, CMPEQrr, HEXAGON_C2_cmpeq, HEXAGON_C2_cmpeqi,...
    O << " = cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 33:
    // CMPGEUri, HEXAGON_C2_cmpgeui
    O << " = cmp.geu("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    break;
  case 34:
    // CMPGEri, HEXAGON_C2_cmpgei
    O << " = cmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    break;
  case 35:
    // CMPGT64rr, CMPGTri, CMPGTrr, HEXAGON_C2_cmpgt, HEXAGON_C2_cmpgti, HEXA...
    O << " = cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 36:
    // CMPGTU64rr, CMPGTUri, CMPGTUrr, HEXAGON_C2_cmpgtu, HEXAGON_C2_cmpgtui,...
    O << " = cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 37:
    // CMPLTUrr, HEXAGON_C2_cmpltu
    O << " = cmp.ltu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 38:
    // CMPLTrr, HEXAGON_C2_cmplt
    O << " = cmp.lt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 39:
    // CMPbEQri_V4, CMPbEQrr_sbsb_V4, CMPbEQrr_ubub_V4
    O << " = cmpb.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 40:
    // CMPbGTUri_V4, CMPbGTUrr_V4
    O << " = cmpb.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 41:
    // CMPbGTrr_V4
    O << " = cmpb.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 42:
    // CMPhEQri_V4, CMPhEQrr_shl_V4, CMPhEQrr_xor_V4
    O << " = cmph.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 43:
    // CMPhGTUri_V4, CMPhGTUrr_V4
    O << " = cmph.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 44:
    // CMPhGTrr_shl_V4
    O << " = cmph.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 45:
    // CMPnotEQ_ri, CMPnotEQ_rr, Hexagon_A4_rcmpneq, Hexagon_A4_rcmpneqi, Hex...
    O << " = !cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 46:
    // CMPnotGTU_ri, CMPnotGTU_rr, Hexagon_C4_cmplteu, Hexagon_C4_cmplteui
    O << " = !cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 47:
    // CMPnotGT_ri, CMPnotGT_rr, Hexagon_C4_cmplte, Hexagon_C4_cmpltei
    O << " = !cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 48:
    // COMBINE_Ii, COMBINE_Ir_V4, COMBINE_iI_V4, HEXAGON_A2_combineii, Hexago...
    O << " = combine(#"; 
    break;
  case 49:
    // COMBINE_hh, COMBINE_hl, COMBINE_lh, COMBINE_ll, COMBINE_rI_V4, COMBINE...
    O << " = combine("; 
    printOperand(MI, 1, O); 
    break;
  case 50:
    // CONST32, CONST32GP_set, CONST32_Float_Real, CONST32_Int_Real, CONST32_...
    O << " = CONST32(#"; 
    break;
  case 51:
    // CONST32_Label
    O << " = CONST32("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 52:
    // CONST64_Float_Real, CONST64_Int_Real
    O << " = CONST64(#"; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 53:
    // CONVERT_d2df, HEXAGON_F2_conv_d2df
    O << " = convert_d2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 54:
    // CONVERT_d2sf, HEXAGON_F2_conv_d2sf
    O << " = convert_d2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 55:
    // CONVERT_df2d, CONVERT_df2d_nchop, HEXAGON_F2_conv_df2d, HEXAGON_F2_con...
    O << " = convert_df2d("; 
    printOperand(MI, 1, O); 
    break;
  case 56:
    // CONVERT_df2sf, HEXAGON_F2_conv_df2sf
    O << " = convert_df2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 57:
    // CONVERT_df2ud, CONVERT_df2ud_nchop, HEXAGON_F2_conv_df2ud, HEXAGON_F2_...
    O << " = convert_df2ud("; 
    printOperand(MI, 1, O); 
    break;
  case 58:
    // CONVERT_df2uw, CONVERT_df2uw_nchop, HEXAGON_F2_conv_df2uw, HEXAGON_F2_...
    O << " = convert_df2uw("; 
    printOperand(MI, 1, O); 
    break;
  case 59:
    // CONVERT_df2w, CONVERT_df2w_nchop, HEXAGON_F2_conv_df2w, HEXAGON_F2_con...
    O << " = convert_df2w("; 
    printOperand(MI, 1, O); 
    break;
  case 60:
    // CONVERT_sf2d, CONVERT_sf2d_nchop, HEXAGON_F2_conv_sf2d, HEXAGON_F2_con...
    O << " = convert_sf2d("; 
    printOperand(MI, 1, O); 
    break;
  case 61:
    // CONVERT_sf2df, HEXAGON_F2_conv_sf2df
    O << " = convert_sf2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 62:
    // CONVERT_sf2ud, CONVERT_sf2ud_nchop, HEXAGON_F2_conv_sf2ud, HEXAGON_F2_...
    O << " = convert_sf2ud("; 
    printOperand(MI, 1, O); 
    break;
  case 63:
    // CONVERT_sf2uw, CONVERT_sf2uw_nchop, HEXAGON_F2_conv_sf2uw, HEXAGON_F2_...
    O << " = convert_sf2uw("; 
    printOperand(MI, 1, O); 
    break;
  case 64:
    // CONVERT_sf2w, CONVERT_sf2w_nchop, HEXAGON_F2_conv_sf2w, HEXAGON_F2_con...
    O << " = convert_sf2w("; 
    printOperand(MI, 1, O); 
    break;
  case 65:
    // CONVERT_ud2df, HEXAGON_F2_conv_ud2df
    O << " = convert_ud2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 66:
    // CONVERT_ud2sf, HEXAGON_F2_conv_ud2sf
    O << " = convert_ud2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 67:
    // CONVERT_uw2df, HEXAGON_F2_conv_uw2df
    O << " = convert_uw2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 68:
    // CONVERT_uw2sf, HEXAGON_F2_conv_uw2sf
    O << " = convert_uw2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 69:
    // CONVERT_w2df, HEXAGON_F2_conv_w2df
    O << " = convert_w2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 70:
    // CONVERT_w2sf, HEXAGON_F2_conv_w2sf
    O << " = convert_w2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 71:
    // CTLZ64_rr, CTLZ_rr, HEXAGON_S2_cl0, HEXAGON_S2_cl0p
    O << " = cl0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 72:
    // CTTZ64_rr, CTTZ_rr, HEXAGON_S2_ct0
    O << " = ct0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 73:
    // DEALLOC_RET_cNotPt_V4, DEALLOC_RET_cPt_V4
    O << ") dealloc_return"; 
    return;
    break;
  case 74:
    // DEALLOC_RET_cNotdnPnt_V4, DEALLOC_RET_cdnPnt_V4
    O << ".new) dealloc_return:nt"; 
    return;
    break;
  case 75:
    // DEALLOC_RET_cNotdnPt_V4, DEALLOC_RET_cdnPt_V4
    O << ".new) dealloc_return:t"; 
    return;
    break;
  case 76:
    // FCMPOEQ32_rr, FCMPUEQ32_rr, HEXAGON_F2_sfcmpeq
    O << " = sfcmp.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 77:
    // FCMPOEQ64_rr, FCMPUEQ64_rr, HEXAGON_F2_dfcmpeq
    O << " = dfcmp.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 78:
    // FCMPOGE32_rr, FCMPUGE32_rr, HEXAGON_F2_sfcmpge
    O << " = sfcmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 79:
    // FCMPOGE64_rr, FCMPUGE64_rr, HEXAGON_F2_dfcmpge
    O << " = dfcmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 80:
    // FCMPOGT32_rr, FCMPUGT32_rr, HEXAGON_F2_sfcmpgt
    O << " = sfcmp.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 81:
    // FCMPOGT64_rr, FCMPUGT64_rr, HEXAGON_F2_dfcmpgt
    O << " = dfcmp.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 82:
    // FMADD_dp, HEXAGON_F2_dffma, HEXAGON_F2_dffma_lib, HEXAGON_F2_dffma_sc
    O << " += dfmpy("; 
    break;
  case 83:
    // FMADD_sp, HEXAGON_F2_sffma, HEXAGON_F2_sffma_lib, HEXAGON_F2_sffma_sc
    O << " += sfmpy("; 
    break;
  case 84:
    // FMAX_dp, HEXAGON_F2_dfmax
    O << " = dfmax("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 85:
    // FMAX_sp, HEXAGON_F2_sfmax
    O << " = sfmax("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 86:
    // FMIN_dp, HEXAGON_F2_dfmin
    O << " = dfmin("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 87:
    // FMIN_sp, HEXAGON_F2_sfmin
    O << " = sfmin("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 88:
    // HEXAGON_A2_abs, HEXAGON_A2_absp, HEXAGON_A2_abssat
    O << " = abs("; 
    printOperand(MI, 1, O); 
    break;
  case 89:
    // HEXAGON_A2_max, Hexagon_A2_maxp, MAXd_rr, MAXw_dd, MAXw_rr
    O << " = max("; 
    break;
  case 90:
    // HEXAGON_A2_maxu, Hexagon_A2_maxup, MAXUd_rr, MAXUw_rr
    O << " = maxu("; 
    break;
  case 91:
    // HEXAGON_A2_min, MINd_rr, MINw_dd, MINw_rr
    O << " = min("; 
    break;
  case 92:
    // HEXAGON_A2_minu, MINUd_rr, MINUw_rr
    O << " = minu("; 
    break;
  case 93:
    // HEXAGON_A2_neg, HEXAGON_A2_negp, HEXAGON_A2_negsat, NEG
    O << " = neg("; 
    printOperand(MI, 1, O); 
    break;
  case 94:
    // HEXAGON_A2_not, HEXAGON_A2_notp, HEXAGON_C2_not, NOT_p, NOT_rr, NOT_rr...
    O << " = not("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 95:
    // HEXAGON_A2_or, HEXAGON_A2_orir, HEXAGON_A2_orp, HEXAGON_C2_or, HEXAGON...
    O << " = or("; 
    printOperand(MI, 1, O); 
    break;
  case 96:
    // HEXAGON_A2_sat
    O << " = sat("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 97:
    // HEXAGON_A2_satb
    O << " = satb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 98:
    // HEXAGON_A2_sath
    O << " = sath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 99:
    // HEXAGON_A2_satub
    O << " = satub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 100:
    // HEXAGON_A2_satuh
    O << " = satuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 101:
    // HEXAGON_A2_sub, HEXAGON_A2_subh_h16_hh, HEXAGON_A2_subh_h16_hl, HEXAGO...
    O << " = sub("; 
    printOperand(MI, 1, O); 
    break;
  case 102:
    // HEXAGON_A2_subri, SUB_ri, SUBi_ASLri_V4, SUBi_LSRri_V4
    O << " = sub(#"; 
    break;
  case 103:
    // HEXAGON_A2_svaddh, HEXAGON_A2_svaddhs, HEXAGON_A2_vaddh, HEXAGON_A2_va...
    O << " = vaddh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 104:
    // HEXAGON_A2_svadduhs, HEXAGON_A2_vadduhs
    O << " = vadduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 105:
    // HEXAGON_A2_svavgh, HEXAGON_A2_svavghs, HEXAGON_A2_vavgh, HEXAGON_A2_va...
    O << " = vavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 106:
    // HEXAGON_A2_svnavgh, HEXAGON_A2_vnavgh, HEXAGON_A2_vnavghcr, HEXAGON_A2...
    O << " = vnavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 107:
    // HEXAGON_A2_svsubh, HEXAGON_A2_svsubhs, HEXAGON_A2_vsubh, HEXAGON_A2_vs...
    O << " = vsubh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 108:
    // HEXAGON_A2_svsubuhs, HEXAGON_A2_vsubuhs
    O << " = vsubuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 109:
    // HEXAGON_A2_swiz
    O << " = swiz("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 110:
    // HEXAGON_A2_sxtb, SXTB
    O << " = sxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 111:
    // HEXAGON_A2_sxth, SXTH
    O << " = sxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 112:
    // HEXAGON_A2_sxtw, SXTW
    O << " = sxtw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 113:
    // HEXAGON_A2_tfrih
    O << ".h = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 114:
    // HEXAGON_A2_tfril
    O << ".l = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 115:
    // HEXAGON_A2_tfrpi, HEXAGON_A2_tfrsi, TFRI, TFRI64
    O << " = #"; 
    break;
  case 116:
    // HEXAGON_A2_vabsh, HEXAGON_A2_vabshsat
    O << " = vabsh("; 
    printOperand(MI, 1, O); 
    break;
  case 117:
    // HEXAGON_A2_vabsw, HEXAGON_A2_vabswsat
    O << " = vabsw("; 
    printOperand(MI, 1, O); 
    break;
  case 118:
    // HEXAGON_A2_vaddub, HEXAGON_A2_vaddubs
    O << " = vaddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 119:
    // HEXAGON_A2_vaddw, HEXAGON_A2_vaddws
    O << " = vaddw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 120:
    // HEXAGON_A2_vavgub, HEXAGON_A2_vavgubr
    O << " = vavgub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 121:
    // HEXAGON_A2_vavguh, HEXAGON_A2_vavguhr
    O << " = vavguh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 122:
    // HEXAGON_A2_vavguw, HEXAGON_A2_vavguwr
    O << " = vavguw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 123:
    // HEXAGON_A2_vavgw, HEXAGON_A2_vavgwcr, HEXAGON_A2_vavgwr
    O << " = vavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 124:
    // HEXAGON_A2_vcmpbeq
    O << " = vcmpb.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 125:
    // HEXAGON_A2_vcmpbgtu
    O << " = vcmpb.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 126:
    // HEXAGON_A2_vcmpheq
    O << " = vcmph.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 127:
    // HEXAGON_A2_vcmphgt
    O << " = vcmph.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 128:
    // HEXAGON_A2_vcmphgtu
    O << " = vcmph.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 129:
    // HEXAGON_A2_vcmpweq
    O << " = vcmpw.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 130:
    // HEXAGON_A2_vcmpwgt
    O << " = vcmpw.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 131:
    // HEXAGON_A2_vcmpwgtu
    O << " = vcmpw.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 132:
    // HEXAGON_A2_vconj
    O << " = vconj("; 
    printOperand(MI, 1, O); 
    O << "):sat"; 
    return;
    break;
  case 133:
    // HEXAGON_A2_vmaxh
    O << " = vmaxh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 134:
    // HEXAGON_A2_vmaxub
    O << " = vmaxub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 135:
    // HEXAGON_A2_vmaxuh
    O << " = vmaxuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 136:
    // HEXAGON_A2_vmaxuw
    O << " = vmaxuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 137:
    // HEXAGON_A2_vmaxw
    O << " = vmaxw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 138:
    // HEXAGON_A2_vminh
    O << " = vminh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 139:
    // HEXAGON_A2_vminub
    O << " = vminub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 140:
    // HEXAGON_A2_vminuh
    O << " = vminuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 141:
    // HEXAGON_A2_vminuw
    O << " = vminuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 142:
    // HEXAGON_A2_vminw
    O << " = vminw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 143:
    // HEXAGON_A2_vnavgw, HEXAGON_A2_vnavgwcr, HEXAGON_A2_vnavgwr
    O << " = vnavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 144:
    // HEXAGON_A2_vraddub
    O << " = vraddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 145:
    // HEXAGON_A2_vraddub_acc
    O << " += vraddub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 146:
    // HEXAGON_A2_vrsadub
    O << " = vrsadub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 147:
    // HEXAGON_A2_vrsadub_acc
    O << " += vrsadub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 148:
    // HEXAGON_A2_vsubub, HEXAGON_A2_vsububs
    O << " = vsubub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 149:
    // HEXAGON_A2_vsubw, HEXAGON_A2_vsubws
    O << " = vsubw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 150:
    // HEXAGON_A2_xor, HEXAGON_A2_xorp, HEXAGON_C2_xor, TFR_PdFalse, XOR_pp, ...
    O << " = xor("; 
    break;
  case 151:
    // HEXAGON_A2_zxtb, ZXTB
    O << " = zxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 152:
    // HEXAGON_A2_zxth, ZXTH
    O << " = zxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 153:
    // HEXAGON_A4_cround_ri, HEXAGON_A4_cround_rr
    O << " = cround("; 
    printOperand(MI, 1, O); 
    break;
  case 154:
    // HEXAGON_A4_modwrapu
    O << " = modwrap("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 155:
    // HEXAGON_A4_round_ri, HEXAGON_A4_round_ri_sat, HEXAGON_A4_round_rr, HEX...
    O << " = round("; 
    printOperand(MI, 1, O); 
    break;
  case 156:
    // HEXAGON_A5_vaddhubs
    O << " = vaddhub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 157:
    // HEXAGON_C2_mask, MASK_p
    O << " = mask("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 158:
    // HEXAGON_C2_mux, HEXAGON_C2_muxii, HEXAGON_C2_muxir, HEXAGON_C2_muxri, ...
    O << " = mux("; 
    printOperand(MI, 1, O); 
    break;
  case 159:
    // HEXAGON_C2_vitpack, VITPACK_pp
    O << " = vitpack("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 160:
    // HEXAGON_C2_vmux, VMUX_prr64
    O << " = vmux("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 161:
    // HEXAGON_C4_fastcorner9, Hexagon_C4_fastcorner9
    O << " = fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 162:
    // HEXAGON_C4_fastcorner9_not, Hexagon_C4_fastcorner9_not
    O << " = !fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 163:
    // HEXAGON_F2_dfadd, fADD64_rr
    O << " = dfadd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 164:
    // HEXAGON_F2_dfclass
    O << " = dfclass("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 165:
    // HEXAGON_F2_dfcmpuo
    O << " = dfcmp.uo("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 166:
    // HEXAGON_F2_dffixupd
    O << " = dffixupd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 167:
    // HEXAGON_F2_dffixupn
    O << " = dffixupn("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 168:
    // HEXAGON_F2_dffixupr
    O << " = dffixupr("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 169:
    // HEXAGON_F2_dffms, HEXAGON_F2_dffms_lib
    O << " -= dfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 170:
    // HEXAGON_F2_dfimm_n, HEXAGON_F2_dfimm_p
    O << " = dfmake#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 171:
    // HEXAGON_F2_dfmpy, fMUL64_rr
    O << " = dfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 172:
    // HEXAGON_F2_dfsub, fSUB64_rr
    O << " = dfsub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 173:
    // HEXAGON_F2_sfadd, fADD_rr
    O << " = sfadd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 174:
    // HEXAGON_F2_sfclass
    O << " = sfclass("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 175:
    // HEXAGON_F2_sfcmpuo
    O << " = sfcmp.uo("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 176:
    // HEXAGON_F2_sffixupd
    O << " = sffixupd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 177:
    // HEXAGON_F2_sffixupn
    O << " = sffixupn("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 178:
    // HEXAGON_F2_sffixupr
    O << " = sffixupr("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 179:
    // HEXAGON_F2_sffms, HEXAGON_F2_sffms_lib
    O << " -= sfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 180:
    // HEXAGON_F2_sfimm_n, HEXAGON_F2_sfimm_p
    O << " = sfmake#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 181:
    // HEXAGON_F2_sfmpy, fMUL_rr
    O << " = sfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 182:
    // HEXAGON_F2_sfsub, fSUB_rr
    O << " = sfsub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 183:
    // HEXAGON_M2_cmaci_s0
    O << " += cmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 184:
    // HEXAGON_M2_cmacr_s0
    O << " += cmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 185:
    // HEXAGON_M2_cmacs_s0, HEXAGON_M2_cmacs_s1, HEXAGON_M2_cmacsc_s0, HEXAGO...
    O << " += cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 186:
    // HEXAGON_M2_cmpyi_s0
    O << " = cmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 187:
    // HEXAGON_M2_cmpyr_s0
    O << " = cmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 188:
    // HEXAGON_M2_cmpyrs_s0, HEXAGON_M2_cmpyrs_s1, HEXAGON_M2_cmpyrsc_s0, HEX...
    O << " = cmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 189:
    // HEXAGON_M2_cnacs_s0, HEXAGON_M2_cnacs_s1, HEXAGON_M2_cnacsc_s0, HEXAGO...
    O << " -= cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 190:
    // HEXAGON_M2_dpmpyss_acc_s0, HEXAGON_M2_mpy_acc_hh_s0, HEXAGON_M2_mpy_ac...
    O << " += mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 191:
    // HEXAGON_M2_dpmpyss_nac_s0, HEXAGON_M2_mpy_nac_hh_s0, HEXAGON_M2_mpy_na...
    O << " -= mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 192:
    // HEXAGON_M2_dpmpyss_rnd_s0, HEXAGON_M2_dpmpyss_s0, HEXAGON_M2_hmmpyh_rs...
    O << " = mpy("; 
    printOperand(MI, 1, O); 
    break;
  case 193:
    // HEXAGON_M2_dpmpyuu_acc_s0, HEXAGON_M2_mpyu_acc_hh_s0, HEXAGON_M2_mpyu_...
    O << " += mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 194:
    // HEXAGON_M2_dpmpyuu_nac_s0, HEXAGON_M2_mpyu_nac_hh_s0, HEXAGON_M2_mpyu_...
    O << " -= mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 195:
    // HEXAGON_M2_dpmpyuu_s0, HEXAGON_M2_mpyu_hh_s0, HEXAGON_M2_mpyu_hh_s1, H...
    O << " = mpyu("; 
    printOperand(MI, 1, O); 
    break;
  case 196:
    // HEXAGON_M2_maci, HEXAGON_M2_macsip, MPYI_acc_ri, MPYI_acc_rr
    O << " += mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 197:
    // HEXAGON_M2_macsin, MPYI_sub_ri
    O << " -= mpyi("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    break;
  case 198:
    // HEXAGON_M2_mmachs_rs0, HEXAGON_M2_mmachs_rs1, HEXAGON_M2_mmachs_s0, HE...
    O << " += vmpywoh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 199:
    // HEXAGON_M2_mmacls_rs0, HEXAGON_M2_mmacls_rs1, HEXAGON_M2_mmacls_s0, HE...
    O << " += vmpyweh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 200:
    // HEXAGON_M2_mmacuhs_rs0, HEXAGON_M2_mmacuhs_rs1, HEXAGON_M2_mmacuhs_s0,...
    O << " += vmpywouh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 201:
    // HEXAGON_M2_mmaculs_rs0, HEXAGON_M2_mmaculs_rs1, HEXAGON_M2_mmaculs_s0,...
    O << " += vmpyweuh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 202:
    // HEXAGON_M2_mmpyh_rs0, HEXAGON_M2_mmpyh_rs1, HEXAGON_M2_mmpyh_s0, HEXAG...
    O << " = vmpywoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 203:
    // HEXAGON_M2_mmpyl_rs0, HEXAGON_M2_mmpyl_rs1, HEXAGON_M2_mmpyl_s0, HEXAG...
    O << " = vmpyweh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 204:
    // HEXAGON_M2_mmpyuh_rs0, HEXAGON_M2_mmpyuh_rs1, HEXAGON_M2_mmpyuh_s0, HE...
    O << " = vmpywouh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 205:
    // HEXAGON_M2_mmpyul_rs0, HEXAGON_M2_mmpyul_rs1, HEXAGON_M2_mmpyul_s0, HE...
    O << " = vmpyweuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 206:
    // HEXAGON_M2_mpyi, Hexagon_M2_mpysmi, MPYI, MPYI_ri
    O << " = mpyi("; 
    printOperand(MI, 1, O); 
    break;
  case 207:
    // HEXAGON_M2_mpyui
    O << " = mpyui("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 208:
    // HEXAGON_M2_nacci, HEXAGON_M2_naccii, SUBri_acc, SUBrr_acc
    O << " -= add("; 
    printOperand(MI, 2, O); 
    break;
  case 209:
    // HEXAGON_M2_subacc
    O << " += sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 210:
    // HEXAGON_M2_vabsdiffh
    O << " = vabsdiffh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 211:
    // HEXAGON_M2_vabsdiffw
    O << " = vabsdiffw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 212:
    // HEXAGON_M2_vcmac_s0_sat_i
    O << " += vcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 213:
    // HEXAGON_M2_vcmac_s0_sat_r
    O << " += vcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 214:
    // HEXAGON_M2_vcmpy_s0_sat_i, HEXAGON_M2_vcmpy_s1_sat_i
    O << " = vcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 215:
    // HEXAGON_M2_vcmpy_s0_sat_r, HEXAGON_M2_vcmpy_s1_sat_r
    O << " = vcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 216:
    // HEXAGON_M2_vdmacs_s0, HEXAGON_M2_vdmacs_s1
    O << " += vdmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 217:
    // HEXAGON_M2_vdmpyrs_s0, HEXAGON_M2_vdmpyrs_s1, HEXAGON_M2_vdmpys_s0, HE...
    O << " = vdmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 218:
    // HEXAGON_M2_vmac2, HEXAGON_M2_vmac2s_s0, HEXAGON_M2_vmac2s_s1
    O << " += vmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 219:
    // HEXAGON_M2_vmac2es, HEXAGON_M2_vmac2es_s0, HEXAGON_M2_vmac2es_s1
    O << " += vmpyeh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 220:
    // HEXAGON_M2_vmpy2es_s0, HEXAGON_M2_vmpy2es_s1
    O << " = vmpyeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 221:
    // HEXAGON_M2_vmpy2s_s0, HEXAGON_M2_vmpy2s_s0pack, HEXAGON_M2_vmpy2s_s1, ...
    O << " = vmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 222:
    // HEXAGON_M2_vrcmaci_s0, HEXAGON_M2_vrcmaci_s0c
    O << " += vrcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 223:
    // HEXAGON_M2_vrcmacr_s0, HEXAGON_M2_vrcmacr_s0c
    O << " += vrcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 224:
    // HEXAGON_M2_vrcmpyi_s0, HEXAGON_M2_vrcmpyi_s0c
    O << " = vrcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 225:
    // HEXAGON_M2_vrcmpyr_s0, HEXAGON_M2_vrcmpyr_s0c
    O << " = vrcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 226:
    // HEXAGON_M2_vrmac_s0
    O << " += vrmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 227:
    // HEXAGON_M2_vrmpy_s0
    O << " = vrmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 228:
    // HEXAGON_M2_xor_xacc, Hexagon_M4_xor_xacc, XORd_XORdd, XORr_XORrr_V4
    O << " ^= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 229:
    // HEXAGON_M4_or_and, HEXAGON_M4_or_andn, HEXAGON_S4_or_andi, ORr_ANDr_NO...
    O << " |= and("; 
    printOperand(MI, 2, O); 
    break;
  case 230:
    // HEXAGON_M4_or_or, HEXAGON_S4_or_ori, ORr_ORri_V4, ORr_ORrr_V4
    O << " |= or("; 
    printOperand(MI, 2, O); 
    break;
  case 231:
    // HEXAGON_M4_or_xor, ORr_XORrr_V4
    O << " |= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 232:
    // HEXAGON_M4_xor_and, HEXAGON_M4_xor_andn, XORr_ANDr_NOTr_V4, XORr_ANDrr...
    O << " ^= and("; 
    printOperand(MI, 2, O); 
    break;
  case 233:
    // HEXAGON_M4_xor_or, XORr_ORrr_V4
    O << " ^= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 234:
    // HEXAGON_M5_vdmacbsu
    O << " += vdmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 235:
    // HEXAGON_M5_vdmpybsu
    O << " = vdmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 236:
    // HEXAGON_M5_vmacbsu
    O << " += vmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 237:
    // HEXAGON_M5_vmacbuu
    O << " += vmpybu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 238:
    // HEXAGON_M5_vmpybsu
    O << " = vmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 239:
    // HEXAGON_M5_vmpybuu
    O << " = vmpybu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 240:
    // HEXAGON_M5_vrmacbsu
    O << " += vrmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 241:
    // HEXAGON_M5_vrmacbuu
    O << " += vrmpybu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 242:
    // HEXAGON_M5_vrmpybsu
    O << " = vrmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 243:
    // HEXAGON_M5_vrmpybuu
    O << " = vrmpybu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 244:
    // HEXAGON_S2_asl_i_vh, HEXAGON_S2_asl_r_vh
    O << " = vaslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 245:
    // HEXAGON_S2_asl_i_vw, HEXAGON_S2_asl_r_vw
    O << " = vaslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 246:
    // HEXAGON_S2_asr_i_p_rnd_goodsyntax, HEXAGON_S2_asr_i_r_rnd_goodsyntax
    O << " = asrrnd("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 247:
    // HEXAGON_S2_asr_i_svw_trun, HEXAGON_S2_asr_i_vw, HEXAGON_S2_asr_r_svw_t...
    O << " = vasrw("; 
    printOperand(MI, 1, O); 
    break;
  case 248:
    // HEXAGON_S2_asr_i_vh, HEXAGON_S2_asr_r_vh, HEXAGON_S5_vasrhrnd_goodsynt...
    O << " = vasrh("; 
    printOperand(MI, 1, O); 
    break;
  case 249:
    // HEXAGON_S2_cl1, HEXAGON_S2_cl1p
    O << " = cl1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 250:
    // HEXAGON_S2_clb, HEXAGON_S2_clbp
    O << " = clb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 251:
    // HEXAGON_S2_clbnorm
    O << " = normamt("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 252:
    // HEXAGON_S2_ct1
    O << " = ct1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 253:
    // HEXAGON_S2_extractu, HEXAGON_S2_extractu_rp, HEXAGON_S2_extractup, HEX...
    O << " = extractu("; 
    printOperand(MI, 1, O); 
    break;
  case 254:
    // HEXAGON_S2_lsl_r_p, HEXAGON_S2_lsl_r_r, LSL_rr, LSLd
    O << " = lsl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 255:
    // HEXAGON_S2_lsl_r_p_acc, HEXAGON_S2_lsl_r_r_acc, LSL_ADD_rr, LSL_ADDd_r...
    O << " += lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 256:
    // HEXAGON_S2_lsl_r_p_and, HEXAGON_S2_lsl_r_r_and, LSL_AND_rr, LSL_ANDd_r...
    O << " &= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 257:
    // HEXAGON_S2_lsl_r_p_nac, HEXAGON_S2_lsl_r_r_nac, LSL_SUB_rr, LSL_SUBd_r...
    O << " -= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 258:
    // HEXAGON_S2_lsl_r_p_or, HEXAGON_S2_lsl_r_r_or, LSL_OR_rr, LSL_ORd_rr
    O << " |= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 259:
    // HEXAGON_S2_lsl_r_vh
    O << " = vlslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 260:
    // HEXAGON_S2_lsl_r_vw
    O << " = vlslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 261:
    // HEXAGON_S2_lsr_i_p, HEXAGON_S2_lsr_i_r, HEXAGON_S2_lsr_r_p, HEXAGON_S2...
    O << " = lsr("; 
    printOperand(MI, 1, O); 
    break;
  case 262:
    // HEXAGON_S2_lsr_i_p_acc, HEXAGON_S2_lsr_i_r_acc, HEXAGON_S2_lsr_r_p_acc...
    O << " += lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 263:
    // HEXAGON_S2_lsr_i_p_and, HEXAGON_S2_lsr_i_r_and, HEXAGON_S2_lsr_r_p_and...
    O << " &= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 264:
    // HEXAGON_S2_lsr_i_p_nac, HEXAGON_S2_lsr_i_r_nac, HEXAGON_S2_lsr_r_p_nac...
    O << " -= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 265:
    // HEXAGON_S2_lsr_i_p_or, HEXAGON_S2_lsr_i_r_or, HEXAGON_S2_lsr_r_p_or, H...
    O << " |= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 266:
    // HEXAGON_S2_lsr_i_p_xacc, HEXAGON_S2_lsr_i_r_xacc, LSR_XOR_ri, LSR_XORd...
    O << " ^= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 267:
    // HEXAGON_S2_lsr_i_vh, HEXAGON_S2_lsr_r_vh
    O << " = vlsrh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 268:
    // HEXAGON_S2_lsr_i_vw, HEXAGON_S2_lsr_r_vw
    O << " = vlsrw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 269:
    // HEXAGON_S2_packhl
    O << " = packhl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 270:
    // HEXAGON_S2_parityp
    O << " = parity("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 271:
    // HEXAGON_S2_setbit_i, HEXAGON_S2_setbit_r, SETBIT, SETBIT_31, TOGBIT
    O << " = setbit("; 
    printOperand(MI, 1, O); 
    break;
  case 272:
    // HEXAGON_S2_shuffeb
    O << " = shuffeb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 273:
    // HEXAGON_S2_shuffeh
    O << " = shuffeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 274:
    // HEXAGON_S2_shuffob
    O << " = shuffob("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 275:
    // HEXAGON_S2_shuffoh
    O << " = shuffoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 276:
    // HEXAGON_S2_svsathb, HEXAGON_S2_vsathb, HEXAGON_S2_vsathb_nopack
    O << " = vsathb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 277:
    // HEXAGON_S2_svsathub, HEXAGON_S2_vsathub, HEXAGON_S2_vsathub_nopack
    O << " = vsathub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 278:
    // HEXAGON_S2_togglebit_i, HEXAGON_S2_togglebit_r, TOGBIT_31
    O << " = togglebit("; 
    printOperand(MI, 1, O); 
    break;
  case 279:
    // HEXAGON_S2_tstbit_i, HEXAGON_S2_tstbit_r, TSTBIT_ri, TSTBIT_rr
    O << " = tstbit("; 
    printOperand(MI, 1, O); 
    break;
  case 280:
    // HEXAGON_S2_valignib, HEXAGON_S2_valignrb, VALIGN_rrp
    O << " = valignb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 281:
    // HEXAGON_S2_vcrotate
    O << " = vcrotate("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 282:
    // HEXAGON_S2_vrndpackwh, HEXAGON_S2_vrndpackwhs
    O << " = vrndwh("; 
    printOperand(MI, 1, O); 
    break;
  case 283:
    // HEXAGON_S2_vsatwh, HEXAGON_S2_vsatwh_nopack
    O << " = vsatwh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 284:
    // HEXAGON_S2_vsatwuh, HEXAGON_S2_vsatwuh_nopack
    O << " = vsatwuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 285:
    // HEXAGON_S2_vsplatrb
    O << " = vsplatb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 286:
    // HEXAGON_S2_vsplatrh
    O << " = vsplath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 287:
    // HEXAGON_S2_vsxtbh
    O << " = vsxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 288:
    // HEXAGON_S2_vsxthw
    O << " = vsxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 289:
    // HEXAGON_S2_vtrunehb
    O << " = vtrunehb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 290:
    // HEXAGON_S2_vtrunewh
    O << " = vtrunewh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 291:
    // HEXAGON_S2_vtrunohb
    O << " = vtrunohb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 292:
    // HEXAGON_S2_vtrunowh
    O << " = vtrunowh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 293:
    // HEXAGON_S2_vzxtbh
    O << " = vzxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 294:
    // HEXAGON_S2_vzxthw
    O << " = vzxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 295:
    // HEXAGON_S5_asrhub_rnd_sat_goodsyntax, HEXAGON_S5_asrhub_sat
    O << " = vasrhub("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    break;
  case 296:
    // HEXAGON_S5_popcountp
    O << " = popcount("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 297:
    // HEXAGON_circ_ldd, LDrid, LDrid_abs_set_V4, LDrid_abs_setimm_V4, LDrid_...
    O << " = memd("; 
    break;
  case 298:
    // HI, HI_jt, HI_label, HIi
    O << ".h = #HI("; 
    break;
  case 299:
    // Hexagon_C2_bitsclr, Hexagon_C2_bitsclri
    O << " = bitsclr("; 
    printOperand(MI, 1, O); 
    break;
  case 300:
    // Hexagon_C2_bitsset
    O << " = bitsset("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 301:
    // Hexagon_M2_vradduh
    O << " = vradduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 302:
    // Hexagon_M2_vrcmpys_acc_s1
    O << " += vrcmpys("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):<<1:sat"; 
    return;
    break;
  case 303:
    // Hexagon_M2_vrcmpys_s1, Hexagon_M2_vrcmpys_s1rp
    O << " = vrcmpys("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 304:
    // Hexagon_S2_brev
    O << " = brev("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 305:
    // Hexagon_S2_deinterleave
    O << " = deinterleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 306:
    // Hexagon_S2_insert, Hexagon_S2_insert_rp, Hexagon_S2_insertp, Hexagon_S...
    O << " = insert("; 
    printOperand(MI, 2, O); 
    break;
  case 307:
    // Hexagon_S2_interleave
    O << " = interleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 308:
    // Hexagon_S2_lfsp
    O << " = lfs("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 309:
    // Hexagon_S2_tableidxb_goodsyntax
    O << " = tableidxb("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 310:
    // Hexagon_S2_tableidxd_goodsyntax
    O << " = tableidxd("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 311:
    // Hexagon_S2_tableidxh_goodsyntax
    O << " = tableidxh("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 312:
    // Hexagon_S2_tableidxw_goodsyntax
    O << " = tableidxw("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 313:
    // Hexagon_S2_vspliceib, Hexagon_S2_vsplicerb, VSPLICE_rrp
    O << " = vspliceb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 314:
    // JMPR_cNotPt, JMPR_cPt
    O << ") jumpr r31"; 
    return;
    break;
  case 315:
    // JMPR_cdnNotPnt, JMPR_cdnPnt
    O << ".new) jumpr:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 316:
    // JMPR_cdnNotPt_V3, JMPR_cdnPt_V3
    O << ".new) jumpr:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 317:
    // JMP_EQriNotPnt_ie_nv_V4, JMP_EQriNotPnt_nv_V4, JMP_EQriNotPntneg_ie_nv...
    O << ".new, #"; 
    break;
  case 318:
    // JMP_EQrrNotPnt_ie_nv_V4, JMP_EQrrNotPnt_nv_V4, JMP_EQrrNotPt_ie_nv_V4,...
    O << ".new, "; 
    printOperand(MI, 1, O); 
    break;
  case 319:
    // JMP_GTUrrdnNotPnt_ie_nv_V4, JMP_GTUrrdnNotPnt_nv_V4, JMP_GTUrrdnNotPt_...
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 320:
    // JMP_cdnNotPnt, JMP_cdnPnt
    O << ".new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 321:
    // JMP_cdnNotPt, JMP_cdnPt
    O << ".new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 322:
    // LDb_GP, LDrib_GP
    O << " = memb(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 323:
    // LDb_GP_V4, LDrib_GP_V4
    O << "=memb(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 324:
    // LDd_GP, LDrid_GP
    O << " = memd(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 325:
    // LDd_GP_V4, LDrid_GP_V4
    O << "=memd(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 326:
    // LDh_GP, LDrih_GP
    O << " = memh(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 327:
    // LDh_GP_V4, LDrih_GP_V4
    O << "=memh(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 328:
    // LDrib, LDrib_abs_set_V4, LDrib_abs_setimm_V4, LDrib_ind_lo_V4, LDrib_i...
    O << " = memb("; 
    break;
  case 329:
    // LDrib_abs_V4, LDrib_imm_abs_V4
    O << " = memb(##"; 
    break;
  case 330:
    // LDrid_abs_V4
    O << " = memd(##"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 331:
    // LDrid_ind_lo_V4
    O << "=memd("; 
    printOperand(MI, 1, O); 
    O << "<<#"; 
    printImmOperand(MI, 2, O); 
    O << "+##"; 
    printGlobalOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 332:
    // LDrih, LDrih_abs_set_V4, LDrih_abs_setimm_V4, LDrih_ind_lo_V4, LDrih_i...
    O << " = memh("; 
    break;
  case 333:
    // LDrih_abs_V4, LDrih_imm_abs_V4
    O << " = memh(##"; 
    break;
  case 334:
    // LDriub, LDriub_abs_set_V4, LDriub_abs_setimm_V4, LDriub_ind_lo_V4, LDr...
    O << " = memub("; 
    break;
  case 335:
    // LDriub_GP, LDub_GP
    O << " = memub(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 336:
    // LDriub_GP_V4, LDub_GP_V4
    O << "=memub(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 337:
    // LDriub_abs_V4, LDriub_imm_abs_V4
    O << " = memub(##"; 
    break;
  case 338:
    // LDriuh, LDriuh_abs_set_V4, LDriuh_abs_setimm_V4, LDriuh_ind_lo_V4, LDr...
    O << " = memuh("; 
    break;
  case 339:
    // LDriuh_GP, LDuh_GP
    O << " = memuh(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 340:
    // LDriuh_GP_V4, LDuh_GP_V4
    O << "=memuh(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 341:
    // LDriuh_abs_V4, LDriuh_imm_abs_V4
    O << " = memuh(##"; 
    break;
  case 342:
    // LDriw, LDriw_abs_set_V4, LDriw_abs_setimm_V4, LDriw_f, LDriw_ind_lo_V4...
    O << " = memw("; 
    break;
  case 343:
    // LDriw_GP, LDw_GP
    O << " = memw(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 344:
    // LDriw_GP_V4, LDw_GP_V4
    O << "=memw(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 345:
    // LDriw_abs_V4, LDriw_imm_abs_V4
    O << " = memw(##"; 
    break;
  case 346:
    // LO, LO_jt, LO_label, LOi
    O << ".l = #LO("; 
    break;
  case 347:
    // LOOP0_i
    O << ", #"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 348:
    // LSLd_rr_xor_V4
    O << " ^= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 349:
    // LSLi_V4
    O << " = lsl(#"; 
    printImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 350:
    // MEMb_ADDi_MEM_V4, MEMb_ADDr_MEM_V4, MEMh_ADDi_MEM_V4, MEMh_ADDr_MEM_V4...
    O << ") += "; 
    break;
  case 351:
    // MEMb_ADDi_indexed_MEM_V4, MEMb_ADDr_indexed_MEM_V4, MEMb_ANDr_indexed_...
    O << "+#"; 
    break;
  case 352:
    // MEMb_ANDr_MEM_V4, MEMh_ANDr_MEM_V4, MEMw_ANDr_MEM_V4
    O << ") &= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 353:
    // MEMb_ORr_MEM_V4, MEMh_ORr_MEM_V4, MEMw_ORr_MEM_V4
    O << ") |= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 354:
    // MEMb_SUBi_MEM_V4, MEMb_SUBr_MEM_V4, MEMh_SUBi_MEM_V4, MEMh_SUBr_MEM_V4...
    O << ") -= "; 
    break;
  case 355:
    // MPYI_rin
    O << " =- mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 356:
    // MPYI_riu
    O << " =+ mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 357:
    // NTSTBIT_ri, NTSTBIT_rr
    O << " = !tstbit("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 358:
    // ORi_ASLri_V4, ORi_LSRri_V4
    O << " = or(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 359:
    // POST_STbri, POST_STbri_nv_V4, POST_STdri, POST_SThri, POST_SThri_nv_V4...
    O << "++#"; 
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 360:
    // POST_STbri_cNotPt, POST_STbri_cNotPt_nv_V4, POST_STbri_cPt, POST_STbri...
    O << ") memb("; 
    break;
  case 361:
    // POST_STbri_cdnNotPt_V4, POST_STbri_cdnNotPt_nv_V4, POST_STbri_cdnPt_V4...
    O << ".new) memb("; 
    break;
  case 362:
    // POST_STdri_cNotPt, POST_STdri_cPt, STrid_cNotPt, STrid_cPt, STrid_inde...
    O << ") memd("; 
    break;
  case 363:
    // POST_STdri_cdnNotPt_V4, POST_STdri_cdnPt_V4, STrid_cdnNotPt_V4, STrid_...
    O << ".new) memd("; 
    break;
  case 364:
    // POST_SThri_cNotPt, POST_SThri_cNotPt_nv_V4, POST_SThri_cPt, POST_SThri...
    O << ") memh("; 
    break;
  case 365:
    // POST_SThri_cdnNotPt_V4, POST_SThri_cdnNotPt_nv_V4, POST_SThri_cdnPt_V4...
    O << ".new) memh("; 
    break;
  case 366:
    // POST_STwri_cNotPt, POST_STwri_cNotPt_nv_V4, POST_STwri_cPt, POST_STwri...
    O << ") memw("; 
    break;
  case 367:
    // POST_STwri_cdnNotPt_V4, POST_STwri_cdnNotPt_nv_V4, POST_STwri_cdnPt_V4...
    O << ".new) memw("; 
    break;
  case 368:
    // RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    O << " // Restore_and_dealloc_before_tailcall"; 
    return;
    break;
  case 369:
    // RESTORE_DEALLOC_RET_JMP_V4
    O << " // Restore_and_dealloc_return"; 
    return;
    break;
  case 370:
    // SAVE_REGISTERS_CALL_V4
    O << " // Save_calle_saved_registers"; 
    return;
    break;
  case 371:
    // STb_GP, STb_GP_V4, STb_GP_nv_V4, STd_GP, STd_GP_V4, STh_GP, STh_GP_V4,...
    O << ") = "; 
    break;
  case 372:
    // STb_GP_cNotPt_V4, STb_GP_cNotPt_nv_V4, STb_GP_cPt_V4, STb_GP_cPt_nv_V4...
    O << ") memb(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 373:
    // STb_GP_cdnNotPt_V4, STb_GP_cdnNotPt_nv_V4, STb_GP_cdnPt_V4, STb_GP_cdn...
    O << ".new) memb(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 374:
    // STd_GP_cNotPt_V4, STd_GP_cPt_V4, STrid_GP_cNotPt_V4, STrid_GP_cPt_V4, ...
    O << ") memd(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 375:
    // STd_GP_cdnNotPt_V4, STd_GP_cdnPt_V4, STrid_GP_cdnNotPt_V4, STrid_GP_cd...
    O << ".new) memd(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 376:
    // STh_GP_cNotPt_V4, STh_GP_cNotPt_nv_V4, STh_GP_cPt_V4, STh_GP_cPt_nv_V4...
    O << ") memh(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 377:
    // STh_GP_cdnNotPt_V4, STh_GP_cdnNotPt_nv_V4, STh_GP_cdnPt_V4, STh_GP_cdn...
    O << ".new) memh(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 378:
    // STrib_GP, STrib_GP_V4, STrib_GP_nv_V4, STrib_indexed_shl_V4, STrib_ind...
    O << '+'; 
    break;
  case 379:
    // STrib_abs_set_V4, STrib_abs_setimm_V4, STrid_abs_set_V4, STrid_abs_set...
    O << "=##"; 
    break;
  case 380:
    // STrib_imm_abs_cNotPt_V4, STrib_imm_abs_cNotPt_nv_V4, STrib_imm_abs_cPt...
    O << ")memb(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 381:
    // STrib_imm_abs_cdnNotPt_V4, STrib_imm_abs_cdnNotPt_nv_V4, STrib_imm_abs...
    O << ".new)memb(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 382:
    // STrib_ind_lo_V4, STrib_shl_V4, STrib_shl_nv_V4, STrid_ind_lo_V4, STrid...
    O << "<<#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 383:
    // STrih_imm_abs_cNotPt_V4, STrih_imm_abs_cNotPt_nv_V4, STrih_imm_abs_cPt...
    O << ")memh(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 384:
    // STrih_imm_abs_cdnNotPt_V4, STrih_imm_abs_cdnNotPt_nv_V4, STrih_imm_abs...
    O << ".new)memh(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 385:
    // STriw_GP_cNotPt_V4, STriw_GP_cNotPt_nv_V4, STriw_GP_cPt_V4, STriw_GP_c...
    O << ") memw(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 386:
    // STriw_GP_cdnNotPt_V4, STriw_GP_cdnNotPt_nv_V4, STriw_GP_cdnPt_V4, STri...
    O << ".new) memw(##"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 387:
    // STriw_imm_abs_cNotPt_V4, STriw_imm_abs_cNotPt_nv_V4, STriw_imm_abs_cPt...
    O << ")memw(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 388:
    // STriw_imm_abs_cdnNotPt_V4, STriw_imm_abs_cdnNotPt_nv_V4, STriw_imm_abs...
    O << ".new)memw(##"; 
    printImmOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 389:
    // TCRETURNR, TCRETURNtext, TCRETURNtg
    O << " // TAILCALL"; 
    return;
    break;
  case 390:
    // TFRI_V4, TFRI_f
    O << " = ##"; 
    break;
  }


  // Fragment 2 encoded into 7 bits for 87 unique commands.
  switch ((Bits >> 21) & 127) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_ri, ADD_rr, ADDr_ADDri_V4, ADDr_MPYir_V4, ADDr_MPYri_V4,...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cNotP...
    O << " = add("; 
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADDi_ASLri_V4, ANDi_ASLri_V4, ORi_ASLri_V4
    O << ", asl("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 3:
    // ADDi_LSRri_V4, ANDi_LSRri_V4, ORi_LSRri_V4
    O << ", lsr("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 4:
    // ADDi_MPYri_V4, ADDi_MPYrr_V4
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 5:
    // ADDri_acc, AND_ri, ASL, ASL_ADD_ri, ASL_ADDd_ri, ASL_AND_ri, ASL_ANDd_...
    O << ", #"; 
    break;
  case 6:
    // ADDrr_acc, AND_pp, AND_rr, AND_rr64, ANDr_ANDrr_V4, ASL_ADD_rr, ASL_AD...
    O << ", "; 
    break;
  case 7:
    // AND_pnotp, HEXAGON_C2_andn, HEXAGON_C2_orn
    O << ", !"; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // AND_rr_cNotPt, AND_rr_cPt, AND_rr_cdnNotPt, AND_rr_cdnPt
    O << " = and("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 9:
    // ANDd_NOTd_V4, ANDr_ANDr_NOTr_V4, HEXAGON_M4_and_andn, HEXAGON_M4_or_an...
    O << ", ~"; 
    break;
  case 10:
    // ARGEXTEND, HEXAGON_A2_tfr, HEXAGON_A2_tfrp, HEXAGON_C2_pxfer_map, HEXA...
    return;
    break;
  case 11:
    // ASLH_cNotPt_V4, ASLH_cPt_V4, ASLH_cdnNotPt_V4, ASLH_cdnPt_V4
    O << " = aslh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // ASRH_cNotPt_V4, ASRH_cPt_V4, ASRH_cdnNotPt_V4, ASRH_cdnPt_V4
    O << " = asrh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // CMPGEUri, CMPGEri
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 14:
    // COMBINE_Ii, COMBINE_Ir_V4, STrib_indexed, STrib_indexed_nv_V4, STrid_i...
    printExtOperand(MI, 1, O); 
    break;
  case 15:
    // COMBINE_hh, COMBINE_hl, HEXAGON_A2_combine_hh, HEXAGON_A2_combine_hl, ...
    O << ".H, "; 
    break;
  case 16:
    // COMBINE_iI_V4, HEXAGON_A2_combineii, HEXAGON_A2_subri, HEXAGON_A2_tfrp...
    printImmOperand(MI, 1, O); 
    break;
  case 17:
    // COMBINE_lh, COMBINE_ll, HEXAGON_A2_combine_lh, HEXAGON_A2_combine_ll, ...
    O << ".L, "; 
    break;
  case 18:
    // COMBINE_rr_cNotPt, COMBINE_rr_cPt, COMBINE_rr_cdnNotPt, COMBINE_rr_cdn...
    O << " = combine("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 19:
    // CONST32, CONST32GP_set, CONST32_set, FCONST32_nsdata, HI, LDrib_abs_V4...
    printGlobalOperand(MI, 1, O); 
    break;
  case 20:
    // CONST32_set_jt, HI_jt, LO_jt
    printJumpTable(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 21:
    // CONVERT_df2d, CONVERT_df2ud, CONVERT_df2uw, CONVERT_df2w, CONVERT_sf2d...
    O << "):chop"; 
    return;
    break;
  case 22:
    // CONVERT_df2d_nchop, CONVERT_df2ud_nchop, CONVERT_df2uw_nchop, CONVERT_...
    O << ')'; 
    return;
    break;
  case 23:
    // FMADD_dp, FMADD_sp, HEXAGON_F2_dffma_sc, HEXAGON_F2_sffma_sc, HEXAGON_...
    printOperand(MI, 2, O); 
    break;
  case 24:
    // HEXAGON_A2_abssat, HEXAGON_A2_negsat, HEXAGON_A2_svaddhs, HEXAGON_A2_s...
    O << "):sat"; 
    return;
    break;
  case 25:
    // HEXAGON_A2_svavghs, HEXAGON_A2_vavghr, HEXAGON_A2_vavgubr, HEXAGON_A2_...
    O << "):rnd"; 
    return;
    break;
  case 26:
    // HEXAGON_A2_vavghcr, HEXAGON_A2_vavgwcr
    O << "):crnd"; 
    return;
    break;
  case 27:
    // HEXAGON_A2_vnavghcr, HEXAGON_A2_vnavgwcr
    O << "):crnd:sat"; 
    return;
    break;
  case 28:
    // HEXAGON_A2_vnavghr, HEXAGON_A2_vnavgwr, HEXAGON_M2_cmpyrs_s0, HEXAGON_...
    O << "):rnd:sat"; 
    return;
    break;
  case 29:
    // HEXAGON_C2_cmpgei, HEXAGON_C2_cmpgeui, MEMb_ADDi_MEM_V4, MEMb_SUBi_MEM...
    printImmOperand(MI, 2, O); 
    break;
  case 30:
    // HEXAGON_F2_dffms_lib, HEXAGON_F2_sffms_lib
    O << "):lib"; 
    return;
    break;
  case 31:
    // HEXAGON_F2_dfimm_n, HEXAGON_F2_sfimm_n
    O << "):neg"; 
    return;
    break;
  case 32:
    // HEXAGON_F2_dfimm_p, HEXAGON_F2_sfimm_p
    O << "):pos"; 
    return;
    break;
  case 33:
    // HEXAGON_M2_cmacs_s1, HEXAGON_M2_cmpys_s1, HEXAGON_M2_cnacs_s1, HEXAGON...
    O << "):<<1:sat"; 
    return;
    break;
  case 34:
    // HEXAGON_M2_cmacsc_s0, HEXAGON_M2_cmpysc_s0, HEXAGON_M2_cnacsc_s0
    O << "*):sat"; 
    return;
    break;
  case 35:
    // HEXAGON_M2_cmacsc_s1, HEXAGON_M2_cmpysc_s1, HEXAGON_M2_cnacsc_s1
    O << "*):<<1:sat"; 
    return;
    break;
  case 36:
    // HEXAGON_M2_cmpyrs_s1, HEXAGON_M2_mmachs_rs1, HEXAGON_M2_mmacls_rs1, HE...
    O << "):<<1:rnd:sat"; 
    return;
    break;
  case 37:
    // HEXAGON_M2_cmpyrsc_s0
    O << "*):rnd:sat"; 
    return;
    break;
  case 38:
    // HEXAGON_M2_cmpyrsc_s1
    O << "*):<<1:rnd:sat"; 
    return;
    break;
  case 39:
    // HEXAGON_M2_macsin
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 40:
    // HEXAGON_M2_vrcmaci_s0c, HEXAGON_M2_vrcmacr_s0c, HEXAGON_M2_vrcmpyi_s0c...
    O << "*)"; 
    return;
    break;
  case 41:
    // HEXAGON_S4_or_andix, Hexagon_C4_and_and, Hexagon_C4_and_andn, Hexagon_...
    O << ", and("; 
    printOperand(MI, 2, O); 
    break;
  case 42:
    // Hexagon_C4_and_or, Hexagon_C4_and_orn, Hexagon_C4_or_or, Hexagon_C4_or...
    O << ", or("; 
    printOperand(MI, 2, O); 
    break;
  case 43:
    // JMP_EQriNotPntneg_ie_nv_V4, JMP_EQriNotPntneg_nv_V4, JMP_EQriNotPtneg_...
    printNOneImmOperand(MI, 1, O); 
    break;
  case 44:
    // JMP_EQrrNotPnt_ie_nv_V4, JMP_EQrrNotPnt_nv_V4, JMP_EQrrPnt_ie_nv_V4, J...
    O << ")) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 45:
    // JMP_EQrrNotPt_ie_nv_V4, JMP_EQrrNotPt_nv_V4, JMP_EQrrPt_ie_nv_V4, JMP_...
    O << ")) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 46:
    // JMP_GTUrrdnNotPnt_ie_nv_V4, JMP_GTUrrdnNotPnt_nv_V4, JMP_GTUrrdnPnt_ie...
    O << ".new)) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 47:
    // JMP_GTUrrdnNotPt_ie_nv_V4, JMP_GTUrrdnNotPt_nv_V4, JMP_GTUrrdnPt_ie_nv...
    O << ".new)) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 48:
    // LDb_GP_cNotPt_V4, LDb_GP_cPt_V4, LDb_GP_cdnNotPt_V4, LDb_GP_cdnPt_V4, ...
    O << "=memb(##"; 
    printGlobalOperand(MI, 2, O); 
    break;
  case 49:
    // LDd_GP_cNotPt_V4, LDd_GP_cPt_V4, LDd_GP_cdnNotPt_V4, LDd_GP_cdnPt_V4, ...
    O << "=memd(##"; 
    printGlobalOperand(MI, 2, O); 
    break;
  case 50:
    // LDh_GP_cNotPt_V4, LDh_GP_cPt_V4, LDh_GP_cdnNotPt_V4, LDh_GP_cdnPt_V4, ...
    O << "=memh(##"; 
    printGlobalOperand(MI, 2, O); 
    break;
  case 51:
    // LDrib, LDrid, LDrid_f, LDrih, LDriub, LDriuh, LDriw, LDriw_f, STrib_cN...
    printMEMriOperand(MI, 1, O); 
    break;
  case 52:
    // LDrib_GP, LDrib_GP_V4, LDrid_GP, LDrid_GP_V4, LDrih_GP, LDrih_GP_V4, L...
    O << '+'; 
    printImmOperand(MI, 2, O); 
    break;
  case 53:
    // LDrib_abs_cNotPt_V4, LDrib_abs_cPt_V4, LDrib_abs_cdnNotPt_V4, LDrib_ab...
    O << " = memb(##"; 
    break;
  case 54:
    // LDrib_cNotPt, LDrib_cPt, LDrib_cdnNotPt, LDrib_cdnPt, LDrib_indexed_cN...
    O << " = memb("; 
    break;
  case 55:
    // LDrid_abs_cNotPt_V4, LDrid_abs_cPt_V4, LDrid_abs_cdnNotPt_V4, LDrid_ab...
    O << " = memd(##"; 
    printGlobalOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 56:
    // LDrid_cNotPt, LDrid_cPt, LDrid_cdnNotPt, LDrid_cdnPt, LDrid_indexed_cN...
    O << " = memd("; 
    break;
  case 57:
    // LDrih_abs_cNotPt_V4, LDrih_abs_cPt_V4, LDrih_abs_cdnNotPt_V4, LDrih_ab...
    O << " = memh(##"; 
    break;
  case 58:
    // LDrih_cNotPt, LDrih_cPt, LDrih_cdnNotPt, LDrih_cdnPt, LDrih_indexed_cN...
    O << " = memh("; 
    break;
  case 59:
    // LDriub_GP_cNotPt_V4, LDriub_GP_cPt_V4, LDriub_GP_cdnNotPt_V4, LDriub_G...
    O << "=memub(##"; 
    printGlobalOperand(MI, 2, O); 
    break;
  case 60:
    // LDriub_abs_cNotPt_V4, LDriub_abs_cPt_V4, LDriub_abs_cdnNotPt_V4, LDriu...
    O << " = memub(##"; 
    break;
  case 61:
    // LDriub_cNotPt, LDriub_cPt, LDriub_cdnNotPt, LDriub_cdnPt, LDriub_index...
    O << " = memub("; 
    break;
  case 62:
    // LDriuh_GP_cNotPt_V4, LDriuh_GP_cPt_V4, LDriuh_GP_cdnNotPt_V4, LDriuh_G...
    O << "=memuh(##"; 
    printGlobalOperand(MI, 2, O); 
    break;
  case 63:
    // LDriuh_abs_cNotPt_V4, LDriuh_abs_cPt_V4, LDriuh_abs_cdnNotPt_V4, LDriu...
    O << " = memuh(##"; 
    break;
  case 64:
    // LDriuh_cNotPt, LDriuh_cPt, LDriuh_cdnNotPt, LDriuh_cdnPt, LDriuh_index...
    O << " = memuh("; 
    break;
  case 65:
    // LDriw_GP_cNotPt_V4, LDriw_GP_cPt_V4, LDriw_GP_cdnNotPt_V4, LDriw_GP_cd...
    O << "=memw(##"; 
    printGlobalOperand(MI, 2, O); 
    break;
  case 66:
    // LDriw_abs_cNotPt_V4, LDriw_abs_cPt_V4, LDriw_abs_cdnNotPt_V4, LDriw_ab...
    O << " = memw(##"; 
    break;
  case 67:
    // LDriw_cNotPt, LDriw_cPt, LDriw_cdnNotPt, LDriw_cdnPt, LDriw_indexed_cN...
    O << " = memw("; 
    break;
  case 68:
    // MPYI_sub_ri
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 69:
    // OR_rr_cNotPt, OR_rr_cPt, OR_rr_cdnNotPt, OR_rr_cdnPt
    O << " = or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 70:
    // POST_STbri_nv_V4, POST_SThri_nv_V4, POST_STwri_nv_V4, STrib_imm_abs_cN...
    O << ".new"; 
    return;
    break;
  case 71:
    // STb_GP_cNotPt_V4, STb_GP_cNotPt_nv_V4, STb_GP_cPt_V4, STb_GP_cPt_nv_V4...
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 72:
    // STrib_abs_set_V4, STrid_abs_set_V4, STrih_abs_set_V4, STriw_abs_set_V4
    printGlobalOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 73:
    // STrib_ind_lo_V4, STrih_ind_lo_V4, STriw_ind_lo_V4
    O << "+##"; 
    printGlobalOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 74:
    // STrib_shl_V4, STrib_shl_nv_V4, STrid_ind_lo_V4, STrid_shl_V4, STrih_sh...
    O << "+#"; 
    break;
  case 75:
    // SUB_rr_cNotPt, SUB_rr_cPt, SUB_rr_cdnNotPt, SUB_rr_cdnPt
    O << " = sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 76:
    // SXTB_cNotPt_V4, SXTB_cPt_V4, SXTB_cdnNotPt_V4, SXTB_cdnPt_V4
    O << " = sxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 77:
    // SXTH_cNotPt_V4, SXTH_cPt_V4, SXTH_cdnNotPt_V4, SXTH_cdnPt_V4
    O << " = sxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 78:
    // TFR64_cNotPt, TFR64_cPt, TFR64_cdnNotPt, TFR64_cdnPt, TFR_cNotPt, TFR_...
    O << " = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 79:
    // TFRI_cNotPt, TFRI_cPt, TFRI_cdnNotPt, TFRI_cdnPt
    O << " = #"; 
    printExtOperand(MI, 2, O); 
    return;
    break;
  case 80:
    // TFRI_cNotPt_V4, TFRI_cNotPt_f, TFRI_cPt_V4, TFRI_cPt_f, TFRI_cdnNotPt_...
    O << " = ##"; 
    break;
  case 81:
    // TFR_FI
    printFrameIndexOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 82:
    // TFR_PdFalse
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ')'; 
    return;
    break;
  case 83:
    // TFR_PdRs, TFR_RsPd
    O << "  /* Should almost never emit this. */"; 
    return;
    break;
  case 84:
    // XOR_rr_cNotPt, XOR_rr_cPt, XOR_rr_cdnNotPt, XOR_rr_cdnPt
    O << " = xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 85:
    // ZXTB_cNotPt_V4, ZXTB_cPt_V4, ZXTB_cdnNotPt_V4, ZXTB_cdnPt_V4
    O << " = zxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 86:
    // ZXTH_cNotPt_V4, ZXTH_cPt_V4, ZXTH_cdnNotPt_V4, ZXTH_cdnPt_V4
    O << " = zxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 3 encoded into 6 bits for 39 unique commands.
  switch ((Bits >> 28) & 63) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_rr, ADD_rr_cNotPt, ADD_rr_cPt, ADD_rr_cdnNotPt, ADD_rr_c...
    O << ", "; 
    break;
  case 1:
    // ADD_ri, ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADDi...
    O << ", #"; 
    break;
  case 2:
    // ADDr_ADDri_V4, Hexagon_S4_addaddi
    O << ", add("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    break;
  case 3:
    // ADDr_MPYir_V4
    O << ", mpyi(#"; 
    printImmOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 4:
    // ADDr_MPYri_V4, ADDr_MPYrr_V4
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 5:
    // ADDr_SUBri_V4, ADDri_SUBr_V4, Hexagon_S4_subaddi
    O << ", sub(#"; 
    break;
  case 6:
    // ADDri_acc, MPYI_acc_ri, ORr_ANDri2_V4, ORr_ORri_V4, SUBri_acc
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 7:
    // ADDrr_acc, ANDr_ANDr_NOTr_V4, ANDr_ANDrr_V4, ASL_ADD_rr, ASL_ADDd_rr, ...
    printOperand(MI, 3, O); 
    break;
  case 8:
    // AND_pp, AND_rr, AND_rr64, ANDd_NOTd_V4, ASL_rr, ASLd, ASR_rr, ASRd_rr,...
    printOperand(MI, 2, O); 
    break;
  case 9:
    // AND_ri, CMPEQri, CMPGTUri, CMPGTri, CMPbGTUri_V4, CMPhGTUri_V4, CMPnot...
    printExtOperand(MI, 2, O); 
    break;
  case 10:
    // ASL, ASLd_ri, ASR_ri, ASRd_ri, CLRBIT, CLRBIT_31, CMPbEQri_V4, CMPhEQr...
    printImmOperand(MI, 2, O); 
    break;
  case 11:
    // ASL_ADD_ri, ASL_ADDd_ri, ASL_AND_ri, ASL_ANDd_ri, ASL_OR_ri, ASL_ORd_r...
    printImmOperand(MI, 3, O); 
    break;
  case 12:
    // CONST32, CONST32GP_set, CONST32_Float_Real, CONST32_Int_Real, CONST32_...
    O << ')'; 
    return;
    break;
  case 13:
    // HEXAGON_A2_addh_h16_hh, HEXAGON_A2_addh_h16_hl, HEXAGON_A2_addh_h16_sa...
    O << ".H, "; 
    printOperand(MI, 2, O); 
    break;
  case 14:
    // HEXAGON_A2_addh_h16_lh, HEXAGON_A2_addh_h16_ll, HEXAGON_A2_addh_h16_sa...
    O << ".L, "; 
    printOperand(MI, 2, O); 
    break;
  case 15:
    // HEXAGON_A2_tfrpi, HEXAGON_A2_tfrsi, MEMb_ADDi_MEM_V4, MEMb_ADDr_MEM_V4...
    return;
    break;
  case 16:
    // HEXAGON_circ_ldd, POST_LDrib, POST_LDrid, POST_LDrih, POST_LDriub, POS...
    O << "++#"; 
    break;
  case 17:
    // Hexagon_C4_and_andn, Hexagon_C4_and_orn, Hexagon_C4_or_andn, Hexagon_C...
    O << ", !"; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 18:
    // JMP_EQriNotPnt_ie_nv_V4, JMP_EQriNotPnt_nv_V4, JMP_EQriNotPntneg_ie_nv...
    O << ")) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 19:
    // JMP_EQriNotPt_ie_nv_V4, JMP_EQriNotPt_nv_V4, JMP_EQriNotPtneg_ie_nv_V4...
    O << ")) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 20:
    // LDrib_GP_cNotPt_V4, LDrib_GP_cPt_V4, LDrib_GP_cdnNotPt_V4, LDrib_GP_cd...
    O << '+'; 
    break;
  case 21:
    // LDrib_abs_cNotPt_V4, LDrib_abs_cPt_V4, LDrib_abs_cdnNotPt_V4, LDrib_ab...
    printGlobalOperand(MI, 2, O); 
    break;
  case 22:
    // LDrib_abs_set_V4, LDrib_abs_setimm_V4, LDrid_abs_set_V4, LDrid_abs_set...
    O << "=##"; 
    break;
  case 23:
    // LDrib_cNotPt, LDrib_cPt, LDrib_cdnNotPt, LDrib_cdnPt, LDrid_cNotPt, LD...
    printMEMriOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 24:
    // LDrib_ind_lo_V4, LDrih_ind_lo_V4, LDriub_ind_lo_V4, LDriuh_ind_lo_V4, ...
    O << "<<#"; 
    printImmOperand(MI, 2, O); 
    break;
  case 25:
    // LDrib_indexed, LDrid_indexed, LDrid_indexed_f, LDrih_indexed, LDriub_i...
    O << "+#"; 
    break;
  case 26:
    // MEMb_ADDi_indexed_MEM_V4, MEMb_ADDr_indexed_MEM_V4, MEMb_ANDr_indexed_...
    O << ") += "; 
    break;
  case 27:
    // MEMb_ORr_indexed_MEM_V4, MEMh_ORr_indexed_MEM_V4, MEMw_ORr_indexed_MEM...
    O << ") |= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 28:
    // MEMb_SUBi_indexed_MEM_V4, MEMb_SUBr_indexed_MEM_V4, MEMh_SUBi_indexed_...
    O << ") -= "; 
    break;
  case 29:
    // MEMw_ADDi_indexed_MEM_V4
    O << ") += #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 30:
    // MEMw_ANDr_indexed_MEM_V4
    O << ") &= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 31:
    // MEMw_SUBi_indexed_MEM_V4
    O << ") -= #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 32:
    // STb_GP_cNotPt_nv_V4, STb_GP_cPt_nv_V4, STb_GP_cdnNotPt_nv_V4, STb_GP_c...
    O << ".new"; 
    return;
    break;
  case 33:
    // STrib_GP, STrib_GP_V4, STrib_GP_cNotPt_V4, STrib_GP_cNotPt_nv_V4, STri...
    O << ") = "; 
    break;
  case 34:
    // STrib_imm_V4, STrih_imm_V4, STriw_imm_V4
    O << ") = #"; 
    printExtOperand(MI, 2, O); 
    return;
    break;
  case 35:
    // STrih_offset_ext_V4, STriw_offset_ext_V4
    O << ") = ##"; 
    printGlobalOperand(MI, 2, O); 
    return;
    break;
  case 36:
    // SUBi_ASLri_V4
    O << ", asl("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 37:
    // SUBi_LSRri_V4
    O << ", lsr("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 38:
    // TFR_FI_immext_V4
    O << ", ##"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 4 encoded into 6 bits for 40 unique commands.
  switch ((Bits >> 34) & 63) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_rr, COMBINE_Ir_V4, HEXAGON_A2_add, HEXAGON_A2_addp, HEXA...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADD_ri, ADDr_SUBri_V4, ADDri_SUBr_V4, COMBINE_iI_V4, LDrib_indexed, LD...
    printExtOperand(MI, 2, O); 
    break;
  case 2:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADDr_ADDri_V...
    printExtOperand(MI, 3, O); 
    break;
  case 3:
    // ADD_rr_cNotPt, ADD_rr_cPt, ADD_rr_cdnNotPt, ADD_rr_cdnPt, ADDi_MPYrr_V...
    printOperand(MI, 3, O); 
    break;
  case 4:
    // ADDi_MPYri_V4, HEXAGON_S4_or_andix, Hexagon_S4_addaddi, LDrib_GP_cNotP...
    printImmOperand(MI, 3, O); 
    break;
  case 5:
    // ADDr_MPYri_V4, HEXAGON_C2_muxii, HEXAGON_C2_muxir, HEXAGON_S2_extractu...
    O << ", #"; 
    break;
  case 6:
    // ADDr_MPYrr_V4, HEXAGON_C2_mux, HEXAGON_C2_muxri, MUX_ir, MUX_rr
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 7:
    // ADDrr_acc, AND_pp, AND_ri, AND_rr, AND_rr64, ANDd_NOTd_V4, ANDr_ANDr_N...
    O << ')'; 
    return;
    break;
  case 8:
    // ADJDYNALLOC, COMBINE_Ii, HEXAGON_A2_addi, HEXAGON_A2_combineii, Hexago...
    printImmOperand(MI, 2, O); 
    break;
  case 9:
    // COMBINE_hh, COMBINE_lh, HEXAGON_A2_addh_l16_hl, HEXAGON_A2_combine_hh,...
    O << ".H)"; 
    return;
    break;
  case 10:
    // COMBINE_hl, COMBINE_ll, HEXAGON_A2_addh_l16_ll, HEXAGON_A2_combine_hl,...
    O << ".L)"; 
    return;
    break;
  case 11:
    // HEXAGON_A2_addh_h16_hh, HEXAGON_A2_addh_h16_lh, HEXAGON_A2_subh_h16_hh...
    O << ".H):<<16"; 
    return;
    break;
  case 12:
    // HEXAGON_A2_addh_h16_hl, HEXAGON_A2_addh_h16_ll, HEXAGON_A2_subh_h16_hl...
    O << ".L):<<16"; 
    return;
    break;
  case 13:
    // HEXAGON_A2_addh_h16_sat_hh, HEXAGON_A2_addh_h16_sat_lh, HEXAGON_A2_sub...
    O << ".H):sat:<<16"; 
    return;
    break;
  case 14:
    // HEXAGON_A2_addh_h16_sat_hl, HEXAGON_A2_addh_h16_sat_ll, HEXAGON_A2_sub...
    O << ".L):sat:<<16"; 
    return;
    break;
  case 15:
    // HEXAGON_A2_addh_l16_sat_hl, HEXAGON_A2_subh_l16_sat_hl, HEXAGON_M2_mpy...
    O << ".H):sat"; 
    return;
    break;
  case 16:
    // HEXAGON_A2_addh_l16_sat_ll, HEXAGON_A2_subh_l16_sat_ll, HEXAGON_M2_mpy...
    O << ".L):sat"; 
    return;
    break;
  case 17:
    // HEXAGON_A2_subsat, HEXAGON_A4_round_ri_sat, HEXAGON_A4_round_rr_sat, H...
    O << "):sat"; 
    return;
    break;
  case 18:
    // HEXAGON_M2_dpmpyss_rnd_s0, HEXAGON_S2_asr_i_r_rnd, HEXAGON_S5_vasrhrnd...
    O << "):rnd"; 
    return;
    break;
  case 19:
    // HEXAGON_M2_hmmpyh_rs1, HEXAGON_M2_mpy_sat_rnd_hh_s1, HEXAGON_M2_mpy_sa...
    O << ".H):<<1:rnd:sat"; 
    return;
    break;
  case 20:
    // HEXAGON_M2_hmmpyl_rs1, HEXAGON_M2_mpy_sat_rnd_hl_s1, HEXAGON_M2_mpy_sa...
    O << ".L):<<1:rnd:sat"; 
    return;
    break;
  case 21:
    // HEXAGON_M2_mpy_acc_hh_s1, HEXAGON_M2_mpy_acc_lh_s1, HEXAGON_M2_mpy_hh_...
    O << ".H):<<1"; 
    return;
    break;
  case 22:
    // HEXAGON_M2_mpy_acc_hl_s1, HEXAGON_M2_mpy_acc_ll_s1, HEXAGON_M2_mpy_hl_...
    O << ".L):<<1"; 
    return;
    break;
  case 23:
    // HEXAGON_M2_mpy_acc_sat_hh_s1, HEXAGON_M2_mpy_acc_sat_lh_s1, HEXAGON_M2...
    O << ".H):<<1:sat"; 
    return;
    break;
  case 24:
    // HEXAGON_M2_mpy_acc_sat_hl_s1, HEXAGON_M2_mpy_acc_sat_ll_s1, HEXAGON_M2...
    O << ".L):<<1:sat"; 
    return;
    break;
  case 25:
    // HEXAGON_M2_mpy_rnd_hh_s0, HEXAGON_M2_mpy_rnd_lh_s0, HEXAGON_M2_mpyd_rn...
    O << ".H):rnd"; 
    return;
    break;
  case 26:
    // HEXAGON_M2_mpy_rnd_hh_s1, HEXAGON_M2_mpy_rnd_lh_s1, HEXAGON_M2_mpyd_rn...
    O << ".H):<<1:rnd"; 
    return;
    break;
  case 27:
    // HEXAGON_M2_mpy_rnd_hl_s0, HEXAGON_M2_mpy_rnd_ll_s0, HEXAGON_M2_mpyd_rn...
    O << ".L):rnd"; 
    return;
    break;
  case 28:
    // HEXAGON_M2_mpy_rnd_hl_s1, HEXAGON_M2_mpy_rnd_ll_s1, HEXAGON_M2_mpyd_rn...
    O << ".L):<<1:rnd"; 
    return;
    break;
  case 29:
    // HEXAGON_M2_mpy_sat_rnd_hh_s0, HEXAGON_M2_mpy_sat_rnd_lh_s0
    O << ".H):rnd:sat"; 
    return;
    break;
  case 30:
    // HEXAGON_M2_mpy_sat_rnd_hl_s0, HEXAGON_M2_mpy_sat_rnd_ll_s0
    O << ".L):rnd:sat"; 
    return;
    break;
  case 31:
    // HEXAGON_circ_ldd
    printImmOperand(MI, 5, O); 
    O << ":circ("; 
    printOperand(MI, 4, O); 
    O << "))"; 
    return;
    break;
  case 32:
    // LDrib_abs_set_V4, LDrid_abs_set_V4, LDrih_abs_set_V4, LDriub_abs_set_V...
    printGlobalOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 33:
    // LDrib_ind_lo_V4, LDrih_ind_lo_V4, LDriub_ind_lo_V4, LDriuh_ind_lo_V4, ...
    O << "+##"; 
    printGlobalOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 34:
    // LDrib_indexed_cNotPt, LDrib_indexed_cPt, LDrib_indexed_cdnNotPt, LDrib...
    O << "+#"; 
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 35:
    // LDrib_indexed_shl_cNotPt_V4, LDrib_indexed_shl_cPt_V4, LDrib_indexed_s...
    O << '+'; 
    printOperand(MI, 3, O); 
    O << "<<#"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 36:
    // MAXUd_rr, MAXUw_rr, MAXd_rr, MAXw_dd, MAXw_rr, MINUd_rr, MINUw_rr, MIN...
    printOperand(MI, 1, O); 
    break;
  case 37:
    // POST_LDrib_cNotPt, POST_LDrib_cPt, POST_LDrib_cdnNotPt_V4, POST_LDrib_...
    O << "++#"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 38:
    // STrib_indexed_shl_V4, STrib_indexed_shl_nv_V4, STrib_shl_V4, STrib_shl...
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 39:
    // TFRI_cNotPt_V4, TFRI_cNotPt_f, TFRI_cPt_V4, TFRI_cPt_f, TFRI_cdnNotPt_...
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 40) & 15) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_ri, ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_c...
    O << ')'; 
    return;
    break;
  case 1:
    // ADDi_MPYri_V4, ADDi_MPYrr_V4, ADDr_ADDri_V4, ADDr_MPYrr_V4, HEXAGON_S4...
    O << "))"; 
    return;
    break;
  case 2:
    // ADDr_MPYri_V4, MUX_ri
    printExtOperand(MI, 3, O); 
    break;
  case 3:
    // ADDr_SUBri_V4, ADDri_SUBr_V4, HEXAGON_F2_dffma_sc, HEXAGON_F2_sffma_sc...
    O << ", "; 
    break;
  case 4:
    // HEXAGON_A2_addsat
    O << "):sat"; 
    return;
    break;
  case 5:
    // HEXAGON_C2_muxii, HEXAGON_C2_muxir, HEXAGON_S2_extractu, HEXAGON_S2_ex...
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 6:
    // HEXAGON_F2_dffma_lib, HEXAGON_F2_sffma_lib
    O << "):lib"; 
    return;
    break;
  case 7:
    // Hexagon_S2_insert, Hexagon_S2_insertp
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // LDrib_indexed_shl_V4, LDrid_indexed_shl_V4, LDrih_indexed_shl_V4, LDri...
    O << "<<#"; 
    printImmOperand(MI, 3, O); 
    break;
  case 9:
    // MEMb_ADDi_indexed_MEM_V4, MEMb_ADDr_indexed_MEM_V4, MEMb_ANDr_indexed_...
    return;
    break;
  case 10:
    // POST_STbri_cNotPt, POST_STbri_cNotPt_nv_V4, POST_STbri_cPt, POST_STbri...
    O << ") = "; 
    break;
  case 11:
    // STrib_GP_cNotPt_nv_V4, STrib_GP_cPt_nv_V4, STrib_GP_cdnNotPt_nv_V4, ST...
    O << ".new"; 
    return;
    break;
  case 12:
    // STrib_imm_cNotPt_V4, STrib_imm_cPt_V4, STrib_imm_cdnNotPt_V4, STrib_im...
    O << ") = #"; 
    printExtOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 6 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 44) & 7) {
  default:   // unreachable.
  case 0:
    // ADDr_MPYri_V4
    O << "))"; 
    return;
    break;
  case 1:
    // ADDr_SUBri_V4, ADDri_SUBr_V4, Hexagon_S4_subaddi, STrib_indexed_cNotPt...
    printOperand(MI, 3, O); 
    break;
  case 2:
    // HEXAGON_F2_dffma_sc, HEXAGON_F2_sffma_sc, POST_STbri_cNotPt, POST_STbr...
    printOperand(MI, 4, O); 
    break;
  case 3:
    // LDrib_indexed_shl_V4, LDrid_indexed_shl_V4, LDrih_indexed_shl_V4, LDri...
    O << ')'; 
    return;
    break;
  case 4:
    // STrib_indexed_shl_cNotPt_V4, STrib_indexed_shl_cNotPt_nv_V4, STrib_ind...
    O << ") = "; 
    printOperand(MI, 4, O); 
    break;
  }


  // Fragment 7 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 47) & 7) {
  default:   // unreachable.
  case 0:
    // ADDr_SUBri_V4, ADDri_SUBr_V4
    O << "))"; 
    return;
    break;
  case 1:
    // HEXAGON_F2_dffma_sc, HEXAGON_F2_sffma_sc
    O << "):scale"; 
    return;
    break;
  case 2:
    // Hexagon_S4_subaddi
    O << ')'; 
    return;
    break;
  case 3:
    // POST_STbri_cNotPt, POST_STbri_cPt, POST_STbri_cdnNotPt_V4, POST_STbri_...
    return;
    break;
  case 4:
    // POST_STbri_cNotPt_nv_V4, POST_STbri_cPt_nv_V4, POST_STbri_cdnNotPt_nv_...
    O << ".new"; 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *HexagonInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 64 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'r', '1', '1', ':', '1', '0', 0,
  /* 7 */ 'r', '1', '0', 0,
  /* 11 */ 'r', '2', '1', ':', '2', '0', 0,
  /* 18 */ 'r', '2', '0', 0,
  /* 22 */ 'r', '3', '1', ':', '3', '0', 0,
  /* 29 */ 'r', '3', '0', 0,
  /* 33 */ 'r', '1', ':', '0', 0,
  /* 38 */ 's', 'a', '0', 0,
  /* 42 */ 'l', 'c', '0', 0,
  /* 46 */ 'm', '0', 0,
  /* 49 */ 'p', '0', 0,
  /* 52 */ 'r', '0', 0,
  /* 55 */ 'r', '1', '1', 0,
  /* 59 */ 'r', '2', '1', 0,
  /* 63 */ 'r', '3', '1', 0,
  /* 67 */ 's', 'a', '1', 0,
  /* 71 */ 'l', 'c', '1', 0,
  /* 75 */ 'm', '1', 0,
  /* 78 */ 'p', '1', 0,
  /* 81 */ 'r', '1', 0,
  /* 84 */ 'r', '1', '3', ':', '1', '2', 0,
  /* 91 */ 'r', '1', '2', 0,
  /* 95 */ 'r', '2', '3', ':', '2', '2', 0,
  /* 102 */ 'r', '2', '2', 0,
  /* 106 */ 'r', '3', ':', '2', 0,
  /* 111 */ 'p', '2', 0,
  /* 114 */ 'r', '2', 0,
  /* 117 */ 'r', '1', '3', 0,
  /* 121 */ 'r', '2', '3', 0,
  /* 125 */ 'p', '3', 0,
  /* 128 */ 'r', '3', 0,
  /* 131 */ 'r', '1', '5', ':', '1', '4', 0,
  /* 138 */ 'r', '1', '4', 0,
  /* 142 */ 'r', '2', '5', ':', '2', '4', 0,
  /* 149 */ 'r', '2', '4', 0,
  /* 153 */ 'r', '5', ':', '4', 0,
  /* 158 */ 'r', '4', 0,
  /* 161 */ 'r', '1', '5', 0,
  /* 165 */ 'r', '2', '5', 0,
  /* 169 */ 'r', '5', 0,
  /* 172 */ 'r', '1', '7', ':', '1', '6', 0,
  /* 179 */ 'r', '1', '6', 0,
  /* 183 */ 'r', '2', '7', ':', '2', '6', 0,
  /* 190 */ 'r', '2', '6', 0,
  /* 194 */ 'r', '7', ':', '6', 0,
  /* 199 */ 'r', '6', 0,
  /* 202 */ 'r', '1', '7', 0,
  /* 206 */ 'r', '2', '7', 0,
  /* 210 */ 'r', '7', 0,
  /* 213 */ 'r', '1', '9', ':', '1', '8', 0,
  /* 220 */ 'r', '1', '8', 0,
  /* 224 */ 'r', '2', '9', ':', '2', '8', 0,
  /* 231 */ 'r', '2', '8', 0,
  /* 235 */ 'r', '9', ':', '8', 0,
  /* 240 */ 'r', '8', 0,
  /* 243 */ 'r', '1', '9', 0,
  /* 247 */ 'r', '2', '9', 0,
  /* 251 */ 'r', '9', 0,
  /* 254 */ 'p', 'c', 0,
  /* 257 */ 'f', 'p', 0,
  /* 260 */ 'g', 'p', 0,
  /* 263 */ 's', 'p', 0,
  /* 266 */ 'l', 'r', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    33, 106, 153, 194, 235, 0, 84, 131, 172, 213, 11, 95, 142, 183, 
    224, 22, 257, 260, 42, 71, 266, 46, 75, 49, 78, 111, 125, 254, 
    52, 81, 114, 128, 158, 169, 199, 210, 240, 251, 7, 55, 91, 117, 
    138, 161, 179, 202, 220, 243, 18, 59, 102, 121, 149, 165, 190, 206, 
    231, 247, 29, 63, 38, 67, 263, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool HexagonInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
