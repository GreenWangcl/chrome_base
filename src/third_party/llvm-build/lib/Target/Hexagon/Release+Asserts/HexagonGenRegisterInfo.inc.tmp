/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register Enum Values                                                 *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass HexagonMCRegisterClasses[];

namespace Hexagon {
enum {
  NoRegister,
  D0 = 1,
  D1 = 2,
  D2 = 3,
  D3 = 4,
  D4 = 5,
  D5 = 6,
  D6 = 7,
  D7 = 8,
  D8 = 9,
  D9 = 10,
  D10 = 11,
  D11 = 12,
  D12 = 13,
  D13 = 14,
  D14 = 15,
  D15 = 16,
  FP = 17,
  GP = 18,
  LC0 = 19,
  LC1 = 20,
  LR = 21,
  M0 = 22,
  M1 = 23,
  P0 = 24,
  P1 = 25,
  P2 = 26,
  P3 = 27,
  PC = 28,
  R0 = 29,
  R1 = 30,
  R2 = 31,
  R3 = 32,
  R4 = 33,
  R5 = 34,
  R6 = 35,
  R7 = 36,
  R8 = 37,
  R9 = 38,
  R10 = 39,
  R11 = 40,
  R12 = 41,
  R13 = 42,
  R14 = 43,
  R15 = 44,
  R16 = 45,
  R17 = 46,
  R18 = 47,
  R19 = 48,
  R20 = 49,
  R21 = 50,
  R22 = 51,
  R23 = 52,
  R24 = 53,
  R25 = 54,
  R26 = 55,
  R27 = 56,
  R28 = 57,
  R29 = 58,
  R30 = 59,
  R31 = 60,
  SA0 = 61,
  SA1 = 62,
  SP = 63,
  NUM_TARGET_REGS 	// 64
};
}

// Register classes
namespace Hexagon {
enum {
  IntRegsRegClassID = 0,
  CRRegsRegClassID = 1,
  PredRegsRegClassID = 2,
  DoubleRegsRegClassID = 3
  };
}

// Subregister indices
namespace Hexagon {
enum {
  NoSubRegister,
  subreg_hireg,	// 1
  subreg_loreg,	// 2
  NUM_TARGET_SUBREGS
};
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*MC Register Information                                                     *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const MCPhysReg HexagonRegDiffLists[] = {
  /* 0 */ 28, 1, 0,
  /* 3 */ 29, 1, 0,
  /* 6 */ 30, 1, 0,
  /* 9 */ 31, 1, 0,
  /* 12 */ 32, 1, 0,
  /* 15 */ 33, 1, 0,
  /* 18 */ 34, 1, 0,
  /* 21 */ 35, 1, 0,
  /* 24 */ 36, 1, 0,
  /* 27 */ 37, 1, 0,
  /* 30 */ 1, 4, 38, 1, 0,
  /* 35 */ 39, 1, 0,
  /* 38 */ 40, 1, 0,
  /* 41 */ 41, 1, 0,
  /* 44 */ 42, 1, 0,
  /* 47 */ 43, 1, 0,
  /* 50 */ 65493, 1, 0,
  /* 53 */ 65534, 1, 0,
  /* 56 */ 42, 1, 5, 0,
  /* 60 */ 65492, 5, 0,
  /* 63 */ 13, 0,
  /* 65 */ 14, 0,
  /* 67 */ 29, 0,
  /* 69 */ 65488, 43, 0,
  /* 72 */ 65535, 43, 0,
  /* 75 */ 65531, 44, 0,
  /* 78 */ 65493, 48, 0,
  /* 81 */ 65483, 0,
  /* 83 */ 65492, 0,
  /* 85 */ 65493, 0,
  /* 87 */ 65494, 0,
  /* 89 */ 65495, 0,
  /* 91 */ 65496, 0,
  /* 93 */ 65497, 0,
  /* 95 */ 65498, 0,
  /* 97 */ 65499, 0,
  /* 99 */ 65500, 0,
  /* 101 */ 65501, 0,
  /* 103 */ 65502, 0,
  /* 105 */ 65503, 0,
  /* 107 */ 65504, 0,
  /* 109 */ 65505, 0,
  /* 111 */ 65506, 0,
  /* 113 */ 65507, 0,
  /* 115 */ 65508, 0,
  /* 117 */ 65517, 0,
  /* 119 */ 65532, 0,
};

extern const uint16_t HexagonSubRegIdxLists[] = {
  /* 0 */ 2, 1, 0,
};

extern const char HexagonRegStrings[] = {
  /* 0 */ 'D', '1', '0', 0,
  /* 4 */ 'R', '1', '0', 0,
  /* 8 */ 'R', '2', '0', 0,
  /* 12 */ 'R', '3', '0', 0,
  /* 16 */ 'S', 'A', '0', 0,
  /* 20 */ 'L', 'C', '0', 0,
  /* 24 */ 'D', '0', 0,
  /* 27 */ 'M', '0', 0,
  /* 30 */ 'P', '0', 0,
  /* 33 */ 'R', '0', 0,
  /* 36 */ 'D', '1', '1', 0,
  /* 40 */ 'R', '1', '1', 0,
  /* 44 */ 'R', '2', '1', 0,
  /* 48 */ 'R', '3', '1', 0,
  /* 52 */ 'S', 'A', '1', 0,
  /* 56 */ 'L', 'C', '1', 0,
  /* 60 */ 'D', '1', 0,
  /* 63 */ 'M', '1', 0,
  /* 66 */ 'P', '1', 0,
  /* 69 */ 'R', '1', 0,
  /* 72 */ 'D', '1', '2', 0,
  /* 76 */ 'R', '1', '2', 0,
  /* 80 */ 'R', '2', '2', 0,
  /* 84 */ 'D', '2', 0,
  /* 87 */ 'P', '2', 0,
  /* 90 */ 'R', '2', 0,
  /* 93 */ 'D', '1', '3', 0,
  /* 97 */ 'R', '1', '3', 0,
  /* 101 */ 'R', '2', '3', 0,
  /* 105 */ 'D', '3', 0,
  /* 108 */ 'P', '3', 0,
  /* 111 */ 'R', '3', 0,
  /* 114 */ 'D', '1', '4', 0,
  /* 118 */ 'R', '1', '4', 0,
  /* 122 */ 'R', '2', '4', 0,
  /* 126 */ 'D', '4', 0,
  /* 129 */ 'R', '4', 0,
  /* 132 */ 'D', '1', '5', 0,
  /* 136 */ 'R', '1', '5', 0,
  /* 140 */ 'R', '2', '5', 0,
  /* 144 */ 'D', '5', 0,
  /* 147 */ 'R', '5', 0,
  /* 150 */ 'R', '1', '6', 0,
  /* 154 */ 'R', '2', '6', 0,
  /* 158 */ 'D', '6', 0,
  /* 161 */ 'R', '6', 0,
  /* 164 */ 'R', '1', '7', 0,
  /* 168 */ 'R', '2', '7', 0,
  /* 172 */ 'D', '7', 0,
  /* 175 */ 'R', '7', 0,
  /* 178 */ 'R', '1', '8', 0,
  /* 182 */ 'R', '2', '8', 0,
  /* 186 */ 'D', '8', 0,
  /* 189 */ 'R', '8', 0,
  /* 192 */ 'R', '1', '9', 0,
  /* 196 */ 'R', '2', '9', 0,
  /* 200 */ 'D', '9', 0,
  /* 203 */ 'R', '9', 0,
  /* 206 */ 'P', 'C', 0,
  /* 209 */ 'F', 'P', 0,
  /* 212 */ 'G', 'P', 0,
  /* 215 */ 'S', 'P', 0,
  /* 218 */ 'L', 'R', 0,
};

extern const MCRegisterDesc HexagonRegDesc[] = { // Descriptors
  { 3, 0, 0, 0, 0, 0 },
  { 24, 0, 0, 2, 0, 850 },
  { 60, 3, 3, 2, 0, 850 },
  { 84, 6, 6, 2, 0, 850 },
  { 105, 9, 9, 2, 0, 850 },
  { 126, 12, 12, 2, 0, 850 },
  { 144, 15, 15, 2, 0, 850 },
  { 158, 18, 18, 2, 0, 850 },
  { 172, 21, 21, 2, 0, 850 },
  { 186, 24, 24, 2, 0, 850 },
  { 200, 27, 27, 2, 0, 850 },
  { 0, 32, 32, 2, 0, 850 },
  { 36, 35, 35, 2, 0, 850 },
  { 72, 38, 38, 2, 0, 850 },
  { 93, 41, 41, 2, 0, 850 },
  { 114, 56, 44, 2, 0, 850 },
  { 132, 30, 47, 2, 0, 850 },
  { 209, 72, 2, 2, 2, 1906 },
  { 212, 2, 2, 2, 2, 1041 },
  { 20, 2, 2, 2, 2, 1041 },
  { 56, 2, 2, 2, 2, 1041 },
  { 218, 75, 2, 2, 2, 1300 },
  { 27, 2, 2, 2, 2, 1009 },
  { 63, 2, 2, 2, 2, 1009 },
  { 30, 2, 2, 2, 2, 1009 },
  { 66, 2, 2, 2, 2, 1009 },
  { 87, 2, 2, 2, 2, 1009 },
  { 108, 2, 2, 2, 2, 1009 },
  { 206, 2, 2, 2, 2, 1009 },
  { 33, 115, 2, 115, 2, 1809 },
  { 69, 113, 2, 113, 2, 1809 },
  { 90, 113, 2, 113, 2, 1809 },
  { 111, 111, 2, 111, 2, 1809 },
  { 129, 111, 2, 111, 2, 1809 },
  { 147, 109, 2, 109, 2, 1809 },
  { 161, 109, 2, 109, 2, 1809 },
  { 175, 107, 2, 107, 2, 1809 },
  { 189, 107, 2, 107, 2, 1809 },
  { 203, 105, 2, 105, 2, 1809 },
  { 4, 105, 2, 105, 2, 1809 },
  { 40, 103, 2, 103, 2, 1809 },
  { 76, 103, 2, 103, 2, 1809 },
  { 97, 101, 2, 101, 2, 1809 },
  { 118, 101, 2, 101, 2, 1809 },
  { 136, 99, 2, 99, 2, 1809 },
  { 150, 99, 2, 99, 2, 1809 },
  { 164, 97, 2, 97, 2, 1809 },
  { 178, 97, 2, 97, 2, 1809 },
  { 192, 95, 2, 95, 2, 1809 },
  { 8, 95, 2, 95, 2, 1809 },
  { 44, 93, 2, 93, 2, 1809 },
  { 80, 93, 2, 93, 2, 1809 },
  { 101, 91, 2, 91, 2, 1809 },
  { 122, 91, 2, 91, 2, 1809 },
  { 140, 89, 2, 89, 2, 1809 },
  { 154, 89, 2, 89, 2, 1809 },
  { 168, 87, 2, 87, 2, 1809 },
  { 182, 87, 2, 87, 2, 1809 },
  { 196, 78, 2, 85, 2, 1809 },
  { 12, 50, 2, 85, 2, 1809 },
  { 48, 60, 2, 83, 2, 1809 },
  { 16, 2, 2, 2, 2, 1873 },
  { 52, 2, 2, 2, 2, 1873 },
  { 215, 69, 2, 2, 2, 1072 },
};

extern const uint16_t HexagonRegUnitRoots[][2] = {
  { Hexagon::R0 },
  { Hexagon::R1 },
  { Hexagon::R2 },
  { Hexagon::R3 },
  { Hexagon::R4 },
  { Hexagon::R5 },
  { Hexagon::R6 },
  { Hexagon::R7 },
  { Hexagon::R8 },
  { Hexagon::R9 },
  { Hexagon::R10 },
  { Hexagon::R11 },
  { Hexagon::R12 },
  { Hexagon::R13 },
  { Hexagon::R14 },
  { Hexagon::R15 },
  { Hexagon::R16 },
  { Hexagon::R17 },
  { Hexagon::R18 },
  { Hexagon::R19 },
  { Hexagon::R20 },
  { Hexagon::R21 },
  { Hexagon::R22 },
  { Hexagon::R23 },
  { Hexagon::R24 },
  { Hexagon::R25 },
  { Hexagon::R26 },
  { Hexagon::R27 },
  { Hexagon::R28 },
  { Hexagon::R29, Hexagon::SP },
  { Hexagon::R30, Hexagon::FP },
  { Hexagon::R31, Hexagon::LR },
  { Hexagon::GP },
  { Hexagon::LC0 },
  { Hexagon::LC1 },
  { Hexagon::M0 },
  { Hexagon::M1 },
  { Hexagon::P0 },
  { Hexagon::P1 },
  { Hexagon::P2 },
  { Hexagon::P3 },
  { Hexagon::PC },
  { Hexagon::SA0 },
  { Hexagon::SA1 },
};

namespace {     // Register classes...
  // IntRegs Register Class...
  const uint16_t IntRegs[] = {
    Hexagon::R0, Hexagon::R1, Hexagon::R2, Hexagon::R3, Hexagon::R4, Hexagon::R5, Hexagon::R6, Hexagon::R7, Hexagon::R8, Hexagon::R9, Hexagon::R12, Hexagon::R13, Hexagon::R14, Hexagon::R15, Hexagon::R16, Hexagon::R17, Hexagon::R18, Hexagon::R19, Hexagon::R20, Hexagon::R21, Hexagon::R22, Hexagon::R23, Hexagon::R24, Hexagon::R25, Hexagon::R26, Hexagon::R27, Hexagon::R28, Hexagon::R10, Hexagon::R11, Hexagon::R29, Hexagon::R30, Hexagon::R31, 
  };

  // IntRegs Bit set.
  const uint8_t IntRegsBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 
  };

  // CRRegs Register Class...
  const uint16_t CRRegs[] = {
    Hexagon::LC0, Hexagon::LC1, Hexagon::SA0, Hexagon::SA1, Hexagon::M0, Hexagon::M1, Hexagon::PC, Hexagon::GP, 
  };

  // CRRegs Bit set.
  const uint8_t CRRegsBits[] = {
    0x00, 0x00, 0xdc, 0x10, 0x00, 0x00, 0x00, 0x60, 
  };

  // PredRegs Register Class...
  const uint16_t PredRegs[] = {
    Hexagon::P0, Hexagon::P1, Hexagon::P2, Hexagon::P3, 
  };

  // PredRegs Bit set.
  const uint8_t PredRegsBits[] = {
    0x00, 0x00, 0x00, 0x0f, 
  };

  // DoubleRegs Register Class...
  const uint16_t DoubleRegs[] = {
    Hexagon::D0, Hexagon::D1, Hexagon::D2, Hexagon::D3, Hexagon::D4, Hexagon::D6, Hexagon::D7, Hexagon::D8, Hexagon::D9, Hexagon::D10, Hexagon::D11, Hexagon::D12, Hexagon::D13, Hexagon::D5, Hexagon::D14, Hexagon::D15, 
  };

  // DoubleRegs Bit set.
  const uint8_t DoubleRegsBits[] = {
    0xfe, 0xff, 0x01, 
  };

}

extern const MCRegisterClass HexagonMCRegisterClasses[] = {
  { "IntRegs", IntRegs, IntRegsBits, 32, sizeof(IntRegsBits), Hexagon::IntRegsRegClassID, 4, 4, 1, 1 },
  { "CRRegs", CRRegs, CRRegsBits, 8, sizeof(CRRegsBits), Hexagon::CRRegsRegClassID, 4, 4, 1, 1 },
  { "PredRegs", PredRegs, PredRegsBits, 4, sizeof(PredRegsBits), Hexagon::PredRegsRegClassID, 4, 4, 1, 1 },
  { "DoubleRegs", DoubleRegs, DoubleRegsBits, 16, sizeof(DoubleRegsBits), Hexagon::DoubleRegsRegClassID, 8, 8, 1, 1 },
};

// Hexagon Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair HexagonDwarfFlavour0Dwarf2L[] = {
  { 0U, Hexagon::R0 },
  { 1U, Hexagon::R1 },
  { 2U, Hexagon::R2 },
  { 3U, Hexagon::R3 },
  { 4U, Hexagon::R4 },
  { 5U, Hexagon::R5 },
  { 6U, Hexagon::R6 },
  { 7U, Hexagon::R7 },
  { 8U, Hexagon::R8 },
  { 9U, Hexagon::R9 },
  { 10U, Hexagon::R10 },
  { 11U, Hexagon::R11 },
  { 12U, Hexagon::R12 },
  { 13U, Hexagon::R13 },
  { 14U, Hexagon::R14 },
  { 15U, Hexagon::R15 },
  { 16U, Hexagon::R16 },
  { 17U, Hexagon::R17 },
  { 18U, Hexagon::R18 },
  { 19U, Hexagon::R19 },
  { 20U, Hexagon::R20 },
  { 21U, Hexagon::R21 },
  { 22U, Hexagon::R22 },
  { 23U, Hexagon::R23 },
  { 24U, Hexagon::R24 },
  { 25U, Hexagon::R25 },
  { 26U, Hexagon::R26 },
  { 27U, Hexagon::R27 },
  { 28U, Hexagon::R28 },
  { 29U, Hexagon::SP },
  { 30U, Hexagon::R30 },
  { 31U, Hexagon::R31 },
  { 32U, Hexagon::PC },
  { 33U, Hexagon::GP },
  { 34U, Hexagon::D1 },
  { 36U, Hexagon::D2 },
  { 38U, Hexagon::D3 },
  { 40U, Hexagon::D4 },
  { 42U, Hexagon::D5 },
  { 44U, Hexagon::D6 },
  { 46U, Hexagon::D7 },
  { 48U, Hexagon::D8 },
  { 50U, Hexagon::D9 },
  { 52U, Hexagon::D10 },
  { 54U, Hexagon::D11 },
  { 56U, Hexagon::D12 },
  { 58U, Hexagon::D13 },
  { 60U, Hexagon::D14 },
  { 62U, Hexagon::D15 },
  { 63U, Hexagon::P0 },
  { 64U, Hexagon::P1 },
  { 65U, Hexagon::P2 },
  { 66U, Hexagon::P3 },
  { 67U, Hexagon::SA0 },
  { 68U, Hexagon::LC0 },
  { 69U, Hexagon::SA1 },
  { 70U, Hexagon::LC1 },
  { 71U, Hexagon::M0 },
  { 72U, Hexagon::M1 },
};
extern const unsigned HexagonDwarfFlavour0Dwarf2LSize = sizeof(HexagonDwarfFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonEHFlavour0Dwarf2L[] = {
  { 0U, Hexagon::R0 },
  { 1U, Hexagon::R1 },
  { 2U, Hexagon::R2 },
  { 3U, Hexagon::R3 },
  { 4U, Hexagon::R4 },
  { 5U, Hexagon::R5 },
  { 6U, Hexagon::R6 },
  { 7U, Hexagon::R7 },
  { 8U, Hexagon::R8 },
  { 9U, Hexagon::R9 },
  { 10U, Hexagon::R10 },
  { 11U, Hexagon::R11 },
  { 12U, Hexagon::R12 },
  { 13U, Hexagon::R13 },
  { 14U, Hexagon::R14 },
  { 15U, Hexagon::R15 },
  { 16U, Hexagon::R16 },
  { 17U, Hexagon::R17 },
  { 18U, Hexagon::R18 },
  { 19U, Hexagon::R19 },
  { 20U, Hexagon::R20 },
  { 21U, Hexagon::R21 },
  { 22U, Hexagon::R22 },
  { 23U, Hexagon::R23 },
  { 24U, Hexagon::R24 },
  { 25U, Hexagon::R25 },
  { 26U, Hexagon::R26 },
  { 27U, Hexagon::R27 },
  { 28U, Hexagon::R28 },
  { 29U, Hexagon::SP },
  { 30U, Hexagon::R30 },
  { 31U, Hexagon::R31 },
  { 32U, Hexagon::PC },
  { 33U, Hexagon::GP },
  { 34U, Hexagon::D1 },
  { 36U, Hexagon::D2 },
  { 38U, Hexagon::D3 },
  { 40U, Hexagon::D4 },
  { 42U, Hexagon::D5 },
  { 44U, Hexagon::D6 },
  { 46U, Hexagon::D7 },
  { 48U, Hexagon::D8 },
  { 50U, Hexagon::D9 },
  { 52U, Hexagon::D10 },
  { 54U, Hexagon::D11 },
  { 56U, Hexagon::D12 },
  { 58U, Hexagon::D13 },
  { 60U, Hexagon::D14 },
  { 62U, Hexagon::D15 },
  { 63U, Hexagon::P0 },
  { 64U, Hexagon::P1 },
  { 65U, Hexagon::P2 },
  { 66U, Hexagon::P3 },
  { 67U, Hexagon::SA0 },
  { 68U, Hexagon::LC0 },
  { 69U, Hexagon::SA1 },
  { 70U, Hexagon::LC1 },
  { 71U, Hexagon::M0 },
  { 72U, Hexagon::M1 },
};
extern const unsigned HexagonEHFlavour0Dwarf2LSize = sizeof(HexagonEHFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonDwarfFlavour0L2Dwarf[] = {
  { Hexagon::D0, 32U },
  { Hexagon::D1, 34U },
  { Hexagon::D2, 36U },
  { Hexagon::D3, 38U },
  { Hexagon::D4, 40U },
  { Hexagon::D5, 42U },
  { Hexagon::D6, 44U },
  { Hexagon::D7, 46U },
  { Hexagon::D8, 48U },
  { Hexagon::D9, 50U },
  { Hexagon::D10, 52U },
  { Hexagon::D11, 54U },
  { Hexagon::D12, 56U },
  { Hexagon::D13, 58U },
  { Hexagon::D14, 60U },
  { Hexagon::D15, 62U },
  { Hexagon::FP, 30U },
  { Hexagon::GP, 33U },
  { Hexagon::LC0, 68U },
  { Hexagon::LC1, 70U },
  { Hexagon::LR, 31U },
  { Hexagon::M0, 71U },
  { Hexagon::M1, 72U },
  { Hexagon::P0, 63U },
  { Hexagon::P1, 64U },
  { Hexagon::P2, 65U },
  { Hexagon::P3, 66U },
  { Hexagon::PC, 32U },
  { Hexagon::R0, 0U },
  { Hexagon::R1, 1U },
  { Hexagon::R2, 2U },
  { Hexagon::R3, 3U },
  { Hexagon::R4, 4U },
  { Hexagon::R5, 5U },
  { Hexagon::R6, 6U },
  { Hexagon::R7, 7U },
  { Hexagon::R8, 8U },
  { Hexagon::R9, 9U },
  { Hexagon::R10, 10U },
  { Hexagon::R11, 11U },
  { Hexagon::R12, 12U },
  { Hexagon::R13, 13U },
  { Hexagon::R14, 14U },
  { Hexagon::R15, 15U },
  { Hexagon::R16, 16U },
  { Hexagon::R17, 17U },
  { Hexagon::R18, 18U },
  { Hexagon::R19, 19U },
  { Hexagon::R20, 20U },
  { Hexagon::R21, 21U },
  { Hexagon::R22, 22U },
  { Hexagon::R23, 23U },
  { Hexagon::R24, 24U },
  { Hexagon::R25, 25U },
  { Hexagon::R26, 26U },
  { Hexagon::R27, 27U },
  { Hexagon::R28, 28U },
  { Hexagon::R29, 29U },
  { Hexagon::R30, 30U },
  { Hexagon::R31, 31U },
  { Hexagon::SA0, 67U },
  { Hexagon::SA1, 69U },
  { Hexagon::SP, 29U },
};
extern const unsigned HexagonDwarfFlavour0L2DwarfSize = sizeof(HexagonDwarfFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonEHFlavour0L2Dwarf[] = {
  { Hexagon::D0, 32U },
  { Hexagon::D1, 34U },
  { Hexagon::D2, 36U },
  { Hexagon::D3, 38U },
  { Hexagon::D4, 40U },
  { Hexagon::D5, 42U },
  { Hexagon::D6, 44U },
  { Hexagon::D7, 46U },
  { Hexagon::D8, 48U },
  { Hexagon::D9, 50U },
  { Hexagon::D10, 52U },
  { Hexagon::D11, 54U },
  { Hexagon::D12, 56U },
  { Hexagon::D13, 58U },
  { Hexagon::D14, 60U },
  { Hexagon::D15, 62U },
  { Hexagon::FP, 30U },
  { Hexagon::GP, 33U },
  { Hexagon::LC0, 68U },
  { Hexagon::LC1, 70U },
  { Hexagon::LR, 31U },
  { Hexagon::M0, 71U },
  { Hexagon::M1, 72U },
  { Hexagon::P0, 63U },
  { Hexagon::P1, 64U },
  { Hexagon::P2, 65U },
  { Hexagon::P3, 66U },
  { Hexagon::PC, 32U },
  { Hexagon::R0, 0U },
  { Hexagon::R1, 1U },
  { Hexagon::R2, 2U },
  { Hexagon::R3, 3U },
  { Hexagon::R4, 4U },
  { Hexagon::R5, 5U },
  { Hexagon::R6, 6U },
  { Hexagon::R7, 7U },
  { Hexagon::R8, 8U },
  { Hexagon::R9, 9U },
  { Hexagon::R10, 10U },
  { Hexagon::R11, 11U },
  { Hexagon::R12, 12U },
  { Hexagon::R13, 13U },
  { Hexagon::R14, 14U },
  { Hexagon::R15, 15U },
  { Hexagon::R16, 16U },
  { Hexagon::R17, 17U },
  { Hexagon::R18, 18U },
  { Hexagon::R19, 19U },
  { Hexagon::R20, 20U },
  { Hexagon::R21, 21U },
  { Hexagon::R22, 22U },
  { Hexagon::R23, 23U },
  { Hexagon::R24, 24U },
  { Hexagon::R25, 25U },
  { Hexagon::R26, 26U },
  { Hexagon::R27, 27U },
  { Hexagon::R28, 28U },
  { Hexagon::R29, 29U },
  { Hexagon::R30, 30U },
  { Hexagon::R31, 31U },
  { Hexagon::SA0, 67U },
  { Hexagon::SA1, 69U },
  { Hexagon::SP, 29U },
};
extern const unsigned HexagonEHFlavour0L2DwarfSize = sizeof(HexagonEHFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const uint16_t HexagonRegEncodingTable[] = {
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
};
static inline void InitHexagonMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(HexagonRegDesc, 64, RA, PC, HexagonMCRegisterClasses, 4, HexagonRegUnitRoots, 44, HexagonRegDiffLists, HexagonRegStrings, HexagonSubRegIdxLists, 3,
  HexagonRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(HexagonDwarfFlavour0Dwarf2L, HexagonDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(HexagonEHFlavour0Dwarf2L, HexagonEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(HexagonDwarfFlavour0L2Dwarf, HexagonDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(HexagonEHFlavour0L2Dwarf, HexagonEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Register Information Header Fragment                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

struct HexagonGenRegisterInfo : public TargetRegisterInfo {
  explicit HexagonGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  virtual unsigned composeSubRegIndicesImpl(unsigned, unsigned) const;
  virtual const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const;
  virtual const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const;
  virtual unsigned getRegUnitWeight(unsigned RegUnit) const;
  virtual unsigned getNumRegPressureSets() const;
  virtual const char *getRegPressureSetName(unsigned Idx) const;
  virtual unsigned getRegPressureSetLimit(unsigned Idx) const;
  virtual const int *getRegClassPressureSets(const TargetRegisterClass *RC) const;
  virtual const int *getRegUnitPressureSets(unsigned RegUnit) const;
};

namespace Hexagon { // Register classes
  extern const TargetRegisterClass IntRegsRegClass;
  extern const TargetRegisterClass CRRegsRegClass;
  extern const TargetRegisterClass PredRegsRegClass;
  extern const TargetRegisterClass DoubleRegsRegClass;
} // end of namespace Hexagon

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register and Register Classes Information                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass HexagonMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i1, MVT::Other,
  /* 2 */ MVT::i32, MVT::Other,
  /* 4 */ MVT::i32, MVT::f32, MVT::Other,
  /* 7 */ MVT::i64, MVT::f64, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "subreg_hireg", "subreg_loreg" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
  0x00000001, // subreg_hireg
  0x00000002, // subreg_loreg
 };



static const TargetRegisterClass *const NullRegClasses[] = { NULL };

static const uint32_t IntRegsSubClassMask[] = {
  0x00000001, 
  0x00000008, // subreg_hireg
  0x00000008, // subreg_loreg
};

static const uint32_t CRRegsSubClassMask[] = {
  0x00000002, 
};

static const uint32_t PredRegsSubClassMask[] = {
  0x00000004, 
};

static const uint32_t DoubleRegsSubClassMask[] = {
  0x00000008, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 1, 2, 0,
};

namespace Hexagon {   // Register class instances
  extern const TargetRegisterClass IntRegsRegClass = {
    &HexagonMCRegisterClasses[IntRegsRegClassID],
    VTLists + 4,
    IntRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass CRRegsRegClass = {
    &HexagonMCRegisterClasses[CRRegsRegClassID],
    VTLists + 2,
    CRRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass PredRegsRegClass = {
    &HexagonMCRegisterClasses[PredRegsRegClassID],
    VTLists + 0,
    PredRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass DoubleRegsRegClass = {
    &HexagonMCRegisterClasses[DoubleRegsRegClassID],
    VTLists + 7,
    DoubleRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    NullRegClasses,
    0
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &Hexagon::IntRegsRegClass,
    &Hexagon::CRRegsRegClass,
    &Hexagon::PredRegsRegClass,
    &Hexagon::DoubleRegsRegClass,
  };
}

static const TargetRegisterInfoDesc HexagonRegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
};
unsigned HexagonGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t Rows[1][2] = {
    { 0, 0, },
  };

  --IdxA; assert(IdxA < 2);
  --IdxB; assert(IdxB < 2);
  return Rows[0][IdxB];
}

const TargetRegisterClass *HexagonGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[4][2] = {
    {	// IntRegs
      0,	// subreg_hireg
      0,	// subreg_loreg
    },
    {	// CRRegs
      0,	// subreg_hireg
      0,	// subreg_loreg
    },
    {	// PredRegs
      0,	// subreg_hireg
      0,	// subreg_loreg
    },
    {	// DoubleRegs
      4,	// subreg_hireg -> DoubleRegs
      4,	// subreg_loreg -> DoubleRegs
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 2 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : 0;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &HexagonGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 32},  	// IntRegs
    {1, 8},  	// CRRegs
    {1, 4},  	// PredRegs
    {2, 32},  	// DoubleRegs
    {0, 0} };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned HexagonGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 44 && "invalid register unit");
  // All register units have unit weight.
  return 1;
}


// Get the number of dimensions of register pressure.
unsigned HexagonGenRegisterInfo::getNumRegPressureSets() const {
  return 3;
}

// Get the name of this register unit pressure set.
const char *HexagonGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "IntRegs",
    "CRRegs",
    "PredRegs",
    0 };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned HexagonGenRegisterInfo::
getRegPressureSetLimit(unsigned Idx) const {
  static const unsigned PressureLimitTable[] = {
    32,  	// 0: IntRegs
    8,  	// 1: CRRegs
    4,  	// 2: PredRegs
    0 };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
    0,  -1,  	// #0 IntRegs
    1,  -1,  	// #2 CRRegs
    2,  -1,  	// #4 PredRegs
    0,  -1,  	// #6 DoubleRegs
    -1 };

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* HexagonGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const unsigned RCSetStartTable[] = {
    0,2,4,6,0 };
  unsigned SetListStart = RCSetStartTable[RC->getID()];
  return &RCSetsTable[SetListStart];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* HexagonGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 44 && "invalid register unit");
  static const unsigned RUSetStartTable[] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,4,4,4,4,2,2,2,0 };
  unsigned SetListStart = RUSetStartTable[RegUnit];
  return &RCSetsTable[SetListStart];
}

extern const MCRegisterDesc HexagonRegDesc[];
extern const MCPhysReg HexagonRegDiffLists[];
extern const char HexagonRegStrings[];
extern const uint16_t HexagonRegUnitRoots[][2];
extern const uint16_t HexagonSubRegIdxLists[];
extern const uint16_t HexagonRegEncodingTable[];
// Hexagon Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair HexagonDwarfFlavour0Dwarf2L[];
extern const unsigned HexagonDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonEHFlavour0Dwarf2L[];
extern const unsigned HexagonEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonDwarfFlavour0L2Dwarf[];
extern const unsigned HexagonDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonEHFlavour0L2Dwarf[];
extern const unsigned HexagonEHFlavour0L2DwarfSize;

HexagonGenRegisterInfo::
HexagonGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(HexagonRegInfoDesc, RegisterClasses, RegisterClasses+4,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable) {
  InitMCRegisterInfo(HexagonRegDesc, 64, RA, PC,
                     HexagonMCRegisterClasses, 4,
                     HexagonRegUnitRoots,
                     44,
                     HexagonRegDiffLists,
                     HexagonRegStrings,
                     HexagonSubRegIdxLists,
                     3,
                     HexagonRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(HexagonDwarfFlavour0Dwarf2L, HexagonDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(HexagonEHFlavour0Dwarf2L, HexagonEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(HexagonDwarfFlavour0L2Dwarf, HexagonDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(HexagonEHFlavour0L2Dwarf, HexagonEHFlavour0L2DwarfSize, true);
    break;
  }
}



} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

