/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3685U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3678U,	// BUNDLE
    3843U,	// LIFETIME_START
    3665U,	// LIFETIME_END
    4770U,	// ADD4
    4770U,	// ADD8
    4770U,	// ADD8TLS
    4710U,	// ADDC
    4710U,	// ADDC8
    4876U,	// ADDE
    4876U,	// ADDE8
    536876093U,	// ADDI
    536876093U,	// ADDI8
    1073747005U,	// ADDI8L
    536875642U,	// ADDIC
    536875642U,	// ADDIC8
    536875054U,	// ADDICo
    1073747005U,	// ADDIL
    1610618717U,	// ADDIS
    1610618717U,	// ADDIS8
    3624U,	// ADDISdtprelHA
    3607U,	// ADDISgotTprelHA
    3579U,	// ADDIStlsgdHA
    3593U,	// ADDIStlsldHA
    3567U,	// ADDIStocHA
    3760U,	// ADDIdtprelL
    3723U,	// ADDItlsgdL
    3735U,	// ADDItlsldL
    3713U,	// ADDItocL
    33559321U,	// ADDME
    33559321U,	// ADDME8
    33559336U,	// ADDZE
    33559336U,	// ADDZE8
    74048U,	// ADJCALLSTACKDOWN
    1188179U,	// ADJCALLSTACKUP
    4835U,	// AND
    4835U,	// AND8
    4717U,	// ANDC
    4717U,	// ANDC8
    2147487890U,	// ANDISo
    2147487890U,	// ANDISo8
    2147487831U,	// ANDIo
    2147487831U,	// ANDIo8
    69341425U,	// ATOMIC_CMP_SWAP_I16
    69341403U,	// ATOMIC_CMP_SWAP_I32
    3078U,	// ATOMIC_CMP_SWAP_I64
    3480U,	// ATOMIC_CMP_SWAP_I8
    3238U,	// ATOMIC_LOAD_ADD_I16
    2875U,	// ATOMIC_LOAD_ADD_I32
    3018U,	// ATOMIC_LOAD_ADD_I64
    3419U,	// ATOMIC_LOAD_ADD_I8
    3281U,	// ATOMIC_LOAD_AND_I16
    2918U,	// ATOMIC_LOAD_AND_I32
    3140U,	// ATOMIC_LOAD_AND_I64
    3460U,	// ATOMIC_LOAD_AND_I8
    3259U,	// ATOMIC_LOAD_NAND_I16
    2896U,	// ATOMIC_LOAD_NAND_I32
    3039U,	// ATOMIC_LOAD_NAND_I64
    3439U,	// ATOMIC_LOAD_NAND_I8
    3340U,	// ATOMIC_LOAD_OR_I16
    2977U,	// ATOMIC_LOAD_OR_I32
    3120U,	// ATOMIC_LOAD_OR_I64
    3519U,	// ATOMIC_LOAD_OR_I8
    3217U,	// ATOMIC_LOAD_SUB_I16
    2854U,	// ATOMIC_LOAD_SUB_I32
    2997U,	// ATOMIC_LOAD_SUB_I64
    3385U,	// ATOMIC_LOAD_SUB_I8
    3319U,	// ATOMIC_LOAD_XOR_I16
    2956U,	// ATOMIC_LOAD_XOR_I32
    3099U,	// ATOMIC_LOAD_XOR_I64
    3500U,	// ATOMIC_LOAD_XOR_I8
    3302U,	// ATOMIC_SWAP_I16
    2939U,	// ATOMIC_SWAP_I32
    3061U,	// ATOMIC_SWAP_I64
    3551U,	// ATOMIC_SWAP_I8
    12682U,	// B
    3297042U,	// BCC
    3917U,	// BCTR
    3917U,	// BCTR8
    3902U,	// BCTRL8_Darwin
    3902U,	// BCTRL8_ELF
    3902U,	// BCTRL_Darwin
    3902U,	// BCTRL_SVR4
    15102U,	// BDNZ
    15102U,	// BDNZ8
    15077U,	// BDZ
    15077U,	// BDZ8
    70797U,	// BL8_Darwin
    70797U,	// BL8_ELF
    201869U,	// BL8_NOP_ELF
    267405U,	// BL8_NOP_ELF_TLSGD
    267405U,	// BL8_NOP_ELF_TLSLD
    86396U,	// BLA8_Darwin
    86396U,	// BLA8_ELF
    217468U,	// BLA8_NOP_ELF
    86396U,	// BLA_Darwin
    86396U,	// BLA_SVR4
    347922U,	// BLR
    70797U,	// BL_Darwin
    70797U,	// BL_SVR4
    4846U,	// CMPD
    536876107U,	// CMPDI
    4822U,	// CMPLD
    2147488835U,	// CMPLDI
    6372U,	// CMPLW
    2147488894U,	// CMPLWI
    6391U,	// CMPW
    536876166U,	// CMPWI
    33559300U,	// CNTLZD
    33560967U,	// CNTLZW
    3203U,	// CR6SET
    3189U,	// CR6UNSET
    6328U,	// CREQV
    5707U,	// CROR
    4200632U,	// CRSET
    4200022U,	// CRUNSET
    24945U,	// DCBA
    25399U,	// DCBF
    25648U,	// DCBI
    26645U,	// DCBST
    26632U,	// DCBT
    26657U,	// DCBTST
    27354U,	// DCBZ
    25803U,	// DCBZL
    4862U,	// DIVD
    6250U,	// DIVDU
    6529U,	// DIVW
    6297U,	// DIVWU
    30583U,	// DSS
    3895U,	// DSSALL
    34844U,	// DST
    34844U,	// DST64
    34857U,	// DSTST
    34857U,	// DSTST64
    34870U,	// DSTSTT
    34870U,	// DSTSTT64
    34864U,	// DSTT
    34864U,	// DSTT64
    3639U,	// DYNALLOC
    3360U,	// DYNALLOC8
    6330U,	// EQV
    6330U,	// EQV8
    33559031U,	// EXTSB
    33559031U,	// EXTSB8
    33559510U,	// EXTSH
    33559510U,	// EXTSH8
    33560871U,	// EXTSW
    33560871U,	// EXTSW_32
    33560871U,	// EXTSW_32_64
    33560190U,	// FABSD
    33560190U,	// FABSS
    4769U,	// FADD
    5851U,	// FADDS
    4769U,	// FADDrtz
    33559240U,	// FCFID
    6263U,	// FCMPUD
    6263U,	// FCMPUS
    33561322U,	// FCTIDZ
    33561348U,	// FCTIWZ
    6322U,	// FDIV
    6074U,	// FDIVS
    4775U,	// FMADD
    5858U,	// FMADDS
    33560128U,	// FMR
    4677U,	// FMSUB
    5834U,	// FMSUBS
    5304U,	// FMUL
    6000U,	// FMULS
    33560196U,	// FNABSD
    33560196U,	// FNABSS
    33559391U,	// FNEGD
    33559391U,	// FNEGS
    4782U,	// FNMADD
    5866U,	// FNMADDS
    4684U,	// FNMSUB
    5842U,	// FNMSUBS
    33560067U,	// FRSP
    5280U,	// FSELD
    5280U,	// FSELS
    33560590U,	// FSQRT
    33560462U,	// FSQRTS
    4671U,	// FSUB
    5827U,	// FSUBS
    3809U,	// GETtlsADDR
    3795U,	// GETtlsldADDR
    5286U,	// ISEL
    5286U,	// ISEL8
    105910653U,	// LA
    6298336U,	// LBZ
    6298336U,	// LBZ8
    7346336U,	// LBZU
    7346336U,	// LBZU8
    8395403U,	// LBZUX
    8395403U,	// LBZUX8
    35658440U,	// LBZX
    35658440U,	// LBZX8
    9442002U,	// LD
    35658230U,	// LDARX
    10491999U,	// LDU
    8395354U,	// LDUX
    35658173U,	// LDX
    3747U,	// LDgotTprelL
    400145U,	// LDinto_toc
    6296274U,	// LDrs
    3865U,	// LDtoc
    3833U,	// LDtocCPT
    3695U,	// LDtocJTI
    3705U,	// LDtocL
    2842U,	// LDtoc_restore
    6296246U,	// LFD
    7346250U,	// LFDU
    8395339U,	// LFDUX
    35658160U,	// LFDX
    6297337U,	// LFS
    7346302U,	// LFSU
    8395381U,	// LFSUX
    35658281U,	// LFSX
    6295927U,	// LHA
    6295927U,	// LHA8
    7346238U,	// LHAU
    139466814U,	// LHAU8
    8395318U,	// LHAUX
    8395318U,	// LHAUX8
    35658127U,	// LHAX
    35658127U,	// LHAX8
    35658244U,	// LHBRX
    6298354U,	// LHZ
    6298354U,	// LHZ8
    7346342U,	// LHZU
    7346342U,	// LHZU8
    8395410U,	// LHZUX
    8395410U,	// LHZUX8
    35658446U,	// LHZX
    35658446U,	// LHZX8
    11539541U,	// LI
    11539541U,	// LI8
    12588900U,	// LIS
    12588900U,	// LIS8
    35658139U,	// LVEBX
    35658184U,	// LVEHX
    35658411U,	// LVEWX
    35656882U,	// LVSL
    35657322U,	// LVSR
    35658400U,	// LVX
    35656894U,	// LVXL
    9441665U,	// LWA
    35658237U,	// LWARX
    8395325U,	// LWAUX
    35658133U,	// LWAX
    35658259U,	// LWBRX
    6298380U,	// LWZ
    6298380U,	// LWZ8
    7346348U,	// LWZU
    7346348U,	// LWZU8
    8395417U,	// LWZUX
    8395417U,	// LWZUX8
    35658452U,	// LWZX
    35658452U,	// LWZX8
    33559363U,	// MCRF
    71190U,	// MFCR
    71190U,	// MFCR8
    3872U,	// MFCR8pseud
    3884U,	// MFCRpseud
    71280U,	// MFCTR
    71280U,	// MFCTR8
    71411U,	// MFFS
    71220U,	// MFLR
    71220U,	// MFLR8
    13636425U,	// MFOCRF
    464483U,	// MFTB8
    530019U,	// MFVRSAVE
    71204U,	// MFVSCR
    37713U,	// MTCRF
    37713U,	// MTCRF8
    71287U,	// MTCTR
    71287U,	// MTCTR8
    41163U,	// MTFSB0
    41171U,	// MTFSB1
    15315800U,	// MTFSF
    71226U,	// MTLR
    71226U,	// MTLR8
    69633U,	// MTVRSAVE
    71212U,	// MTVSCR
    4801U,	// MULHD
    6231U,	// MULHDU
    6350U,	// MULHW
    6283U,	// MULHWU
    4815U,	// MULLD
    536876114U,	// MULLI
    6365U,	// MULLW
    3821U,	// MovePCtoLR
    3538U,	// MovePCtoLR8
    4834U,	// NAND
    4834U,	// NAND8
    33559392U,	// NEG
    33559392U,	// NEG8
    3913U,	// NOP
    5702U,	// NOR
    5702U,	// NOR8
    5703U,	// OR
    5703U,	// OR8
    4745U,	// ORC
    4745U,	// ORC8
    2147488882U,	// ORI
    2147488882U,	// ORI8
    2147489642U,	// ORIS
    2147489642U,	// ORIS8
    3773U,	// RESTORE_CR
    5265U,	// RLDCL
    2684359832U,	// RLDICL
    2684360220U,	// RLDICR
    183506009U,	// RLDIMI
    217060449U,	// RLWIMI
    3221230896U,	// RLWINM
    3221230896U,	// RLWINM8
    3221229662U,	// RLWINMo
    5432U,	// RLWNM
    3161U,	// SELECT_CC_F4
    3371U,	// SELECT_CC_F8
    3175U,	// SELECT_CC_I4
    3405U,	// SELECT_CC_I8
    3649U,	// SELECT_CC_VRRC
    4829U,	// SLD
    6386U,	// SLW
    3785U,	// SPILL_CR
    4763U,	// SRAD
    2684359734U,	// SRADI
    6336U,	// SRAW
    3221230711U,	// SRAWI
    4852U,	// SRD
    6398U,	// SRW
    6296078U,	// STB
    6296078U,	// STB8
    702532U,	// STBU
    702532U,	// STBU8
    17414724U,	// STBUX
    17414724U,	// STBUX8
    35658154U,	// STBX
    35658154U,	// STBX8
    9442041U,	// STD
    35655867U,	// STDCX
    768100U,	// STDU
    17414752U,	// STDUX
    35658178U,	// STDX
    35658178U,	// STDX_32
    9442041U,	// STD_32
    6296251U,	// STFD
    702544U,	// STFDU
    17414738U,	// STFDUX
    35658166U,	// STFDX
    35658426U,	// STFIWX
    6297342U,	// STFS
    702596U,	// STFSU
    17414780U,	// STFSUX
    35658287U,	// STFSX
    6296557U,	// STH
    6296557U,	// STH8
    35658251U,	// STHBRX
    702577U,	// STHU
    702577U,	// STHU8
    17414766U,	// STHUX
    17414766U,	// STHUX8
    35658199U,	// STHX
    35658199U,	// STHX8
    35658146U,	// STVEBX
    35658191U,	// STVEHX
    35658418U,	// STVEWX
    35658405U,	// STVX
    35656900U,	// STVXL
    6297918U,	// STW
    6297918U,	// STW8
    35658266U,	// STWBRX
    35655875U,	// STWCX
    702611U,	// STWU
    702611U,	// STWU8
    17414788U,	// STWUX
    17414788U,	// STWUX8
    35658434U,	// STWX
    35658434U,	// STWX8
    4925U,	// SUBF
    4925U,	// SUBF8
    4723U,	// SUBFC
    4723U,	// SUBFC8
    4882U,	// SUBFE
    4882U,	// SUBFE8
    536875649U,	// SUBFIC
    536875649U,	// SUBFIC8
    33559328U,	// SUBFME
    33559328U,	// SUBFME8
    33559343U,	// SUBFZE
    33559343U,	// SUBFZE8
    3860U,	// SYNC
    70026U,	// TAILB
    70026U,	// TAILB8
    86387U,	// TAILBA
    86387U,	// TAILBA8
    3917U,	// TAILBCTR
    3917U,	// TAILBCTR8
    33706340U,	// TCRETURNai
    33706247U,	// TCRETURNai8
    33690254U,	// TCRETURNdi
    33689877U,	// TCRETURNdi8
    33691145U,	// TCRETURNri
    33689891U,	// TCRETURNri8
    3908U,	// TRAP
    33558833U,	// UPDATE_VRSAVE
    6476U,	// VADDCUW
    5537U,	// VADDFP
    5790U,	// VADDSBS
    5934U,	// VADDSHS
    6100U,	// VADDSWS
    5349U,	// VADDUBM
    5818U,	// VADDUBS
    5398U,	// VADDUHM
    5962U,	// VADDUHS
    5473U,	// VADDUWM
    6127U,	// VADDUWS
    4840U,	// VAND
    4716U,	// VANDC
    4536U,	// VAVGSB
    5015U,	// VAVGSH
    6403U,	// VAVGSW
    4636U,	// VAVGUB
    5115U,	// VAVGUH
    6485U,	// VAVGUW
    250616354U,	// VCFSX
    268442146U,	// VCFSX_0
    250616423U,	// VCFUX
    268442215U,	// VCFUX_0
    5501U,	// VCMPBFP
    4199U,	// VCMPBFPo
    5600U,	// VCMPEQFP
    4220U,	// VCMPEQFPo
    4661U,	// VCMPEQUB
    4120U,	// VCMPEQUBo
    5140U,	// VCMPEQUH
    4161U,	// VCMPEQUHo
    6501U,	// VCMPEQUW
    4261U,	// VCMPEQUWo
    5554U,	// VCMPGEFP
    4209U,	// VCMPGEFPo
    5610U,	// VCMPGTFP
    4231U,	// VCMPGTFPo
    4589U,	// VCMPGTSB
    4109U,	// VCMPGTSBo
    5068U,	// VCMPGTSH
    4150U,	// VCMPGTSHo
    6429U,	// VCMPGTSW
    4250U,	// VCMPGTSWo
    4692U,	// VCMPGTUB
    4131U,	// VCMPGTUBo
    5150U,	// VCMPGTUH
    4172U,	// VCMPGTUHo
    6511U,	// VCMPGTUW
    4272U,	// VCMPGTUWo
    250615800U,	// VCTSXS
    268441592U,	// VCTSXS_0
    250615808U,	// VCTUXS
    268441600U,	// VCTUXS_0
    33560003U,	// VEXPTEFP
    33559977U,	// VLOGEFP
    5528U,	// VMADDFP
    5620U,	// VMAXFP
    4606U,	// VMAXSB
    5085U,	// VMAXSH
    6446U,	// VMAXSW
    4702U,	// VMAXUB
    5160U,	// VMAXUH
    6521U,	// VMAXUW
    5911U,	// VMHADDSHS
    5922U,	// VMHRADDSHS
    5592U,	// VMINFP
    4572U,	// VMINSB
    5051U,	// VMINSH
    6421U,	// VMINSW
    4644U,	// VMINUB
    5123U,	// VMINUH
    6493U,	// VMINUW
    5387U,	// VMLADDUHM
    4493U,	// VMRGHB
    4972U,	// VMRGHH
    6342U,	// VMRGHW
    4501U,	// VMRGLB
    4980U,	// VMRGLH
    6357U,	// VMRGLW
    5330U,	// VMSUMMBM
    5368U,	// VMSUMSHM
    5943U,	// VMSUMSHS
    5358U,	// VMSUMUBM
    5407U,	// VMSUMUHM
    5971U,	// VMSUMUHS
    4527U,	// VMULESB
    5006U,	// VMULESH
    4627U,	// VMULEUB
    5106U,	// VMULEUH
    4580U,	// VMULOSB
    5059U,	// VMULOSH
    4652U,	// VMULOUB
    5131U,	// VMULOUH
    5510U,	// VNMSUBFP
    5701U,	// VNOR
    5713U,	// VOR
    5439U,	// VPERM
    6630U,	// VPKPX
    6012U,	// VPKSHSS
    6038U,	// VPKSHUS
    6021U,	// VPKSWSS
    6056U,	// VPKSWUS
    5446U,	// VPKUHUM
    6047U,	// VPKUHUS
    5455U,	// VPKUWUM
    6065U,	// VPKUWUS
    33559996U,	// VREFP
    33559849U,	// VRFIM
    33559914U,	// VRFIN
    33560060U,	// VRFIP
    33561335U,	// VRFIZ
    4509U,	// VRLB
    4988U,	// VRLH
    6379U,	// VRLW
    33560013U,	// VRSQRTEFP
    5292U,	// VSEL
    5299U,	// VSL
    4515U,	// VSLB
    5225U,	// VSLDOI
    4994U,	// VSLH
    5489U,	// VSLO
    6385U,	// VSLW
    250614278U,	// VSPLTB
    250614757U,	// VSPLTH
    17830345U,	// VSPLTISB
    17830824U,	// VSPLTISH
    17832203U,	// VSPLTISW
    250616118U,	// VSPLTW
    5739U,	// VSR
    4486U,	// VSRAB
    4965U,	// VSRAH
    6335U,	// VSRAW
    4521U,	// VSRB
    5000U,	// VSRH
    5495U,	// VSRO
    6397U,	// VSRW
    6467U,	// VSUBCUW
    5520U,	// VSUBFP
    5781U,	// VSUBSBS
    5902U,	// VSUBSHS
    6091U,	// VSUBSWS
    5340U,	// VSUBUBM
    5809U,	// VSUBUBS
    5378U,	// VSUBUHM
    5953U,	// VSUBUHS
    5464U,	// VSUBUWM
    6118U,	// VSUBUWS
    6081U,	// VSUM2SWS
    5771U,	// VSUM4SBS
    5892U,	// VSUM4SHS
    5799U,	// VSUM4UBS
    6109U,	// VSUMSWS
    33561053U,	// VUPKHPX
    33558976U,	// VUPKHSB
    33559455U,	// VUPKHSH
    33561069U,	// VUPKLPX
    33558995U,	// VUPKLSB
    33559474U,	// VUPKLSH
    5725U,	// VXOR
    4200029U,	// V_SET0
    792843U,	// V_SETALLONES
    5720U,	// XOR
    5720U,	// XOR8
    2147488881U,	// XORI
    2147488881U,	// XORI8
    2147489641U,	// XORIS
    2147489641U,	// XORIS8
    0U
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// ADD4
    0U,	// ADD8
    1U,	// ADD8TLS
    0U,	// ADDC
    0U,	// ADDC8
    0U,	// ADDE
    0U,	// ADDE8
    0U,	// ADDI
    0U,	// ADDI8
    0U,	// ADDI8L
    0U,	// ADDIC
    0U,	// ADDIC8
    0U,	// ADDICo
    0U,	// ADDIL
    0U,	// ADDIS
    0U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIdtprelL
    0U,	// ADDItlsgdL
    0U,	// ADDItlsldL
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND
    0U,	// AND8
    0U,	// ANDC
    0U,	// ANDC8
    0U,	// ANDISo
    0U,	// ANDISo8
    0U,	// ANDIo
    0U,	// ANDIo8
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// B
    0U,	// BCC
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL8_Darwin
    0U,	// BCTRL8_ELF
    0U,	// BCTRL_Darwin
    0U,	// BCTRL_SVR4
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BL8_Darwin
    0U,	// BL8_ELF
    0U,	// BL8_NOP_ELF
    0U,	// BL8_NOP_ELF_TLSGD
    0U,	// BL8_NOP_ELF_TLSLD
    0U,	// BLA8_Darwin
    0U,	// BLA8_ELF
    0U,	// BLA8_NOP_ELF
    0U,	// BLA_Darwin
    0U,	// BLA_SVR4
    0U,	// BLR
    0U,	// BL_Darwin
    0U,	// BL_SVR4
    0U,	// CMPD
    0U,	// CMPDI
    0U,	// CMPLD
    0U,	// CMPLDI
    0U,	// CMPLW
    0U,	// CMPLWI
    0U,	// CMPW
    0U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZW
    0U,	// CR6SET
    0U,	// CR6UNSET
    0U,	// CREQV
    0U,	// CROR
    0U,	// CRSET
    0U,	// CRUNSET
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBT
    0U,	// DCBTST
    0U,	// DCBZ
    0U,	// DCBZL
    0U,	// DIVD
    0U,	// DIVDU
    0U,	// DIVW
    0U,	// DIVWU
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// EQV
    0U,	// EQV8
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSW
    0U,	// EXTSW_32
    0U,	// EXTSW_32_64
    0U,	// FABSD
    0U,	// FABSS
    0U,	// FADD
    0U,	// FADDS
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCMPUD
    0U,	// FCMPUS
    0U,	// FCTIDZ
    0U,	// FCTIWZ
    0U,	// FDIV
    0U,	// FDIVS
    2U,	// FMADD
    2U,	// FMADDS
    0U,	// FMR
    2U,	// FMSUB
    2U,	// FMSUBS
    0U,	// FMUL
    0U,	// FMULS
    0U,	// FNABSD
    0U,	// FNABSS
    0U,	// FNEGD
    0U,	// FNEGS
    2U,	// FNMADD
    2U,	// FNMADDS
    2U,	// FNMSUB
    2U,	// FNMSUBS
    0U,	// FRSP
    2U,	// FSELD
    2U,	// FSELS
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSUB
    0U,	// FSUBS
    0U,	// GETtlsADDR
    0U,	// GETtlsldADDR
    6U,	// ISEL
    6U,	// ISEL8
    0U,	// LA
    0U,	// LBZ
    0U,	// LBZ8
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    0U,	// LD
    0U,	// LDARX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    0U,	// LDgotTprelL
    0U,	// LDinto_toc
    0U,	// LDrs
    0U,	// LDtoc
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LDtoc_restore
    0U,	// LFD
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHZ
    0U,	// LHZ8
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWBRX
    0U,	// LWZ
    0U,	// LWZ8
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    0U,	// MCRF
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCR8pseud
    0U,	// MFCRpseud
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFFS
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFOCRF
    0U,	// MFTB8
    0U,	// MFVRSAVE
    0U,	// MFVSCR
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTFSB0
    0U,	// MTFSB1
    0U,	// MTFSF
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTVRSAVE
    0U,	// MTVSCR
    0U,	// MULHD
    0U,	// MULHDU
    0U,	// MULHW
    0U,	// MULHWU
    0U,	// MULLD
    0U,	// MULLI
    0U,	// MULLW
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    0U,	// NAND
    0U,	// NAND8
    0U,	// NEG
    0U,	// NEG8
    0U,	// NOP
    0U,	// NOR
    0U,	// NOR8
    0U,	// OR
    0U,	// OR8
    0U,	// ORC
    0U,	// ORC8
    0U,	// ORI
    0U,	// ORI8
    0U,	// ORIS
    0U,	// ORIS8
    0U,	// RESTORE_CR
    10U,	// RLDCL
    10U,	// RLDICL
    10U,	// RLDICR
    0U,	// RLDIMI
    0U,	// RLWIMI
    14U,	// RLWINM
    14U,	// RLWINM8
    14U,	// RLWINMo
    14U,	// RLWNM
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_VRRC
    0U,	// SLD
    0U,	// SLW
    0U,	// SPILL_CR
    0U,	// SRAD
    0U,	// SRADI
    0U,	// SRAW
    0U,	// SRAWI
    0U,	// SRD
    0U,	// SRW
    0U,	// STB
    0U,	// STB8
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    0U,	// STD
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    0U,	// STDX_32
    0U,	// STD_32
    0U,	// STFD
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    0U,	// STWBRX
    0U,	// STWCX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    0U,	// SUBF
    0U,	// SUBF8
    0U,	// SUBFC
    0U,	// SUBFC8
    0U,	// SUBFE
    0U,	// SUBFE8
    0U,	// SUBFIC
    0U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SYNC
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    0U,	// TRAP
    0U,	// UPDATE_VRSAVE
    0U,	// VADDCUW
    0U,	// VADDFP
    0U,	// VADDSBS
    0U,	// VADDSHS
    0U,	// VADDSWS
    0U,	// VADDUBM
    0U,	// VADDUBS
    0U,	// VADDUHM
    0U,	// VADDUHS
    0U,	// VADDUWM
    0U,	// VADDUWS
    0U,	// VAND
    0U,	// VANDC
    0U,	// VAVGSB
    0U,	// VAVGSH
    0U,	// VAVGSW
    0U,	// VAVGUB
    0U,	// VAVGUH
    0U,	// VAVGUW
    0U,	// VCFSX
    0U,	// VCFSX_0
    0U,	// VCFUX
    0U,	// VCFUX_0
    0U,	// VCMPBFP
    0U,	// VCMPBFPo
    0U,	// VCMPEQFP
    0U,	// VCMPEQFPo
    0U,	// VCMPEQUB
    0U,	// VCMPEQUBo
    0U,	// VCMPEQUH
    0U,	// VCMPEQUHo
    0U,	// VCMPEQUW
    0U,	// VCMPEQUWo
    0U,	// VCMPGEFP
    0U,	// VCMPGEFPo
    0U,	// VCMPGTFP
    0U,	// VCMPGTFPo
    0U,	// VCMPGTSB
    0U,	// VCMPGTSBo
    0U,	// VCMPGTSH
    0U,	// VCMPGTSHo
    0U,	// VCMPGTSW
    0U,	// VCMPGTSWo
    0U,	// VCMPGTUB
    0U,	// VCMPGTUBo
    0U,	// VCMPGTUH
    0U,	// VCMPGTUHo
    0U,	// VCMPGTUW
    0U,	// VCMPGTUWo
    0U,	// VCTSXS
    0U,	// VCTSXS_0
    0U,	// VCTUXS
    0U,	// VCTUXS_0
    0U,	// VEXPTEFP
    0U,	// VLOGEFP
    2U,	// VMADDFP
    0U,	// VMAXFP
    0U,	// VMAXSB
    0U,	// VMAXSH
    0U,	// VMAXSW
    0U,	// VMAXUB
    0U,	// VMAXUH
    0U,	// VMAXUW
    2U,	// VMHADDSHS
    2U,	// VMHRADDSHS
    0U,	// VMINFP
    0U,	// VMINSB
    0U,	// VMINSH
    0U,	// VMINSW
    0U,	// VMINUB
    0U,	// VMINUH
    0U,	// VMINUW
    2U,	// VMLADDUHM
    0U,	// VMRGHB
    0U,	// VMRGHH
    0U,	// VMRGHW
    0U,	// VMRGLB
    0U,	// VMRGLH
    0U,	// VMRGLW
    2U,	// VMSUMMBM
    2U,	// VMSUMSHM
    2U,	// VMSUMSHS
    2U,	// VMSUMUBM
    2U,	// VMSUMUHM
    2U,	// VMSUMUHS
    0U,	// VMULESB
    0U,	// VMULESH
    0U,	// VMULEUB
    0U,	// VMULEUH
    0U,	// VMULOSB
    0U,	// VMULOSH
    0U,	// VMULOUB
    0U,	// VMULOUH
    2U,	// VNMSUBFP
    0U,	// VNOR
    0U,	// VOR
    2U,	// VPERM
    0U,	// VPKPX
    0U,	// VPKSHSS
    0U,	// VPKSHUS
    0U,	// VPKSWSS
    0U,	// VPKSWUS
    0U,	// VPKUHUM
    0U,	// VPKUHUS
    0U,	// VPKUWUM
    0U,	// VPKUWUS
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    0U,	// VRLB
    0U,	// VRLH
    0U,	// VRLW
    0U,	// VRSQRTEFP
    2U,	// VSEL
    0U,	// VSL
    0U,	// VSLB
    30U,	// VSLDOI
    0U,	// VSLH
    0U,	// VSLO
    0U,	// VSLW
    0U,	// VSPLTB
    0U,	// VSPLTH
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    0U,	// VSPLTW
    0U,	// VSR
    0U,	// VSRAB
    0U,	// VSRAH
    0U,	// VSRAW
    0U,	// VSRB
    0U,	// VSRH
    0U,	// VSRO
    0U,	// VSRW
    0U,	// VSUBCUW
    0U,	// VSUBFP
    0U,	// VSUBSBS
    0U,	// VSUBSHS
    0U,	// VSUBSWS
    0U,	// VSUBUBM
    0U,	// VSUBUBS
    0U,	// VSUBUHM
    0U,	// VSUBUHS
    0U,	// VSUBUWM
    0U,	// VSUBUWS
    0U,	// VSUM2SWS
    0U,	// VSUM4SBS
    0U,	// VSUM4SHS
    0U,	// VSUM4UBS
    0U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VXOR
    0U,	// V_SET0
    0U,	// V_SETALLONES
    0U,	// XOR
    0U,	// XOR8
    0U,	// XORI
    0U,	// XORI8
    0U,	// XORIS
    0U,	// XORIS8
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 12 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 23 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 34 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 45 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 53 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 64 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 75 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 86 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 93 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 102 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 112 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 123 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 134 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 145 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 153 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 164 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 175 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 186 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 194 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 202 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 210 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 218 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 32, 0,
  /* 240 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 32, 0,
  /* 262 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 276 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 290 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 304 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 319 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 338 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 355 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 368 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 374 */ 'l', 'h', 'a', 32, 0,
  /* 379 */ 'b', 'l', 'a', 32, 0,
  /* 384 */ 'l', 'w', 'a', 32, 0,
  /* 389 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 396 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 404 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 412 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 418 */ 'v', 's', 'l', 'b', 32, 0,
  /* 424 */ 'v', 's', 'r', 'b', 32, 0,
  /* 430 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 439 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 447 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 456 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 466 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 475 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 483 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 492 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 502 */ 'e', 'x', 't', 's', 'b', 32, 0,
  /* 509 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 517 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 525 */ 's', 't', 'b', 32, 0,
  /* 530 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 539 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 547 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 555 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 564 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 574 */ 'f', 's', 'u', 'b', 32, 0,
  /* 580 */ 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 587 */ 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 595 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 605 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 613 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 619 */ 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 626 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 633 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 640 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 648 */ 'o', 'r', 'c', 32, 0,
  /* 653 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 666 */ 's', 'r', 'a', 'd', 32, 0,
  /* 672 */ 'f', 'a', 'd', 'd', 32, 0,
  /* 678 */ 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 685 */ 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 693 */ 'l', 'f', 'd', 32, 0,
  /* 698 */ 's', 't', 'f', 'd', 32, 0,
  /* 704 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 711 */ 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 718 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 725 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 732 */ 's', 'l', 'd', 32, 0,
  /* 737 */ 'n', 'a', 'n', 'd', 32, 0,
  /* 743 */ 'v', 'a', 'n', 'd', 32, 0,
  /* 749 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 755 */ 's', 'r', 'd', 32, 0,
  /* 760 */ 's', 't', 'd', 32, 0,
  /* 765 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 771 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 779 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 785 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 792 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 799 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 807 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 814 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 822 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 828 */ 's', 'u', 'b', 'f', 32, 0,
  /* 834 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 840 */ 'm', 'f', 'o', 'c', 'r', 'f', 32, 0,
  /* 848 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 855 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 862 */ 'f', 'n', 'e', 'g', 32, 0,
  /* 868 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 875 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 883 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 891 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 897 */ 'v', 's', 'l', 'h', 32, 0,
  /* 903 */ 'v', 's', 'r', 'h', 32, 0,
  /* 909 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 918 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 926 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 935 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 945 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 954 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 962 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 971 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 981 */ 'e', 'x', 't', 's', 'h', 32, 0,
  /* 988 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 996 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 1004 */ 's', 't', 'h', 32, 0,
  /* 1009 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 1018 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 1026 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 1034 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 1043 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 1053 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 1063 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 1071 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 1077 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 1084 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 1090 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 1098 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 1105 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 1112 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 1120 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 1128 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 1136 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 1142 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 1149 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 1157 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 1164 */ 'b', 'l', 32, 0,
  /* 1168 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 1175 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 1183 */ 'f', 's', 'e', 'l', 32, 0,
  /* 1189 */ 'i', 's', 'e', 'l', 32, 0,
  /* 1195 */ 'v', 's', 'e', 'l', 32, 0,
  /* 1201 */ 'l', 'v', 's', 'l', 32, 0,
  /* 1207 */ 'f', 'm', 'u', 'l', 32, 0,
  /* 1213 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 1219 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 1226 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 1233 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 1243 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 1252 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 1261 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 1271 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 1281 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 1290 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 1301 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 1310 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 1320 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 1327 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 1335 */ 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 1342 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 1349 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 1358 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 1367 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 1376 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 1385 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 1392 */ 'v', 's', 'l', 'o', 32, 0,
  /* 1398 */ 'v', 's', 'r', 'o', 32, 0,
  /* 1404 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 1413 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 1423 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 1431 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 1440 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 1448 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 1457 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 1467 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 1474 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 1484 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 1495 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 1503 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 1513 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 1523 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 1531 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 1538 */ 'f', 'r', 's', 'p', 32, 0,
  /* 1544 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 1557 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 1563 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 1571 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 1579 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 1587 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 1593 */ 'm', 't', 'l', 'r', 32, 0,
  /* 1599 */ 'f', 'm', 'r', 32, 0,
  /* 1604 */ 'v', 'n', 'o', 'r', 32, 0,
  /* 1610 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 1616 */ 'v', 'o', 'r', 32, 0,
  /* 1621 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 1628 */ 'v', 'x', 'o', 'r', 32, 0,
  /* 1634 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 1641 */ 'l', 'v', 's', 'r', 32, 0,
  /* 1647 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 1654 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 1661 */ 'f', 'a', 'b', 's', 32, 0,
  /* 1667 */ 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 1674 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 1684 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 1693 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 1702 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 1712 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 1721 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 1730 */ 'f', 's', 'u', 'b', 's', 32, 0,
  /* 1737 */ 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 1745 */ 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 1754 */ 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 1761 */ 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 1769 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 1778 */ 'm', 'f', 'f', 's', 32, 0,
  /* 1784 */ 'l', 'f', 's', 32, 0,
  /* 1789 */ 's', 't', 'f', 's', 32, 0,
  /* 1795 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 1805 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 1814 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 1825 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 1837 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 1846 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 1856 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 1865 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 1874 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 1884 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 1891 */ 'l', 'i', 's', 32, 0,
  /* 1896 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 1903 */ 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 1910 */ 'd', 's', 's', 32, 0,
  /* 1915 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 1924 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 1933 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 1941 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 1950 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 1959 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 1968 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 1977 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 1984 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 1994 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 2003 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 2012 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 2021 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 2030 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 2039 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 2047 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 2055 */ 'd', 'c', 'b', 't', 32, 0,
  /* 2061 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 2068 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 2075 */ 'd', 's', 't', 32, 0,
  /* 2080 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 2088 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 2095 */ 'd', 's', 't', 't', 32, 0,
  /* 2101 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 2109 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 2115 */ 's', 't', 'b', 'u', 32, 0,
  /* 2121 */ 'l', 'f', 'd', 'u', 32, 0,
  /* 2127 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 2134 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 2142 */ 'l', 'd', 'u', 32, 0,
  /* 2147 */ 's', 't', 'd', 'u', 32, 0,
  /* 2153 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 2160 */ 's', 't', 'h', 'u', 32, 0,
  /* 2166 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 2173 */ 'l', 'f', 's', 'u', 32, 0,
  /* 2179 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 2186 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 2194 */ 's', 't', 'w', 'u', 32, 0,
  /* 2200 */ 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 2207 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 2213 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 2219 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 2225 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 2231 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 2238 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 2245 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 2253 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 2260 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 2268 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 2275 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 2282 */ 'v', 'r', 'l', 'w', 32, 0,
  /* 2288 */ 'v', 's', 'l', 'w', 32, 0,
  /* 2294 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 2300 */ 'v', 's', 'r', 'w', 32, 0,
  /* 2306 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 2314 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 2324 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 2332 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 2342 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 2349 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 2357 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 2365 */ 's', 't', 'w', 32, 0,
  /* 2370 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 2379 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 2388 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 2396 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 2404 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 2414 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 2424 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 2432 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 2438 */ 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 2446 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 2452 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 2458 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 2465 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 2473 */ 's', 't', 'b', 'x', 32, 0,
  /* 2479 */ 'l', 'f', 'd', 'x', 32, 0,
  /* 2485 */ 's', 't', 'f', 'd', 'x', 32, 0,
  /* 2492 */ 'l', 'd', 'x', 32, 0,
  /* 2497 */ 's', 't', 'd', 'x', 32, 0,
  /* 2503 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 2510 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 2518 */ 's', 't', 'h', 'x', 32, 0,
  /* 2524 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 2533 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 2540 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 2549 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 2556 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 2563 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 2570 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 2578 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 2585 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 2593 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 2600 */ 'l', 'f', 's', 'x', 32, 0,
  /* 2606 */ 's', 't', 'f', 's', 'x', 32, 0,
  /* 2613 */ 'l', 'h', 'a', 'u', 'x', 32, 0,
  /* 2620 */ 'l', 'w', 'a', 'u', 'x', 32, 0,
  /* 2627 */ 's', 't', 'b', 'u', 'x', 32, 0,
  /* 2634 */ 'l', 'f', 'd', 'u', 'x', 32, 0,
  /* 2641 */ 's', 't', 'f', 'd', 'u', 'x', 32, 0,
  /* 2649 */ 'l', 'd', 'u', 'x', 32, 0,
  /* 2655 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 2662 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 2669 */ 's', 't', 'h', 'u', 'x', 32, 0,
  /* 2676 */ 'l', 'f', 's', 'u', 'x', 32, 0,
  /* 2683 */ 's', 't', 'f', 's', 'u', 'x', 32, 0,
  /* 2691 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 2698 */ 'l', 'b', 'z', 'u', 'x', 32, 0,
  /* 2705 */ 'l', 'h', 'z', 'u', 'x', 32, 0,
  /* 2712 */ 'l', 'w', 'z', 'u', 'x', 32, 0,
  /* 2719 */ 'l', 'v', 'x', 32, 0,
  /* 2724 */ 's', 't', 'v', 'x', 32, 0,
  /* 2730 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 2737 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 2745 */ 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 2753 */ 's', 't', 'w', 'x', 32, 0,
  /* 2759 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 2765 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 2771 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 2777 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 2783 */ 'l', 'b', 'z', 32, 0,
  /* 2788 */ 'b', 'd', 'z', 32, 0,
  /* 2793 */ 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 2801 */ 'l', 'h', 'z', 32, 0,
  /* 2806 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 2813 */ 'b', 'd', 'n', 'z', 32, 0,
  /* 2819 */ 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 2827 */ 'l', 'w', 'z', 32, 0,
  /* 2832 */ 'l', 'd', 32, '2', ',', 32, '8', '(', 0,
  /* 2841 */ 'l', 'd', 32, '2', ',', 32, '4', '0', '(', '1', ')', 0,
  /* 2853 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 2874 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 2895 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 2917 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 2938 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 2955 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 2976 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 2996 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 3017 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 3038 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 3060 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 3077 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 3098 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 3119 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 3139 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'i', '6', '4', 0,
  /* 3160 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 3174 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 3188 */ 'c', 'r', 'x', 'o', 'r', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 3202 */ 'c', 'r', 'e', 'q', 'v', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 3216 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 3237 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 3258 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 3280 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 3301 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 3318 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 3339 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 3359 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 3370 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 3384 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 3404 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 3418 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 3438 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 3459 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 3479 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 3499 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 3518 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 3537 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 3550 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'i', '8', 0,
  /* 3566 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 3578 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 3592 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 3606 */ '#', 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 3623 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 3638 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 3648 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 3664 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 3677 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3684 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3694 */ '#', 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 3704 */ '#', 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 3712 */ '#', 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 3722 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 3734 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 3746 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 3759 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 3772 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 3784 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 3794 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 3808 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 3820 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 3832 */ '#', 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 3842 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 3857 */ 'b', 0,
  /* 3859 */ 's', 'y', 'n', 'c', 0,
  /* 3864 */ '#', 'L', 'D', 't', 'o', 'c', 0,
  /* 3871 */ '#', 'M', 'F', 'C', 'R', '8', 'p', 's', 'e', 'u', 'd', 0,
  /* 3883 */ '#', 'M', 'F', 'C', 'R', 'p', 's', 'e', 'u', 'd', 0,
  /* 3894 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 3901 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 3907 */ 't', 'r', 'a', 'p', 0,
  /* 3912 */ 'n', 'o', 'p', 0,
  /* 3916 */ 'b', 'c', 't', 'r', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 12) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, ADDISdtprelHA, ADDISg...
    return;
    break;
  case 1:
    // ADD4, ADD8, ADD8TLS, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDI8L, AD...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, O); 
    break;
  case 3:
    // B, BDNZ, BDNZ8, BDZ, BDZ8
    printBranchOperand(MI, 0, O); 
    return;
    break;
  case 4:
    // BCC, BLR
    printPredicateOperand(MI, 0, O, "cc"); 
    break;
  case 5:
    // BLA8_Darwin, BLA8_ELF, BLA8_NOP_ELF, BLA_Darwin, BLA_SVR4, TAILBA, TAI...
    printAbsAddrOperand(MI, 0, O); 
    break;
  case 6:
    // DCBA, DCBF, DCBI, DCBST, DCBT, DCBTST, DCBZ, DCBZL
    printMemRegReg(MI, 0, O); 
    return;
    break;
  case 7:
    // DSS
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 8:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // MTCRF, MTCRF8
    printcrbitm(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // MTFSB0, MTFSB1
    printU5ImmOperand(MI, 0, O); 
    return;
    break;
  case 11:
    // MTFSF, STBU, STBU8, STBUX, STBUX8, STDU, STDUX, STFDU, STFDUX, STFSU, ...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  }


  // Fragment 1 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 16) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADD8TLS, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDI8L, AD...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN, BL8_Darwin, BL8_ELF, BLA8_Darwin, BLA8_ELF, BLA_Darw...
    return;
    break;
  case 2:
    // ADJCALLSTACKUP, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, BCC, TCRETUR...
    O << ' '; 
    break;
  case 3:
    // BL8_NOP_ELF, BLA8_NOP_ELF
    O << "\n\tnop"; 
    return;
    break;
  case 4:
    // BL8_NOP_ELF_TLSGD, BL8_NOP_ELF_TLSLD
    O << '('; 
    printOperand(MI, 1, O); 
    O << ")\n\tnop"; 
    return;
    break;
  case 5:
    // BLR
    O << "lr "; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 6:
    // LDinto_toc
    O << ')'; 
    return;
    break;
  case 7:
    // MFTB8
    O << ", 268"; 
    return;
    break;
  case 8:
    // MFVRSAVE
    O << ", 256"; 
    return;
    break;
  case 9:
    // MTFSF, STBUX, STBUX8, STDUX, STFDUX, STFSUX, STHUX, STHUX8, STWUX, STW...
    printOperand(MI, 2, O); 
    break;
  case 10:
    // STBU, STBU8, STFDU, STFSU, STHU, STHU8, STWU, STWU8
    printSymbolLo(MI, 2, O); 
    O << '('; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 11:
    // STDU
    printS16X4ImmOperand(MI, 2, O); 
    O << '('; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // V_SETALLONES
    O << ", -1"; 
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 20) & 31) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADD8TLS, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDI8L, AD...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADJCALLSTACKUP
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, LBZX, LBZX8, LDARX, LDX, LFD...
    printMemRegReg(MI, 1, O); 
    break;
  case 3:
    // BCC
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // CRSET, CRUNSET, V_SET0
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // LA, LHAU8
    printSymbolLo(MI, 2, O); 
    O << '('; 
    break;
  case 6:
    // LBZ, LBZ8, LDrs, LFD, LFS, LHA, LHA8, LHZ, LHZ8, LWZ, LWZ8, STB, STB8,...
    printMemRegImm(MI, 1, O); 
    return;
    break;
  case 7:
    // LBZU, LBZU8, LFDU, LFSU, LHAU, LHZU, LHZU8, LWZU, LWZU8
    printMemRegImm(MI, 2, O); 
    return;
    break;
  case 8:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, O); 
    return;
    break;
  case 9:
    // LD, LWA, STD, STD_32
    printMemRegImmShifted(MI, 1, O); 
    return;
    break;
  case 10:
    // LDU
    printMemRegImmShifted(MI, 2, O); 
    return;
    break;
  case 11:
    // LI, LI8
    printSymbolLo(MI, 1, O); 
    return;
    break;
  case 12:
    // LIS, LIS8
    printSymbolHi(MI, 1, O); 
    return;
    break;
  case 13:
    // MFOCRF
    printcrbitm(MI, 1, O); 
    return;
    break;
  case 14:
    // MTFSF
    return;
    break;
  case 15:
    // RLDIMI, RLWIMI, VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 16:
    // STBUX, STBUX8, STDUX, STFDUX, STFSUX, STHUX, STHUX8, STWUX, STWUX8
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 17:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 25) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADD8TLS, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDI8L, AD...
    O << ", "; 
    break;
  case 1:
    // ADDME, ADDME8, ADDZE, ADDZE8, CNTLZD, CNTLZW, EXTSB, EXTSB8, EXTSH, EX...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    O << ' '; 
    printOperand(MI, 3, O); 
    O << ' '; 
    printOperand(MI, 4, O); 
    return;
    break;
  case 3:
    // LA
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 4:
    // LHAU8
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 5:
    // RLDIMI
    printU6ImmOperand(MI, 3, O); 
    O << ", "; 
    printU6ImmOperand(MI, 4, O); 
    return;
    break;
  case 6:
    // RLWIMI
    printU5ImmOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    O << ", "; 
    printU5ImmOperand(MI, 5, O); 
    return;
    break;
  case 7:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 8:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    O << ", 0"; 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADD8TLS, ADDC, ADDC8, ADDE, ADDE8, AND, AND8, ANDC, ANDC8,...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, CMPDI, CMPWI, MULLI, SUBFIC, SUBFI...
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ADDI8L, ADDIL
    printSymbolLo(MI, 2, O); 
    return;
    break;
  case 3:
    // ADDIS, ADDIS8
    printSymbolHi(MI, 2, O); 
    return;
    break;
  case 4:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // RLDICL, RLDICR, SRADI
    printU6ImmOperand(MI, 2, O); 
    break;
  case 6:
    // RLWINM, RLWINM8, RLWINMo, SRAWI
    printU5ImmOperand(MI, 2, O); 
    break;
  }


  // Fragment 5 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 32) & 3) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, AND, AND8, ANDC, ANDC8, CMPD, CM...
    return;
    break;
  case 1:
    // ADD8TLS
    O << "@tls"; 
    return;
    break;
  case 2:
    // FMADD, FMADDS, FMSUB, FMSUBS, FNMADD, FNMADDS, FNMSUB, FNMSUBS, FSELD,...
    O << ", "; 
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 34) & 3) {
  default:   // unreachable.
  case 0:
    // FMADD, FMADDS, FMSUB, FMSUBS, FNMADD, FNMADDS, FNMSUB, FNMSUBS, FSELD,...
    printOperand(MI, 3, O); 
    return;
    break;
  case 1:
    // ISEL, ISEL8
    printPredicateOperand(MI, 3, O); 
    return;
    break;
  case 2:
    // RLDCL, RLDICL, RLDICR
    printU6ImmOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // RLWINM, RLWINM8, RLWINMo, RLWNM, VSLDOI
    printU5ImmOperand(MI, 3, O); 
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 36) & 1) {
    // VSLDOI
    return;
  } else {
    // RLWINM, RLWINM8, RLWINMo, RLWNM
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 176 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '*', '*', 'R', 'O', 'U', 'N', 'D', 'I', 'N', 'G', 32, 'M', 'O', 'D', 'E', '*', '*', 0,
  /* 18 */ 'f', '1', '0', 0,
  /* 22 */ 'r', '1', '0', 0,
  /* 26 */ 'v', '1', '0', 0,
  /* 30 */ 'f', '2', '0', 0,
  /* 34 */ 'r', '2', '0', 0,
  /* 38 */ 'v', '2', '0', 0,
  /* 42 */ 'f', '3', '0', 0,
  /* 46 */ 'r', '3', '0', 0,
  /* 50 */ 'v', '3', '0', 0,
  /* 54 */ 'f', '0', 0,
  /* 57 */ 'c', 'r', '0', 0,
  /* 61 */ 'v', '0', 0,
  /* 64 */ 'f', '1', '1', 0,
  /* 68 */ 'r', '1', '1', 0,
  /* 72 */ 'v', '1', '1', 0,
  /* 76 */ 'f', '2', '1', 0,
  /* 80 */ 'r', '2', '1', 0,
  /* 84 */ 'v', '2', '1', 0,
  /* 88 */ 'f', '3', '1', 0,
  /* 92 */ 'r', '3', '1', 0,
  /* 96 */ 'v', '3', '1', 0,
  /* 100 */ 'f', '1', 0,
  /* 103 */ 'c', 'r', '1', 0,
  /* 107 */ 'v', '1', 0,
  /* 110 */ 'f', '1', '2', 0,
  /* 114 */ 'r', '1', '2', 0,
  /* 118 */ 'v', '1', '2', 0,
  /* 122 */ 'f', '2', '2', 0,
  /* 126 */ 'r', '2', '2', 0,
  /* 130 */ 'v', '2', '2', 0,
  /* 134 */ 'f', '2', 0,
  /* 137 */ 'c', 'r', '2', 0,
  /* 141 */ 'v', '2', 0,
  /* 144 */ 'f', '1', '3', 0,
  /* 148 */ 'r', '1', '3', 0,
  /* 152 */ 'v', '1', '3', 0,
  /* 156 */ 'f', '2', '3', 0,
  /* 160 */ 'r', '2', '3', 0,
  /* 164 */ 'v', '2', '3', 0,
  /* 168 */ 'f', '3', 0,
  /* 171 */ 'c', 'r', '3', 0,
  /* 175 */ 'v', '3', 0,
  /* 178 */ 'f', '1', '4', 0,
  /* 182 */ 'r', '1', '4', 0,
  /* 186 */ 'v', '1', '4', 0,
  /* 190 */ 'f', '2', '4', 0,
  /* 194 */ 'r', '2', '4', 0,
  /* 198 */ 'v', '2', '4', 0,
  /* 202 */ 'f', '4', 0,
  /* 205 */ 'c', 'r', '4', 0,
  /* 209 */ 'v', '4', 0,
  /* 212 */ 'f', '1', '5', 0,
  /* 216 */ 'r', '1', '5', 0,
  /* 220 */ 'v', '1', '5', 0,
  /* 224 */ 'f', '2', '5', 0,
  /* 228 */ 'r', '2', '5', 0,
  /* 232 */ 'v', '2', '5', 0,
  /* 236 */ 'f', '5', 0,
  /* 239 */ 'c', 'r', '5', 0,
  /* 243 */ 'v', '5', 0,
  /* 246 */ 'f', '1', '6', 0,
  /* 250 */ 'r', '1', '6', 0,
  /* 254 */ 'v', '1', '6', 0,
  /* 258 */ 'f', '2', '6', 0,
  /* 262 */ 'r', '2', '6', 0,
  /* 266 */ 'v', '2', '6', 0,
  /* 270 */ 'f', '6', 0,
  /* 273 */ 'c', 'r', '6', 0,
  /* 277 */ 'v', '6', 0,
  /* 280 */ 'f', '1', '7', 0,
  /* 284 */ 'r', '1', '7', 0,
  /* 288 */ 'v', '1', '7', 0,
  /* 292 */ 'f', '2', '7', 0,
  /* 296 */ 'r', '2', '7', 0,
  /* 300 */ 'v', '2', '7', 0,
  /* 304 */ 'f', '7', 0,
  /* 307 */ 'c', 'r', '7', 0,
  /* 311 */ 'v', '7', 0,
  /* 314 */ 'f', '1', '8', 0,
  /* 318 */ 'r', '1', '8', 0,
  /* 322 */ 'v', '1', '8', 0,
  /* 326 */ 'f', '2', '8', 0,
  /* 330 */ 'r', '2', '8', 0,
  /* 334 */ 'v', '2', '8', 0,
  /* 338 */ 'f', '8', 0,
  /* 341 */ 'r', '8', 0,
  /* 344 */ 'v', '8', 0,
  /* 347 */ 'f', '1', '9', 0,
  /* 351 */ 'r', '1', '9', 0,
  /* 355 */ 'v', '1', '9', 0,
  /* 359 */ 'f', '2', '9', 0,
  /* 363 */ 'r', '2', '9', 0,
  /* 367 */ 'v', '2', '9', 0,
  /* 371 */ 'f', '9', 0,
  /* 374 */ 'r', '9', 0,
  /* 377 */ 'v', '9', 0,
  /* 380 */ 'c', 'a', 0,
  /* 383 */ 'V', 'R', 's', 'a', 'v', 'e', 0,
  /* 390 */ 'l', 'r', 0,
  /* 393 */ 'c', 't', 'r', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    380, 57, 112, 66, 20, 146, 103, 248, 214, 180, 282, 137, 19, 349, 
    316, 65, 171, 179, 145, 111, 213, 205, 315, 281, 247, 348, 239, 123, 
    77, 31, 157, 273, 259, 225, 191, 293, 307, 43, 360, 327, 89, 393, 
    393, 54, 100, 134, 168, 202, 236, 270, 304, 338, 371, 18, 64, 110, 
    144, 178, 212, 246, 280, 314, 347, 30, 76, 122, 156, 190, 224, 258, 
    292, 326, 359, 42, 88, 390, 390, 58, 104, 138, 172, 206, 240, 274, 
    308, 341, 374, 22, 68, 114, 148, 182, 216, 250, 284, 318, 351, 34, 
    80, 126, 160, 194, 228, 262, 296, 330, 363, 46, 92, 0, 61, 107, 
    141, 175, 209, 243, 277, 311, 344, 377, 26, 72, 118, 152, 186, 220, 
    254, 288, 322, 355, 38, 84, 130, 164, 198, 232, 266, 300, 334, 367, 
    50, 96, 383, 58, 104, 138, 172, 206, 240, 274, 308, 341, 374, 22, 
    68, 114, 148, 182, 216, 250, 284, 318, 351, 34, 80, 126, 160, 194, 
    228, 262, 296, 330, 363, 46, 92, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
