/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Machine Code Emitter                                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

uint64_t PPCCodeEmitter::getBinaryCodeForInstr(const MachineInstr &MI) const {
  static const uint64_t InstBits[] = {
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(2080375316),	// ADD4
    UINT64_C(2080375316),	// ADD8
    UINT64_C(2080375316),	// ADD8TLS
    UINT64_C(2080374804),	// ADDC
    UINT64_C(2080374804),	// ADDC8
    UINT64_C(2080375060),	// ADDE
    UINT64_C(2080375060),	// ADDE8
    UINT64_C(939524096),	// ADDI
    UINT64_C(939524096),	// ADDI8
    UINT64_C(939524096),	// ADDI8L
    UINT64_C(805306368),	// ADDIC
    UINT64_C(805306368),	// ADDIC8
    UINT64_C(872415232),	// ADDICo
    UINT64_C(939524096),	// ADDIL
    UINT64_C(1006632960),	// ADDIS
    UINT64_C(1006632960),	// ADDIS8
    UINT64_C(0),	// ADDISdtprelHA
    UINT64_C(0),	// ADDISgotTprelHA
    UINT64_C(0),	// ADDIStlsgdHA
    UINT64_C(0),	// ADDIStlsldHA
    UINT64_C(0),	// ADDIStocHA
    UINT64_C(0),	// ADDIdtprelL
    UINT64_C(0),	// ADDItlsgdL
    UINT64_C(0),	// ADDItlsldL
    UINT64_C(0),	// ADDItocL
    UINT64_C(2080375252),	// ADDME
    UINT64_C(2080375252),	// ADDME8
    UINT64_C(2080375188),	// ADDZE
    UINT64_C(2080375188),	// ADDZE8
    UINT64_C(0),	// ADJCALLSTACKDOWN
    UINT64_C(0),	// ADJCALLSTACKUP
    UINT64_C(2080374840),	// AND
    UINT64_C(2080374840),	// AND8
    UINT64_C(2080374904),	// ANDC
    UINT64_C(2080374904),	// ANDC8
    UINT64_C(1946157056),	// ANDISo
    UINT64_C(1946157056),	// ANDISo8
    UINT64_C(1879048192),	// ANDIo
    UINT64_C(1879048192),	// ANDIo8
    UINT64_C(0),	// ATOMIC_CMP_SWAP_I16
    UINT64_C(0),	// ATOMIC_CMP_SWAP_I32
    UINT64_C(0),	// ATOMIC_CMP_SWAP_I64
    UINT64_C(0),	// ATOMIC_CMP_SWAP_I8
    UINT64_C(0),	// ATOMIC_LOAD_ADD_I16
    UINT64_C(0),	// ATOMIC_LOAD_ADD_I32
    UINT64_C(0),	// ATOMIC_LOAD_ADD_I64
    UINT64_C(0),	// ATOMIC_LOAD_ADD_I8
    UINT64_C(0),	// ATOMIC_LOAD_AND_I16
    UINT64_C(0),	// ATOMIC_LOAD_AND_I32
    UINT64_C(0),	// ATOMIC_LOAD_AND_I64
    UINT64_C(0),	// ATOMIC_LOAD_AND_I8
    UINT64_C(0),	// ATOMIC_LOAD_NAND_I16
    UINT64_C(0),	// ATOMIC_LOAD_NAND_I32
    UINT64_C(0),	// ATOMIC_LOAD_NAND_I64
    UINT64_C(0),	// ATOMIC_LOAD_NAND_I8
    UINT64_C(0),	// ATOMIC_LOAD_OR_I16
    UINT64_C(0),	// ATOMIC_LOAD_OR_I32
    UINT64_C(0),	// ATOMIC_LOAD_OR_I64
    UINT64_C(0),	// ATOMIC_LOAD_OR_I8
    UINT64_C(0),	// ATOMIC_LOAD_SUB_I16
    UINT64_C(0),	// ATOMIC_LOAD_SUB_I32
    UINT64_C(0),	// ATOMIC_LOAD_SUB_I64
    UINT64_C(0),	// ATOMIC_LOAD_SUB_I8
    UINT64_C(0),	// ATOMIC_LOAD_XOR_I16
    UINT64_C(0),	// ATOMIC_LOAD_XOR_I32
    UINT64_C(0),	// ATOMIC_LOAD_XOR_I64
    UINT64_C(0),	// ATOMIC_LOAD_XOR_I8
    UINT64_C(0),	// ATOMIC_SWAP_I16
    UINT64_C(0),	// ATOMIC_SWAP_I32
    UINT64_C(0),	// ATOMIC_SWAP_I64
    UINT64_C(0),	// ATOMIC_SWAP_I8
    UINT64_C(1207959552),	// B
    UINT64_C(1073741824),	// BCC
    UINT64_C(1317012512),	// BCTR
    UINT64_C(1317012512),	// BCTR8
    UINT64_C(1317012513),	// BCTRL8_Darwin
    UINT64_C(1317012513),	// BCTRL8_ELF
    UINT64_C(1317012513),	// BCTRL_Darwin
    UINT64_C(1317012513),	// BCTRL_SVR4
    UINT64_C(1107296256),	// BDNZ
    UINT64_C(1107296256),	// BDNZ8
    UINT64_C(1111490560),	// BDZ
    UINT64_C(1111490560),	// BDZ8
    UINT64_C(1207959553),	// BL8_Darwin
    UINT64_C(1207959553),	// BL8_ELF
    UINT64_C(5188146776636391424),	// BL8_NOP_ELF
    UINT64_C(5188146776636391424),	// BL8_NOP_ELF_TLSGD
    UINT64_C(5188146776636391424),	// BL8_NOP_ELF_TLSLD
    UINT64_C(1207959555),	// BLA8_Darwin
    UINT64_C(1207959555),	// BLA8_ELF
    UINT64_C(5188146785226326016),	// BLA8_NOP_ELF
    UINT64_C(1207959555),	// BLA_Darwin
    UINT64_C(1207959555),	// BLA_SVR4
    UINT64_C(1275068448),	// BLR
    UINT64_C(1207959553),	// BL_Darwin
    UINT64_C(1207959553),	// BL_SVR4
    UINT64_C(2082471936),	// CMPD
    UINT64_C(740294656),	// CMPDI
    UINT64_C(2082472000),	// CMPLD
    UINT64_C(673185792),	// CMPLDI
    UINT64_C(2080374848),	// CMPLW
    UINT64_C(671088640),	// CMPLWI
    UINT64_C(2080374784),	// CMPW
    UINT64_C(738197504),	// CMPWI
    UINT64_C(2080374900),	// CNTLZD
    UINT64_C(2080374836),	// CNTLZW
    UINT64_C(1288057410),	// CR6SET
    UINT64_C(1288057218),	// CR6UNSET
    UINT64_C(1275068994),	// CREQV
    UINT64_C(1275069314),	// CROR
    UINT64_C(1275068994),	// CRSET
    UINT64_C(1275068802),	// CRUNSET
    UINT64_C(2080376300),	// DCBA
    UINT64_C(2080374956),	// DCBF
    UINT64_C(2080375724),	// DCBI
    UINT64_C(2080374892),	// DCBST
    UINT64_C(2080375340),	// DCBT
    UINT64_C(2080375276),	// DCBTST
    UINT64_C(2080376812),	// DCBZ
    UINT64_C(2082473964),	// DCBZL
    UINT64_C(2080375762),	// DIVD
    UINT64_C(2080375698),	// DIVDU
    UINT64_C(2080375766),	// DIVW
    UINT64_C(2080375702),	// DIVWU
    UINT64_C(2080376428),	// DSS
    UINT64_C(2080376428),	// DSSALL
    UINT64_C(2080375468),	// DST
    UINT64_C(2080375468),	// DST64
    UINT64_C(2080375532),	// DSTST
    UINT64_C(2080375532),	// DSTST64
    UINT64_C(2080375532),	// DSTSTT
    UINT64_C(2080375532),	// DSTSTT64
    UINT64_C(2080375468),	// DSTT
    UINT64_C(2080375468),	// DSTT64
    UINT64_C(0),	// DYNALLOC
    UINT64_C(0),	// DYNALLOC8
    UINT64_C(2080375352),	// EQV
    UINT64_C(2080375352),	// EQV8
    UINT64_C(2080376692),	// EXTSB
    UINT64_C(2080376692),	// EXTSB8
    UINT64_C(2080376628),	// EXTSH
    UINT64_C(2080376628),	// EXTSH8
    UINT64_C(2080376756),	// EXTSW
    UINT64_C(2080376756),	// EXTSW_32
    UINT64_C(2080376756),	// EXTSW_32_64
    UINT64_C(4227858960),	// FABSD
    UINT64_C(4227858960),	// FABSS
    UINT64_C(4227858474),	// FADD
    UINT64_C(3959423018),	// FADDS
    UINT64_C(4227858474),	// FADDrtz
    UINT64_C(4227860124),	// FCFID
    UINT64_C(4227858432),	// FCMPUD
    UINT64_C(4227858432),	// FCMPUS
    UINT64_C(4227860062),	// FCTIDZ
    UINT64_C(4227858462),	// FCTIWZ
    UINT64_C(4227858468),	// FDIV
    UINT64_C(3959423012),	// FDIVS
    UINT64_C(4227858490),	// FMADD
    UINT64_C(3959423034),	// FMADDS
    UINT64_C(4227858576),	// FMR
    UINT64_C(4227858488),	// FMSUB
    UINT64_C(3959423032),	// FMSUBS
    UINT64_C(4227858482),	// FMUL
    UINT64_C(3959423026),	// FMULS
    UINT64_C(4227858704),	// FNABSD
    UINT64_C(4227858704),	// FNABSS
    UINT64_C(4227858512),	// FNEGD
    UINT64_C(4227858512),	// FNEGS
    UINT64_C(4227858494),	// FNMADD
    UINT64_C(3959423038),	// FNMADDS
    UINT64_C(4227858492),	// FNMSUB
    UINT64_C(3959423036),	// FNMSUBS
    UINT64_C(4227858456),	// FRSP
    UINT64_C(4227858478),	// FSELD
    UINT64_C(4227858478),	// FSELS
    UINT64_C(4227858476),	// FSQRT
    UINT64_C(3959423020),	// FSQRTS
    UINT64_C(4227858472),	// FSUB
    UINT64_C(3959423016),	// FSUBS
    UINT64_C(0),	// GETtlsADDR
    UINT64_C(0),	// GETtlsldADDR
    UINT64_C(2080374814),	// ISEL
    UINT64_C(2080374814),	// ISEL8
    UINT64_C(939524096),	// LA
    UINT64_C(2281701376),	// LBZ
    UINT64_C(2281701376),	// LBZ8
    UINT64_C(2348810240),	// LBZU
    UINT64_C(2348810240),	// LBZU8
    UINT64_C(2080375022),	// LBZUX
    UINT64_C(2080375022),	// LBZUX8
    UINT64_C(2080374958),	// LBZX
    UINT64_C(2080374958),	// LBZX8
    UINT64_C(3892314112),	// LD
    UINT64_C(2080374952),	// LDARX
    UINT64_C(3892314113),	// LDU
    UINT64_C(2080374890),	// LDUX
    UINT64_C(2080374826),	// LDX
    UINT64_C(0),	// LDgotTprelL
    UINT64_C(3896508424),	// LDinto_toc
    UINT64_C(3892314112),	// LDrs
    UINT64_C(0),	// LDtoc
    UINT64_C(0),	// LDtocCPT
    UINT64_C(0),	// LDtocJTI
    UINT64_C(0),	// LDtocL
    UINT64_C(3896573992),	// LDtoc_restore
    UINT64_C(3355443200),	// LFD
    UINT64_C(3422552064),	// LFDU
    UINT64_C(2080376046),	// LFDUX
    UINT64_C(2080375982),	// LFDX
    UINT64_C(3221225472),	// LFS
    UINT64_C(3288334336),	// LFSU
    UINT64_C(2080375918),	// LFSUX
    UINT64_C(2080375854),	// LFSX
    UINT64_C(2818572288),	// LHA
    UINT64_C(2818572288),	// LHA8
    UINT64_C(2885681152),	// LHAU
    UINT64_C(2885681152),	// LHAU8
    UINT64_C(2080375534),	// LHAUX
    UINT64_C(2080375534),	// LHAUX8
    UINT64_C(2080375470),	// LHAX
    UINT64_C(2080375470),	// LHAX8
    UINT64_C(2080376364),	// LHBRX
    UINT64_C(2684354560),	// LHZ
    UINT64_C(2684354560),	// LHZ8
    UINT64_C(2751463424),	// LHZU
    UINT64_C(2751463424),	// LHZU8
    UINT64_C(2080375406),	// LHZUX
    UINT64_C(2080375406),	// LHZUX8
    UINT64_C(2080375342),	// LHZX
    UINT64_C(2080375342),	// LHZX8
    UINT64_C(939524096),	// LI
    UINT64_C(939524096),	// LI8
    UINT64_C(1006632960),	// LIS
    UINT64_C(1006632960),	// LIS8
    UINT64_C(2080374798),	// LVEBX
    UINT64_C(2080374862),	// LVEHX
    UINT64_C(2080374926),	// LVEWX
    UINT64_C(2080374796),	// LVSL
    UINT64_C(2080374860),	// LVSR
    UINT64_C(2080374990),	// LVX
    UINT64_C(2080375502),	// LVXL
    UINT64_C(3892314114),	// LWA
    UINT64_C(2080374824),	// LWARX
    UINT64_C(2080375530),	// LWAUX
    UINT64_C(2080375466),	// LWAX
    UINT64_C(2080375852),	// LWBRX
    UINT64_C(2147483648),	// LWZ
    UINT64_C(2147483648),	// LWZ8
    UINT64_C(2214592512),	// LWZU
    UINT64_C(2214592512),	// LWZU8
    UINT64_C(2080374894),	// LWZUX
    UINT64_C(2080374894),	// LWZUX8
    UINT64_C(2080374830),	// LWZX
    UINT64_C(2080374830),	// LWZX8
    UINT64_C(1275068416),	// MCRF
    UINT64_C(2080374822),	// MFCR
    UINT64_C(2080374822),	// MFCR8
    UINT64_C(2080374822),	// MFCR8pseud
    UINT64_C(2080374822),	// MFCRpseud
    UINT64_C(2080965286),	// MFCTR
    UINT64_C(2080965286),	// MFCTR8
    UINT64_C(4227859598),	// MFFS
    UINT64_C(2080899750),	// MFLR
    UINT64_C(2080899750),	// MFLR8
    UINT64_C(2081423398),	// MFOCRF
    UINT64_C(2081178278),	// MFTB8
    UINT64_C(2080391846),	// MFVRSAVE
    UINT64_C(268436996),	// MFVSCR
    UINT64_C(2080375072),	// MTCRF
    UINT64_C(2080375072),	// MTCRF8
    UINT64_C(2080965542),	// MTCTR
    UINT64_C(2080965542),	// MTCTR8
    UINT64_C(4227858572),	// MTFSB0
    UINT64_C(4227858508),	// MTFSB1
    UINT64_C(4227859854),	// MTFSF
    UINT64_C(2080900006),	// MTLR
    UINT64_C(2080900006),	// MTLR8
    UINT64_C(2080392102),	// MTVRSAVE
    UINT64_C(268437060),	// MTVSCR
    UINT64_C(2080374930),	// MULHD
    UINT64_C(2080374802),	// MULHDU
    UINT64_C(2080374934),	// MULHW
    UINT64_C(2080374806),	// MULHWU
    UINT64_C(2080375250),	// MULLD
    UINT64_C(469762048),	// MULLI
    UINT64_C(2080375254),	// MULLW
    UINT64_C(0),	// MovePCtoLR
    UINT64_C(0),	// MovePCtoLR8
    UINT64_C(2080375736),	// NAND
    UINT64_C(2080375736),	// NAND8
    UINT64_C(2080374992),	// NEG
    UINT64_C(2080374992),	// NEG8
    UINT64_C(1610612736),	// NOP
    UINT64_C(2080375032),	// NOR
    UINT64_C(2080375032),	// NOR8
    UINT64_C(2080375672),	// OR
    UINT64_C(2080375672),	// OR8
    UINT64_C(2080375608),	// ORC
    UINT64_C(2080375608),	// ORC8
    UINT64_C(1610612736),	// ORI
    UINT64_C(1610612736),	// ORI8
    UINT64_C(1677721600),	// ORIS
    UINT64_C(1677721600),	// ORIS8
    UINT64_C(0),	// RESTORE_CR
    UINT64_C(2013265920),	// RLDCL
    UINT64_C(2013265920),	// RLDICL
    UINT64_C(2013265924),	// RLDICR
    UINT64_C(2013265932),	// RLDIMI
    UINT64_C(1342177280),	// RLWIMI
    UINT64_C(1409286144),	// RLWINM
    UINT64_C(1409286144),	// RLWINM8
    UINT64_C(1409286145),	// RLWINMo
    UINT64_C(1543503872),	// RLWNM
    UINT64_C(0),	// SELECT_CC_F4
    UINT64_C(0),	// SELECT_CC_F8
    UINT64_C(0),	// SELECT_CC_I4
    UINT64_C(0),	// SELECT_CC_I8
    UINT64_C(0),	// SELECT_CC_VRRC
    UINT64_C(2080374838),	// SLD
    UINT64_C(2080374832),	// SLW
    UINT64_C(0),	// SPILL_CR
    UINT64_C(2080376372),	// SRAD
    UINT64_C(2080376436),	// SRADI
    UINT64_C(2080376368),	// SRAW
    UINT64_C(2080376432),	// SRAWI
    UINT64_C(2080375862),	// SRD
    UINT64_C(2080375856),	// SRW
    UINT64_C(2550136832),	// STB
    UINT64_C(2550136832),	// STB8
    UINT64_C(2617245696),	// STBU
    UINT64_C(2617245696),	// STBU8
    UINT64_C(2080375278),	// STBUX
    UINT64_C(2080375278),	// STBUX8
    UINT64_C(2080375214),	// STBX
    UINT64_C(2080375214),	// STBX8
    UINT64_C(4160749568),	// STD
    UINT64_C(2080375213),	// STDCX
    UINT64_C(4160749569),	// STDU
    UINT64_C(2080375146),	// STDUX
    UINT64_C(2080375082),	// STDX
    UINT64_C(2080375082),	// STDX_32
    UINT64_C(4160749568),	// STD_32
    UINT64_C(3623878656),	// STFD
    UINT64_C(2483027968),	// STFDU
    UINT64_C(2080376302),	// STFDUX
    UINT64_C(2080376238),	// STFDX
    UINT64_C(2080376750),	// STFIWX
    UINT64_C(3489660928),	// STFS
    UINT64_C(2483027968),	// STFSU
    UINT64_C(2080376174),	// STFSUX
    UINT64_C(2080376110),	// STFSX
    UINT64_C(2952790016),	// STH
    UINT64_C(2952790016),	// STH8
    UINT64_C(2080376620),	// STHBRX
    UINT64_C(3019898880),	// STHU
    UINT64_C(3019898880),	// STHU8
    UINT64_C(2080375662),	// STHUX
    UINT64_C(2080375662),	// STHUX8
    UINT64_C(2080375598),	// STHX
    UINT64_C(2080375598),	// STHX8
    UINT64_C(2080375054),	// STVEBX
    UINT64_C(2080375118),	// STVEHX
    UINT64_C(2080375182),	// STVEWX
    UINT64_C(2080375246),	// STVX
    UINT64_C(2080375758),	// STVXL
    UINT64_C(2415919104),	// STW
    UINT64_C(2415919104),	// STW8
    UINT64_C(2080376108),	// STWBRX
    UINT64_C(2080375085),	// STWCX
    UINT64_C(2483027968),	// STWU
    UINT64_C(2483027968),	// STWU8
    UINT64_C(2080375150),	// STWUX
    UINT64_C(2080375150),	// STWUX8
    UINT64_C(2080375086),	// STWX
    UINT64_C(2080375086),	// STWX8
    UINT64_C(2080374864),	// SUBF
    UINT64_C(2080374864),	// SUBF8
    UINT64_C(2080374800),	// SUBFC
    UINT64_C(2080374800),	// SUBFC8
    UINT64_C(2080375056),	// SUBFE
    UINT64_C(2080375056),	// SUBFE8
    UINT64_C(536870912),	// SUBFIC
    UINT64_C(536870912),	// SUBFIC8
    UINT64_C(2080375248),	// SUBFME
    UINT64_C(2080375248),	// SUBFME8
    UINT64_C(2080375184),	// SUBFZE
    UINT64_C(2080375184),	// SUBFZE8
    UINT64_C(2080375980),	// SYNC
    UINT64_C(1207959552),	// TAILB
    UINT64_C(1207959552),	// TAILB8
    UINT64_C(1207959552),	// TAILBA
    UINT64_C(1207959552),	// TAILBA8
    UINT64_C(1317012512),	// TAILBCTR
    UINT64_C(1317012512),	// TAILBCTR8
    UINT64_C(0),	// TCRETURNai
    UINT64_C(0),	// TCRETURNai8
    UINT64_C(0),	// TCRETURNdi
    UINT64_C(0),	// TCRETURNdi8
    UINT64_C(0),	// TCRETURNri
    UINT64_C(0),	// TCRETURNri8
    UINT64_C(2145386504),	// TRAP
    UINT64_C(0),	// UPDATE_VRSAVE
    UINT64_C(268435840),	// VADDCUW
    UINT64_C(268435466),	// VADDFP
    UINT64_C(268436224),	// VADDSBS
    UINT64_C(268436288),	// VADDSHS
    UINT64_C(268436352),	// VADDSWS
    UINT64_C(268435456),	// VADDUBM
    UINT64_C(268435968),	// VADDUBS
    UINT64_C(268435520),	// VADDUHM
    UINT64_C(268436032),	// VADDUHS
    UINT64_C(268435584),	// VADDUWM
    UINT64_C(268436096),	// VADDUWS
    UINT64_C(268436484),	// VAND
    UINT64_C(268436548),	// VANDC
    UINT64_C(268436738),	// VAVGSB
    UINT64_C(268436802),	// VAVGSH
    UINT64_C(268436866),	// VAVGSW
    UINT64_C(268436482),	// VAVGUB
    UINT64_C(268436546),	// VAVGUH
    UINT64_C(268436610),	// VAVGUW
    UINT64_C(268436298),	// VCFSX
    UINT64_C(268436298),	// VCFSX_0
    UINT64_C(268436234),	// VCFUX
    UINT64_C(268436234),	// VCFUX_0
    UINT64_C(268436422),	// VCMPBFP
    UINT64_C(268437446),	// VCMPBFPo
    UINT64_C(268435654),	// VCMPEQFP
    UINT64_C(268436678),	// VCMPEQFPo
    UINT64_C(268435462),	// VCMPEQUB
    UINT64_C(268436486),	// VCMPEQUBo
    UINT64_C(268435526),	// VCMPEQUH
    UINT64_C(268436550),	// VCMPEQUHo
    UINT64_C(268435590),	// VCMPEQUW
    UINT64_C(268436614),	// VCMPEQUWo
    UINT64_C(268435910),	// VCMPGEFP
    UINT64_C(268436934),	// VCMPGEFPo
    UINT64_C(268436166),	// VCMPGTFP
    UINT64_C(268437190),	// VCMPGTFPo
    UINT64_C(268436230),	// VCMPGTSB
    UINT64_C(268437254),	// VCMPGTSBo
    UINT64_C(268436294),	// VCMPGTSH
    UINT64_C(268437318),	// VCMPGTSHo
    UINT64_C(268436358),	// VCMPGTSW
    UINT64_C(268437382),	// VCMPGTSWo
    UINT64_C(268435974),	// VCMPGTUB
    UINT64_C(268436998),	// VCMPGTUBo
    UINT64_C(268436038),	// VCMPGTUH
    UINT64_C(268437062),	// VCMPGTUHo
    UINT64_C(268436102),	// VCMPGTUW
    UINT64_C(268437126),	// VCMPGTUWo
    UINT64_C(268436426),	// VCTSXS
    UINT64_C(268436426),	// VCTSXS_0
    UINT64_C(268436362),	// VCTUXS
    UINT64_C(268436362),	// VCTUXS_0
    UINT64_C(268435850),	// VEXPTEFP
    UINT64_C(268435914),	// VLOGEFP
    UINT64_C(268435502),	// VMADDFP
    UINT64_C(268436490),	// VMAXFP
    UINT64_C(268435714),	// VMAXSB
    UINT64_C(268435778),	// VMAXSH
    UINT64_C(268435842),	// VMAXSW
    UINT64_C(268435458),	// VMAXUB
    UINT64_C(268435522),	// VMAXUH
    UINT64_C(268435586),	// VMAXUW
    UINT64_C(268435488),	// VMHADDSHS
    UINT64_C(268435489),	// VMHRADDSHS
    UINT64_C(268436554),	// VMINFP
    UINT64_C(268436226),	// VMINSB
    UINT64_C(268436290),	// VMINSH
    UINT64_C(268436354),	// VMINSW
    UINT64_C(268435970),	// VMINUB
    UINT64_C(268436034),	// VMINUH
    UINT64_C(268436098),	// VMINUW
    UINT64_C(268435490),	// VMLADDUHM
    UINT64_C(268435468),	// VMRGHB
    UINT64_C(268435532),	// VMRGHH
    UINT64_C(268435596),	// VMRGHW
    UINT64_C(268435724),	// VMRGLB
    UINT64_C(268435788),	// VMRGLH
    UINT64_C(268435852),	// VMRGLW
    UINT64_C(268435493),	// VMSUMMBM
    UINT64_C(268435496),	// VMSUMSHM
    UINT64_C(268435497),	// VMSUMSHS
    UINT64_C(268435492),	// VMSUMUBM
    UINT64_C(268435494),	// VMSUMUHM
    UINT64_C(268435495),	// VMSUMUHS
    UINT64_C(268436232),	// VMULESB
    UINT64_C(268436296),	// VMULESH
    UINT64_C(268435976),	// VMULEUB
    UINT64_C(268436040),	// VMULEUH
    UINT64_C(268435720),	// VMULOSB
    UINT64_C(268435784),	// VMULOSH
    UINT64_C(268435464),	// VMULOUB
    UINT64_C(268435528),	// VMULOUH
    UINT64_C(268435503),	// VNMSUBFP
    UINT64_C(268436740),	// VNOR
    UINT64_C(268436612),	// VOR
    UINT64_C(268435499),	// VPERM
    UINT64_C(268436238),	// VPKPX
    UINT64_C(268435854),	// VPKSHSS
    UINT64_C(268435726),	// VPKSHUS
    UINT64_C(268435918),	// VPKSWSS
    UINT64_C(268435790),	// VPKSWUS
    UINT64_C(268435470),	// VPKUHUM
    UINT64_C(268435598),	// VPKUHUS
    UINT64_C(268435534),	// VPKUWUM
    UINT64_C(268435662),	// VPKUWUS
    UINT64_C(268435722),	// VREFP
    UINT64_C(268436170),	// VRFIM
    UINT64_C(268435978),	// VRFIN
    UINT64_C(268436106),	// VRFIP
    UINT64_C(268436042),	// VRFIZ
    UINT64_C(268435460),	// VRLB
    UINT64_C(268435524),	// VRLH
    UINT64_C(268435588),	// VRLW
    UINT64_C(268435786),	// VRSQRTEFP
    UINT64_C(268435498),	// VSEL
    UINT64_C(268435908),	// VSL
    UINT64_C(268435716),	// VSLB
    UINT64_C(268435500),	// VSLDOI
    UINT64_C(268435780),	// VSLH
    UINT64_C(268436492),	// VSLO
    UINT64_C(268435844),	// VSLW
    UINT64_C(268435980),	// VSPLTB
    UINT64_C(268436044),	// VSPLTH
    UINT64_C(268436236),	// VSPLTISB
    UINT64_C(268436300),	// VSPLTISH
    UINT64_C(268436364),	// VSPLTISW
    UINT64_C(268436108),	// VSPLTW
    UINT64_C(268436164),	// VSR
    UINT64_C(268436228),	// VSRAB
    UINT64_C(268436292),	// VSRAH
    UINT64_C(268436356),	// VSRAW
    UINT64_C(268435972),	// VSRB
    UINT64_C(268436036),	// VSRH
    UINT64_C(268436556),	// VSRO
    UINT64_C(268436100),	// VSRW
    UINT64_C(268435530),	// VSUBCUW
    UINT64_C(268435530),	// VSUBFP
    UINT64_C(268437248),	// VSUBSBS
    UINT64_C(268437312),	// VSUBSHS
    UINT64_C(268437376),	// VSUBSWS
    UINT64_C(268436480),	// VSUBUBM
    UINT64_C(268436992),	// VSUBUBS
    UINT64_C(268436544),	// VSUBUHM
    UINT64_C(268437056),	// VSUBUHS
    UINT64_C(268436608),	// VSUBUWM
    UINT64_C(268437120),	// VSUBUWS
    UINT64_C(268437128),	// VSUM2SWS
    UINT64_C(268437128),	// VSUM4SBS
    UINT64_C(268437064),	// VSUM4SHS
    UINT64_C(268437000),	// VSUM4UBS
    UINT64_C(268437384),	// VSUMSWS
    UINT64_C(268436302),	// VUPKHPX
    UINT64_C(268435982),	// VUPKHSB
    UINT64_C(268436046),	// VUPKHSH
    UINT64_C(268436430),	// VUPKLPX
    UINT64_C(268436110),	// VUPKLSB
    UINT64_C(268436174),	// VUPKLSH
    UINT64_C(268436676),	// VXOR
    UINT64_C(268436676),	// V_SET0
    UINT64_C(270467980),	// V_SETALLONES
    UINT64_C(2080375416),	// XOR
    UINT64_C(2080375416),	// XOR8
    UINT64_C(1744830464),	// XORI
    UINT64_C(1744830464),	// XORI8
    UINT64_C(1811939328),	// XORIS
    UINT64_C(1811939328),	// XORIS8
    UINT64_C(0)
  };
  const unsigned opcode = MI.getOpcode();
  uint64_t Value = InstBits[opcode];
  uint64_t op = 0;
  (void)op;  // suppress warning
  switch (opcode) {
    case PPC::ADDISdtprelHA:
    case PPC::ADDISgotTprelHA:
    case PPC::ADDIStlsgdHA:
    case PPC::ADDIStlsldHA:
    case PPC::ADDIStocHA:
    case PPC::ADDIdtprelL:
    case PPC::ADDItlsgdL:
    case PPC::ADDItlsldL:
    case PPC::ADDItocL:
    case PPC::ADJCALLSTACKDOWN:
    case PPC::ADJCALLSTACKUP:
    case PPC::ATOMIC_CMP_SWAP_I16:
    case PPC::ATOMIC_CMP_SWAP_I32:
    case PPC::ATOMIC_CMP_SWAP_I64:
    case PPC::ATOMIC_CMP_SWAP_I8:
    case PPC::ATOMIC_LOAD_ADD_I16:
    case PPC::ATOMIC_LOAD_ADD_I32:
    case PPC::ATOMIC_LOAD_ADD_I64:
    case PPC::ATOMIC_LOAD_ADD_I8:
    case PPC::ATOMIC_LOAD_AND_I16:
    case PPC::ATOMIC_LOAD_AND_I32:
    case PPC::ATOMIC_LOAD_AND_I64:
    case PPC::ATOMIC_LOAD_AND_I8:
    case PPC::ATOMIC_LOAD_NAND_I16:
    case PPC::ATOMIC_LOAD_NAND_I32:
    case PPC::ATOMIC_LOAD_NAND_I64:
    case PPC::ATOMIC_LOAD_NAND_I8:
    case PPC::ATOMIC_LOAD_OR_I16:
    case PPC::ATOMIC_LOAD_OR_I32:
    case PPC::ATOMIC_LOAD_OR_I64:
    case PPC::ATOMIC_LOAD_OR_I8:
    case PPC::ATOMIC_LOAD_SUB_I16:
    case PPC::ATOMIC_LOAD_SUB_I32:
    case PPC::ATOMIC_LOAD_SUB_I64:
    case PPC::ATOMIC_LOAD_SUB_I8:
    case PPC::ATOMIC_LOAD_XOR_I16:
    case PPC::ATOMIC_LOAD_XOR_I32:
    case PPC::ATOMIC_LOAD_XOR_I64:
    case PPC::ATOMIC_LOAD_XOR_I8:
    case PPC::ATOMIC_SWAP_I16:
    case PPC::ATOMIC_SWAP_I32:
    case PPC::ATOMIC_SWAP_I64:
    case PPC::ATOMIC_SWAP_I8:
    case PPC::BCTR:
    case PPC::BCTR8:
    case PPC::BCTRL8_Darwin:
    case PPC::BCTRL8_ELF:
    case PPC::BCTRL_Darwin:
    case PPC::BCTRL_SVR4:
    case PPC::CR6SET:
    case PPC::CR6UNSET:
    case PPC::DYNALLOC:
    case PPC::DYNALLOC8:
    case PPC::GETtlsADDR:
    case PPC::GETtlsldADDR:
    case PPC::LDgotTprelL:
    case PPC::LDtoc:
    case PPC::LDtocCPT:
    case PPC::LDtocJTI:
    case PPC::LDtocL:
    case PPC::LDtoc_restore:
    case PPC::MovePCtoLR:
    case PPC::MovePCtoLR8:
    case PPC::NOP:
    case PPC::RESTORE_CR:
    case PPC::SELECT_CC_F4:
    case PPC::SELECT_CC_F8:
    case PPC::SELECT_CC_I4:
    case PPC::SELECT_CC_I8:
    case PPC::SELECT_CC_VRRC:
    case PPC::SPILL_CR:
    case PPC::SYNC:
    case PPC::TAILBCTR:
    case PPC::TAILBCTR8:
    case PPC::TCRETURNai:
    case PPC::TCRETURNai8:
    case PPC::TCRETURNdi:
    case PPC::TCRETURNdi8:
    case PPC::TCRETURNri:
    case PPC::TCRETURNri8:
    case PPC::TRAP:
    case PPC::UPDATE_VRSAVE: {
      break;
    }
    case PPC::DCBA:
    case PPC::DCBF:
    case PPC::DCBI:
    case PPC::DCBST:
    case PPC::DCBT:
    case PPC::DCBTST:
    case PPC::DCBZ:
    case PPC::DCBZL: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 16;
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::SRADI: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 16;
      // op: RS
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 21;
      // op: SH
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      Value |= (op & UINT64_C(32)) >> 4;
      break;
    }
    case PPC::CNTLZD:
    case PPC::CNTLZW:
    case PPC::EXTSB:
    case PPC::EXTSB8:
    case PPC::EXTSH:
    case PPC::EXTSH8:
    case PPC::EXTSW:
    case PPC::EXTSW_32:
    case PPC::EXTSW_32_64: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 16;
      // op: RST
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case PPC::AND:
    case PPC::AND8:
    case PPC::ANDC:
    case PPC::ANDC8:
    case PPC::EQV:
    case PPC::EQV8:
    case PPC::NAND:
    case PPC::NAND8:
    case PPC::NOR:
    case PPC::NOR8:
    case PPC::OR:
    case PPC::OR8:
    case PPC::ORC:
    case PPC::ORC8:
    case PPC::SLD:
    case PPC::SLW:
    case PPC::SRAD:
    case PPC::SRAW:
    case PPC::SRAWI:
    case PPC::SRD:
    case PPC::SRW:
    case PPC::XOR:
    case PPC::XOR8: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 16;
      // op: RST
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 21;
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::LBZ:
    case PPC::LBZ8:
    case PPC::LFD:
    case PPC::LFS:
    case PPC::LHA:
    case PPC::LHA8:
    case PPC::LHZ:
    case PPC::LHZ8:
    case PPC::LWZ:
    case PPC::LWZ8:
    case PPC::STB:
    case PPC::STB8:
    case PPC::STFD:
    case PPC::STFS:
    case PPC::STH:
    case PPC::STH8:
    case PPC::STW:
    case PPC::STW8: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: Addr
      op = getMemRIEncoding(MI, 1);
      Value |= op & UINT64_C(2097151);
      break;
    }
    case PPC::LBZU:
    case PPC::LBZU8:
    case PPC::LFDU:
    case PPC::LFSU:
    case PPC::LHAU:
    case PPC::LHZU:
    case PPC::LHZU8:
    case PPC::LWZU:
    case PPC::LWZU8: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: Addr
      op = getMemRIEncoding(MI, 2);
      Value |= op & UINT64_C(2097151);
      break;
    }
    case PPC::LIS:
    case PPC::LIS8: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: B
      op = getHA16Encoding(MI, 1);
      Value |= op & UINT64_C(65535);
      break;
    }
    case PPC::LI:
    case PPC::LI8: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: B
      op = getLO16Encoding(MI, 1);
      Value |= op & UINT64_C(65535);
      break;
    }
    case PPC::ADDIS:
    case PPC::ADDIS8: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: C
      op = getHA16Encoding(MI, 2);
      Value |= op & UINT64_C(65535);
      break;
    }
    case PPC::ADDI8L:
    case PPC::ADDIL:
    case PPC::LA: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: C
      op = getLO16Encoding(MI, 2);
      Value |= op & UINT64_C(65535);
      break;
    }
    case PPC::ADDI:
    case PPC::ADDI8:
    case PPC::ADDIC:
    case PPC::ADDIC8:
    case PPC::ADDICo:
    case PPC::MULLI:
    case PPC::SUBFIC:
    case PPC::SUBFIC8: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: C
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= op & UINT64_C(65535);
      break;
    }
    case PPC::LHAU8: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: C
      op = getLO16Encoding(MI, 2);
      Value |= op & UINT64_C(65535);
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case PPC::STBU:
    case PPC::STBU8:
    case PPC::STFDU:
    case PPC::STFSU:
    case PPC::STHU:
    case PPC::STHU8:
    case PPC::STWU:
    case PPC::STWU8: {
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 21;
      // op: C
      op = getLO16Encoding(MI, 2);
      Value |= op & UINT64_C(65535);
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case PPC::ANDISo:
    case PPC::ANDISo8:
    case PPC::ANDIo:
    case PPC::ANDIo8:
    case PPC::ORI:
    case PPC::ORI8:
    case PPC::ORIS:
    case PPC::ORIS8:
    case PPC::XORI:
    case PPC::XORI8:
    case PPC::XORIS:
    case PPC::XORIS8: {
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 16;
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 21;
      // op: C
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= op & UINT64_C(65535);
      break;
    }
    case PPC::BDNZ:
    case PPC::BDNZ8:
    case PPC::BDZ:
    case PPC::BDZ8: {
      // op: BD
      op = getCondBrEncoding(MI, 0);
      Value |= (op & UINT64_C(16383)) << 2;
      break;
    }
    case PPC::MCRF: {
      // op: BF
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(7)) << 23;
      // op: BFA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(7)) << 18;
      break;
    }
    case PPC::FCMPUD:
    case PPC::FCMPUS: {
      // op: BF
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(7)) << 23;
      // op: FRA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: FRB
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::CMPDI:
    case PPC::CMPLDI:
    case PPC::CMPLWI:
    case PPC::CMPWI: {
      // op: BF
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(7)) << 23;
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: I
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= op & UINT64_C(65535);
      break;
    }
    case PPC::CMPD:
    case PPC::CMPLD:
    case PPC::CMPLW:
    case PPC::CMPW: {
      // op: BF
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(7)) << 23;
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: RB
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::BCC: {
      // op: BIBO
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      Value |= (op & UINT64_C(96)) << 11;
      // op: CR
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(7)) << 18;
      // op: BD
      op = getCondBrEncoding(MI, 2);
      Value |= (op & UINT64_C(16383)) << 2;
      break;
    }
    case PPC::BLR: {
      // op: BIBO
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(4)) << 23;
      Value |= (op & UINT64_C(8)) << 21;
      Value |= (op & UINT64_C(16)) << 19;
      Value |= (op & UINT64_C(32)) << 17;
      Value |= (op & UINT64_C(64)) << 15;
      Value |= (op & UINT64_C(3)) << 16;
      // op: CR
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(1)) << 20;
      Value |= (op & UINT64_C(2)) << 18;
      Value |= (op & UINT64_C(4)) << 16;
      break;
    }
    case PPC::CREQV:
    case PPC::CROR: {
      // op: CRD
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: CRA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: CRB
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::CRSET:
    case PPC::CRUNSET: {
      // op: CRD
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      Value |= (op & UINT64_C(31)) << 16;
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::MTFSB0:
    case PPC::MTFSB1: {
      // op: FM
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case PPC::MTFSF: {
      // op: FM
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(255)) << 17;
      // op: rT
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::FADD:
    case PPC::FADDS:
    case PPC::FADDrtz:
    case PPC::FDIV:
    case PPC::FDIVS:
    case PPC::FSUB:
    case PPC::FSUBS: {
      // op: FRT
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: FRA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: FRB
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::FMUL:
    case PPC::FMULS: {
      // op: FRT
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: FRA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: FRC
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 6;
      break;
    }
    case PPC::FMADD:
    case PPC::FMADDS:
    case PPC::FMSUB:
    case PPC::FMSUBS:
    case PPC::FNMADD:
    case PPC::FNMADDS:
    case PPC::FNMSUB:
    case PPC::FNMSUBS:
    case PPC::FSELD:
    case PPC::FSELS: {
      // op: FRT
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: FRA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: FRC
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 6;
      // op: FRB
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::MTCRF:
    case PPC::MTCRF8: {
      // op: FXM
      op = get_crbitm_encoding(MI, 0);
      Value |= (op & UINT64_C(255)) << 12;
      // op: rS
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case PPC::B:
    case PPC::BL8_Darwin:
    case PPC::BL8_ELF:
    case PPC::BL_Darwin:
    case PPC::BL_SVR4:
    case PPC::TAILB:
    case PPC::TAILB8: {
      // op: LI
      op = getDirectBrEncoding(MI, 0);
      Value |= (op & UINT64_C(16777215)) << 2;
      break;
    }
    case PPC::BL8_NOP_ELF:
    case PPC::BL8_NOP_ELF_TLSGD:
    case PPC::BL8_NOP_ELF_TLSLD: {
      // op: LI
      op = getDirectBrEncoding(MI, 0);
      Value |= (op & UINT64_C(16777215)) << 34;
      break;
    }
    case PPC::BLA8_Darwin:
    case PPC::BLA8_ELF:
    case PPC::BLA_Darwin:
    case PPC::BLA_SVR4:
    case PPC::TAILBA:
    case PPC::TAILBA8: {
      // op: LI
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(16777215)) << 2;
      break;
    }
    case PPC::BLA8_NOP_ELF: {
      // op: LI
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(16777215)) << 34;
      break;
    }
    case PPC::LDinto_toc: {
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case PPC::RLWINM:
    case PPC::RLWINM8:
    case PPC::RLWINMo:
    case PPC::RLWNM: {
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 16;
      // op: RS
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 21;
      // op: RB
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      // op: MB
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 6;
      // op: ME
      op = getMachineOpValue(MI, MI.getOperand(4));
      Value |= (op & UINT64_C(31)) << 1;
      break;
    }
    case PPC::RLDCL:
    case PPC::RLDICL:
    case PPC::RLDICR: {
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 16;
      // op: RS
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 21;
      // op: SH
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      Value |= (op & UINT64_C(32)) >> 4;
      // op: MBE
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 6;
      Value |= op & UINT64_C(32);
      break;
    }
    case PPC::RLWIMI: {
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 16;
      // op: RS
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 21;
      // op: RB
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 11;
      // op: MB
      op = getMachineOpValue(MI, MI.getOperand(4));
      Value |= (op & UINT64_C(31)) << 6;
      // op: ME
      op = getMachineOpValue(MI, MI.getOperand(5));
      Value |= (op & UINT64_C(31)) << 1;
      break;
    }
    case PPC::RLDIMI: {
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 16;
      // op: RS
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 21;
      // op: SH
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 11;
      Value |= (op & UINT64_C(32)) >> 4;
      // op: MBE
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 6;
      Value |= op & UINT64_C(32);
      break;
    }
    case PPC::MFFS: {
      // op: RST
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case PPC::LBZX:
    case PPC::LBZX8:
    case PPC::LDARX:
    case PPC::LDX:
    case PPC::LFDX:
    case PPC::LFSX:
    case PPC::LHAX:
    case PPC::LHAX8:
    case PPC::LHBRX:
    case PPC::LHZX:
    case PPC::LHZX8:
    case PPC::LVEBX:
    case PPC::LVEHX:
    case PPC::LVEWX:
    case PPC::LVSL:
    case PPC::LVSR:
    case PPC::LVX:
    case PPC::LVXL:
    case PPC::LWARX:
    case PPC::LWAX:
    case PPC::LWBRX:
    case PPC::LWZX:
    case PPC::LWZX8:
    case PPC::STBX:
    case PPC::STBX8:
    case PPC::STDCX:
    case PPC::STDX:
    case PPC::STDX_32:
    case PPC::STFDX:
    case PPC::STFIWX:
    case PPC::STFSX:
    case PPC::STHBRX:
    case PPC::STHX:
    case PPC::STHX8:
    case PPC::STVEBX:
    case PPC::STVEHX:
    case PPC::STVEWX:
    case PPC::STVX:
    case PPC::STVXL:
    case PPC::STWBRX:
    case PPC::STWCX:
    case PPC::STWX:
    case PPC::STWX8: {
      // op: RST
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::LBZUX:
    case PPC::LBZUX8:
    case PPC::LDUX:
    case PPC::LFDUX:
    case PPC::LFSUX:
    case PPC::LHAUX:
    case PPC::LHAUX8:
    case PPC::LHZUX:
    case PPC::LHZUX8:
    case PPC::LWAUX:
    case PPC::LWZUX:
    case PPC::LWZUX8: {
      // op: RST
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 16;
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::FABSD:
    case PPC::FABSS:
    case PPC::FCFID:
    case PPC::FCTIDZ:
    case PPC::FCTIWZ:
    case PPC::FMR:
    case PPC::FNABSD:
    case PPC::FNABSS:
    case PPC::FNEGD:
    case PPC::FNEGS:
    case PPC::FRSP:
    case PPC::FSQRT:
    case PPC::FSQRTS: {
      // op: RST
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::LD:
    case PPC::LDrs:
    case PPC::LWA:
    case PPC::STD:
    case PPC::STD_32: {
      // op: RST
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: DS_RA
      op = getMemRIXEncoding(MI, 1);
      Value |= (op & UINT64_C(524287)) << 2;
      break;
    }
    case PPC::LDU: {
      // op: RST
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: DS_RA
      op = getMemRIXEncoding(MI, 2);
      Value |= (op & UINT64_C(524287)) << 2;
      break;
    }
    case PPC::STBUX:
    case PPC::STBUX8:
    case PPC::STDUX:
    case PPC::STFDUX:
    case PPC::STFSUX:
    case PPC::STHUX:
    case PPC::STHUX8:
    case PPC::STWUX:
    case PPC::STWUX8: {
      // op: RST
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 21;
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 16;
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::STDU: {
      // op: RST
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 21;
      // op: DS
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(16383)) << 2;
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case PPC::MFCR:
    case PPC::MFCR8:
    case PPC::MFCR8pseud:
    case PPC::MFCRpseud:
    case PPC::MFCTR:
    case PPC::MFCTR8:
    case PPC::MFLR:
    case PPC::MFLR8:
    case PPC::MFTB8:
    case PPC::MFVRSAVE:
    case PPC::MTCTR:
    case PPC::MTCTR8:
    case PPC::MTLR:
    case PPC::MTLR8:
    case PPC::MTVRSAVE: {
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case PPC::ADDME:
    case PPC::ADDME8:
    case PPC::ADDZE:
    case PPC::ADDZE8:
    case PPC::NEG:
    case PPC::NEG8:
    case PPC::SUBFME:
    case PPC::SUBFME8:
    case PPC::SUBFZE:
    case PPC::SUBFZE8: {
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case PPC::ADD4:
    case PPC::ADD8:
    case PPC::ADDC:
    case PPC::ADDC8:
    case PPC::ADDE:
    case PPC::ADDE8:
    case PPC::DIVD:
    case PPC::DIVDU:
    case PPC::DIVW:
    case PPC::DIVWU:
    case PPC::MULHD:
    case PPC::MULHDU:
    case PPC::MULHW:
    case PPC::MULHWU:
    case PPC::MULLD:
    case PPC::MULLW:
    case PPC::SUBF:
    case PPC::SUBF8:
    case PPC::SUBFC:
    case PPC::SUBFC8:
    case PPC::SUBFE:
    case PPC::SUBFE8: {
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: RB
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::ISEL:
    case PPC::ISEL8: {
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: RB
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      // op: BIBO
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(96)) << 1;
      // op: CR
      op = getMachineOpValue(MI, MI.getOperand(4));
      Value |= (op & UINT64_C(7)) << 8;
      break;
    }
    case PPC::ADD8TLS: {
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: RB
      op = getTLSRegEncoding(MI, 2);
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::MFOCRF: {
      // op: ST
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: FXM
      op = get_crbitm_encoding(MI, 1);
      Value |= (op & UINT64_C(255)) << 12;
      break;
    }
    case PPC::DSS:
    case PPC::DST:
    case PPC::DST64:
    case PPC::DSTST:
    case PPC::DSTST64:
    case PPC::DSTSTT:
    case PPC::DSTSTT64:
    case PPC::DSTT:
    case PPC::DSTT64: {
      // op: T
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(1)) << 25;
      // op: STRM
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(3)) << 21;
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::DSSALL: {
      // op: T
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(1)) << 25;
      // op: STRM
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(3)) << 21;
      // op: A
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 16;
      // op: B
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::MTVSCR: {
      // op: VB
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::MFVSCR:
    case PPC::V_SETALLONES: {
      // op: VD
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case PPC::VSPLTISB:
    case PPC::VSPLTISH:
    case PPC::VSPLTISW: {
      // op: VD
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: IMM
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case PPC::VADDCUW:
    case PPC::VADDFP:
    case PPC::VADDSBS:
    case PPC::VADDSHS:
    case PPC::VADDSWS:
    case PPC::VADDUBM:
    case PPC::VADDUBS:
    case PPC::VADDUHM:
    case PPC::VADDUHS:
    case PPC::VADDUWM:
    case PPC::VADDUWS:
    case PPC::VAND:
    case PPC::VANDC:
    case PPC::VAVGSB:
    case PPC::VAVGSH:
    case PPC::VAVGSW:
    case PPC::VAVGUB:
    case PPC::VAVGUH:
    case PPC::VAVGUW:
    case PPC::VCFSX:
    case PPC::VCFUX:
    case PPC::VCMPBFP:
    case PPC::VCMPBFPo:
    case PPC::VCMPEQFP:
    case PPC::VCMPEQFPo:
    case PPC::VCMPEQUB:
    case PPC::VCMPEQUBo:
    case PPC::VCMPEQUH:
    case PPC::VCMPEQUHo:
    case PPC::VCMPEQUW:
    case PPC::VCMPEQUWo:
    case PPC::VCMPGEFP:
    case PPC::VCMPGEFPo:
    case PPC::VCMPGTFP:
    case PPC::VCMPGTFPo:
    case PPC::VCMPGTSB:
    case PPC::VCMPGTSBo:
    case PPC::VCMPGTSH:
    case PPC::VCMPGTSHo:
    case PPC::VCMPGTSW:
    case PPC::VCMPGTSWo:
    case PPC::VCMPGTUB:
    case PPC::VCMPGTUBo:
    case PPC::VCMPGTUH:
    case PPC::VCMPGTUHo:
    case PPC::VCMPGTUW:
    case PPC::VCMPGTUWo:
    case PPC::VCTSXS:
    case PPC::VCTUXS:
    case PPC::VMAXFP:
    case PPC::VMAXSB:
    case PPC::VMAXSH:
    case PPC::VMAXSW:
    case PPC::VMAXUB:
    case PPC::VMAXUH:
    case PPC::VMAXUW:
    case PPC::VMINFP:
    case PPC::VMINSB:
    case PPC::VMINSH:
    case PPC::VMINSW:
    case PPC::VMINUB:
    case PPC::VMINUH:
    case PPC::VMINUW:
    case PPC::VMRGHB:
    case PPC::VMRGHH:
    case PPC::VMRGHW:
    case PPC::VMRGLB:
    case PPC::VMRGLH:
    case PPC::VMRGLW:
    case PPC::VMULESB:
    case PPC::VMULESH:
    case PPC::VMULEUB:
    case PPC::VMULEUH:
    case PPC::VMULOSB:
    case PPC::VMULOSH:
    case PPC::VMULOUB:
    case PPC::VMULOUH:
    case PPC::VNOR:
    case PPC::VOR:
    case PPC::VPKPX:
    case PPC::VPKSHSS:
    case PPC::VPKSHUS:
    case PPC::VPKSWSS:
    case PPC::VPKSWUS:
    case PPC::VPKUHUM:
    case PPC::VPKUHUS:
    case PPC::VPKUWUM:
    case PPC::VPKUWUS:
    case PPC::VRLB:
    case PPC::VRLH:
    case PPC::VRLW:
    case PPC::VSL:
    case PPC::VSLB:
    case PPC::VSLH:
    case PPC::VSLO:
    case PPC::VSLW:
    case PPC::VSPLTB:
    case PPC::VSPLTH:
    case PPC::VSPLTW:
    case PPC::VSR:
    case PPC::VSRAB:
    case PPC::VSRAH:
    case PPC::VSRAW:
    case PPC::VSRB:
    case PPC::VSRH:
    case PPC::VSRO:
    case PPC::VSRW:
    case PPC::VSUBCUW:
    case PPC::VSUBFP:
    case PPC::VSUBSBS:
    case PPC::VSUBSHS:
    case PPC::VSUBSWS:
    case PPC::VSUBUBM:
    case PPC::VSUBUBS:
    case PPC::VSUBUHM:
    case PPC::VSUBUHS:
    case PPC::VSUBUWM:
    case PPC::VSUBUWS:
    case PPC::VSUM2SWS:
    case PPC::VSUM4SBS:
    case PPC::VSUM4SHS:
    case PPC::VSUM4UBS:
    case PPC::VSUMSWS:
    case PPC::VXOR: {
      // op: VD
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: VA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: VB
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::VSLDOI: {
      // op: VD
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: VA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: VB
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      // op: SH
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(15)) << 6;
      break;
    }
    case PPC::VMHADDSHS:
    case PPC::VMHRADDSHS:
    case PPC::VMLADDUHM:
    case PPC::VMSUMMBM:
    case PPC::VMSUMSHM:
    case PPC::VMSUMSHS:
    case PPC::VMSUMUBM:
    case PPC::VMSUMUHM:
    case PPC::VMSUMUHS:
    case PPC::VPERM:
    case PPC::VSEL: {
      // op: VD
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: VA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: VB
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 11;
      // op: VC
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 6;
      break;
    }
    case PPC::VMADDFP:
    case PPC::VNMSUBFP: {
      // op: VD
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: VA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 16;
      // op: VC
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= (op & UINT64_C(31)) << 6;
      // op: VB
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::VCFSX_0:
    case PPC::VCFUX_0:
    case PPC::VCTSXS_0:
    case PPC::VCTUXS_0:
    case PPC::VEXPTEFP:
    case PPC::VLOGEFP:
    case PPC::VREFP:
    case PPC::VRFIM:
    case PPC::VRFIN:
    case PPC::VRFIP:
    case PPC::VRFIZ:
    case PPC::VRSQRTEFP:
    case PPC::VUPKHPX:
    case PPC::VUPKHSB:
    case PPC::VUPKHSH:
    case PPC::VUPKLPX:
    case PPC::VUPKLSB:
    case PPC::VUPKLSH: {
      // op: VD
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      // op: VB
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case PPC::V_SET0: {
      // op: VD
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(31)) << 21;
      Value |= (op & UINT64_C(31)) << 16;
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
  default:
    std::string msg;
    raw_string_ostream Msg(msg);
    Msg << "Not supported instr: " << MI;
    report_fatal_error(Msg.str());
  }
  return Value;
}

