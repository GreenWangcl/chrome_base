/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register Enum Values                                                 *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass ARMMCRegisterClasses[];

namespace ARM {
enum {
  NoRegister,
  APSR = 1,
  CPSR = 2,
  D0 = 3,
  D1 = 4,
  D2 = 5,
  D3 = 6,
  D4 = 7,
  D5 = 8,
  D6 = 9,
  D7 = 10,
  D8 = 11,
  D9 = 12,
  D10 = 13,
  D11 = 14,
  D12 = 15,
  D13 = 16,
  D14 = 17,
  D15 = 18,
  D16 = 19,
  D17 = 20,
  D18 = 21,
  D19 = 22,
  D20 = 23,
  D21 = 24,
  D22 = 25,
  D23 = 26,
  D24 = 27,
  D25 = 28,
  D26 = 29,
  D27 = 30,
  D28 = 31,
  D29 = 32,
  D30 = 33,
  D31 = 34,
  FPEXC = 35,
  FPSCR = 36,
  FPSCR_NZCV = 37,
  FPSID = 38,
  ITSTATE = 39,
  LR = 40,
  MVFR0 = 41,
  MVFR1 = 42,
  PC = 43,
  Q0 = 44,
  Q1 = 45,
  Q2 = 46,
  Q3 = 47,
  Q4 = 48,
  Q5 = 49,
  Q6 = 50,
  Q7 = 51,
  Q8 = 52,
  Q9 = 53,
  Q10 = 54,
  Q11 = 55,
  Q12 = 56,
  Q13 = 57,
  Q14 = 58,
  Q15 = 59,
  R0 = 60,
  R1 = 61,
  R2 = 62,
  R3 = 63,
  R4 = 64,
  R5 = 65,
  R6 = 66,
  R7 = 67,
  R8 = 68,
  R9 = 69,
  R10 = 70,
  R11 = 71,
  R12 = 72,
  S0 = 73,
  S1 = 74,
  S2 = 75,
  S3 = 76,
  S4 = 77,
  S5 = 78,
  S6 = 79,
  S7 = 80,
  S8 = 81,
  S9 = 82,
  S10 = 83,
  S11 = 84,
  S12 = 85,
  S13 = 86,
  S14 = 87,
  S15 = 88,
  S16 = 89,
  S17 = 90,
  S18 = 91,
  S19 = 92,
  S20 = 93,
  S21 = 94,
  S22 = 95,
  S23 = 96,
  S24 = 97,
  S25 = 98,
  S26 = 99,
  S27 = 100,
  S28 = 101,
  S29 = 102,
  S30 = 103,
  S31 = 104,
  SP = 105,
  SPSR = 106,
  D0_D2 = 107,
  D1_D3 = 108,
  D2_D4 = 109,
  D3_D5 = 110,
  D4_D6 = 111,
  D5_D7 = 112,
  D6_D8 = 113,
  D7_D9 = 114,
  D8_D10 = 115,
  D9_D11 = 116,
  D10_D12 = 117,
  D11_D13 = 118,
  D12_D14 = 119,
  D13_D15 = 120,
  D14_D16 = 121,
  D15_D17 = 122,
  D16_D18 = 123,
  D17_D19 = 124,
  D18_D20 = 125,
  D19_D21 = 126,
  D20_D22 = 127,
  D21_D23 = 128,
  D22_D24 = 129,
  D23_D25 = 130,
  D24_D26 = 131,
  D25_D27 = 132,
  D26_D28 = 133,
  D27_D29 = 134,
  D28_D30 = 135,
  D29_D31 = 136,
  Q0_Q1 = 137,
  Q1_Q2 = 138,
  Q2_Q3 = 139,
  Q3_Q4 = 140,
  Q4_Q5 = 141,
  Q5_Q6 = 142,
  Q6_Q7 = 143,
  Q7_Q8 = 144,
  Q8_Q9 = 145,
  Q9_Q10 = 146,
  Q10_Q11 = 147,
  Q11_Q12 = 148,
  Q12_Q13 = 149,
  Q13_Q14 = 150,
  Q14_Q15 = 151,
  Q0_Q1_Q2_Q3 = 152,
  Q1_Q2_Q3_Q4 = 153,
  Q2_Q3_Q4_Q5 = 154,
  Q3_Q4_Q5_Q6 = 155,
  Q4_Q5_Q6_Q7 = 156,
  Q5_Q6_Q7_Q8 = 157,
  Q6_Q7_Q8_Q9 = 158,
  Q7_Q8_Q9_Q10 = 159,
  Q8_Q9_Q10_Q11 = 160,
  Q9_Q10_Q11_Q12 = 161,
  Q10_Q11_Q12_Q13 = 162,
  Q11_Q12_Q13_Q14 = 163,
  Q12_Q13_Q14_Q15 = 164,
  R0_R1 = 165,
  R2_R3 = 166,
  R4_R5 = 167,
  R6_R7 = 168,
  R8_R9 = 169,
  R10_R11 = 170,
  R12_SP = 171,
  D0_D1_D2 = 172,
  D1_D2_D3 = 173,
  D2_D3_D4 = 174,
  D3_D4_D5 = 175,
  D4_D5_D6 = 176,
  D5_D6_D7 = 177,
  D6_D7_D8 = 178,
  D7_D8_D9 = 179,
  D8_D9_D10 = 180,
  D9_D10_D11 = 181,
  D10_D11_D12 = 182,
  D11_D12_D13 = 183,
  D12_D13_D14 = 184,
  D13_D14_D15 = 185,
  D14_D15_D16 = 186,
  D15_D16_D17 = 187,
  D16_D17_D18 = 188,
  D17_D18_D19 = 189,
  D18_D19_D20 = 190,
  D19_D20_D21 = 191,
  D20_D21_D22 = 192,
  D21_D22_D23 = 193,
  D22_D23_D24 = 194,
  D23_D24_D25 = 195,
  D24_D25_D26 = 196,
  D25_D26_D27 = 197,
  D26_D27_D28 = 198,
  D27_D28_D29 = 199,
  D28_D29_D30 = 200,
  D29_D30_D31 = 201,
  D0_D2_D4 = 202,
  D1_D3_D5 = 203,
  D2_D4_D6 = 204,
  D3_D5_D7 = 205,
  D4_D6_D8 = 206,
  D5_D7_D9 = 207,
  D6_D8_D10 = 208,
  D7_D9_D11 = 209,
  D8_D10_D12 = 210,
  D9_D11_D13 = 211,
  D10_D12_D14 = 212,
  D11_D13_D15 = 213,
  D12_D14_D16 = 214,
  D13_D15_D17 = 215,
  D14_D16_D18 = 216,
  D15_D17_D19 = 217,
  D16_D18_D20 = 218,
  D17_D19_D21 = 219,
  D18_D20_D22 = 220,
  D19_D21_D23 = 221,
  D20_D22_D24 = 222,
  D21_D23_D25 = 223,
  D22_D24_D26 = 224,
  D23_D25_D27 = 225,
  D24_D26_D28 = 226,
  D25_D27_D29 = 227,
  D26_D28_D30 = 228,
  D27_D29_D31 = 229,
  D0_D2_D4_D6 = 230,
  D1_D3_D5_D7 = 231,
  D2_D4_D6_D8 = 232,
  D3_D5_D7_D9 = 233,
  D4_D6_D8_D10 = 234,
  D5_D7_D9_D11 = 235,
  D6_D8_D10_D12 = 236,
  D7_D9_D11_D13 = 237,
  D8_D10_D12_D14 = 238,
  D9_D11_D13_D15 = 239,
  D10_D12_D14_D16 = 240,
  D11_D13_D15_D17 = 241,
  D12_D14_D16_D18 = 242,
  D13_D15_D17_D19 = 243,
  D14_D16_D18_D20 = 244,
  D15_D17_D19_D21 = 245,
  D16_D18_D20_D22 = 246,
  D17_D19_D21_D23 = 247,
  D18_D20_D22_D24 = 248,
  D19_D21_D23_D25 = 249,
  D20_D22_D24_D26 = 250,
  D21_D23_D25_D27 = 251,
  D22_D24_D26_D28 = 252,
  D23_D25_D27_D29 = 253,
  D24_D26_D28_D30 = 254,
  D25_D27_D29_D31 = 255,
  D1_D2 = 256,
  D3_D4 = 257,
  D5_D6 = 258,
  D7_D8 = 259,
  D9_D10 = 260,
  D11_D12 = 261,
  D13_D14 = 262,
  D15_D16 = 263,
  D17_D18 = 264,
  D19_D20 = 265,
  D21_D22 = 266,
  D23_D24 = 267,
  D25_D26 = 268,
  D27_D28 = 269,
  D29_D30 = 270,
  D1_D2_D3_D4 = 271,
  D3_D4_D5_D6 = 272,
  D5_D6_D7_D8 = 273,
  D7_D8_D9_D10 = 274,
  D9_D10_D11_D12 = 275,
  D11_D12_D13_D14 = 276,
  D13_D14_D15_D16 = 277,
  D15_D16_D17_D18 = 278,
  D17_D18_D19_D20 = 279,
  D19_D20_D21_D22 = 280,
  D21_D22_D23_D24 = 281,
  D23_D24_D25_D26 = 282,
  D25_D26_D27_D28 = 283,
  D27_D28_D29_D30 = 284,
  NUM_TARGET_REGS 	// 285
};
}

// Register classes
namespace ARM {
enum {
  SPRRegClassID = 0,
  GPRRegClassID = 1,
  SPR_8RegClassID = 2,
  GPRnopcRegClassID = 3,
  rGPRRegClassID = 4,
  hGPRRegClassID = 5,
  tGPRRegClassID = 6,
  GPRnopc_and_hGPRRegClassID = 7,
  hGPR_and_rGPRRegClassID = 8,
  tcGPRRegClassID = 9,
  tGPR_and_tcGPRRegClassID = 10,
  hGPR_and_tcGPRRegClassID = 11,
  CCRRegClassID = 12,
  GPRspRegClassID = 13,
  DPRRegClassID = 14,
  DPR_VFP2RegClassID = 15,
  DPR_8RegClassID = 16,
  GPRPairRegClassID = 17,
  GPRPair_with_gsub_1_in_rGPRRegClassID = 18,
  GPRPair_with_gsub_0_in_tGPRRegClassID = 19,
  GPRPair_with_gsub_0_in_hGPRRegClassID = 20,
  GPRPair_with_gsub_0_in_tcGPRRegClassID = 21,
  GPRPair_with_gsub_1_in_tcGPRRegClassID = 22,
  GPRPair_with_gsub_0_in_tGPR_and_tcGPRRegClassID = 23,
  GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClassID = 24,
  GPRPair_with_gsub_1_in_GPRspRegClassID = 25,
  GPRPair_with_gsub_1_in_hGPR_and_tcGPRRegClassID = 26,
  DPairSpcRegClassID = 27,
  DPairSpc_with_ssub_0RegClassID = 28,
  DPairSpc_with_dsub_2_then_ssub_0RegClassID = 29,
  DPairSpc_with_dsub_0_in_DPR_8RegClassID = 30,
  DPairSpc_with_dsub_2_in_DPR_8RegClassID = 31,
  DPairRegClassID = 32,
  DPair_with_ssub_0RegClassID = 33,
  QPRRegClassID = 34,
  DPair_with_ssub_2RegClassID = 35,
  DPair_with_dsub_0_in_DPR_8RegClassID = 36,
  QPR_VFP2RegClassID = 37,
  DPair_with_dsub_1_in_DPR_8RegClassID = 38,
  QPR_8RegClassID = 39,
  DTripleRegClassID = 40,
  DTripleSpcRegClassID = 41,
  DTripleSpc_with_ssub_0RegClassID = 42,
  DTriple_with_ssub_0RegClassID = 43,
  DTriple_with_dsub_1_dsub_2_in_QPRRegClassID = 44,
  DTriple_with_qsub_0_in_QPRRegClassID = 45,
  DTriple_with_ssub_2RegClassID = 46,
  DTripleSpc_with_dsub_2_then_ssub_0RegClassID = 47,
  DTriple_with_dsub_2_then_ssub_0RegClassID = 48,
  DTripleSpc_with_dsub_4_then_ssub_0RegClassID = 49,
  DTripleSpc_with_dsub_0_in_DPR_8RegClassID = 50,
  DTriple_with_dsub_0_in_DPR_8RegClassID = 51,
  DTriple_with_qsub_0_in_QPR_VFP2RegClassID = 52,
  DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClassID = 53,
  DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClassID = 54,
  DTriple_with_dsub_1_in_DPR_8RegClassID = 55,
  DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClassID = 56,
  DTripleSpc_with_dsub_2_in_DPR_8RegClassID = 57,
  DTriple_with_dsub_2_in_DPR_8RegClassID = 58,
  DTripleSpc_with_dsub_4_in_DPR_8RegClassID = 59,
  DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClassID = 60,
  DTriple_with_qsub_0_in_QPR_8RegClassID = 61,
  DTriple_with_dsub_1_dsub_2_in_QPR_8RegClassID = 62,
  DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRRegClassID = 63,
  DQuadSpcRegClassID = 64,
  DQuadSpc_with_ssub_0RegClassID = 65,
  DQuadSpc_with_dsub_2_then_ssub_0RegClassID = 66,
  DQuadSpc_with_dsub_4_then_ssub_0RegClassID = 67,
  DQuadSpc_with_dsub_0_in_DPR_8RegClassID = 68,
  DQuadSpc_with_dsub_2_in_DPR_8RegClassID = 69,
  DQuadSpc_with_dsub_4_in_DPR_8RegClassID = 70,
  DQuadRegClassID = 71,
  DQuad_with_ssub_0RegClassID = 72,
  DQuad_with_ssub_2RegClassID = 73,
  QQPRRegClassID = 74,
  DQuad_with_dsub_1_dsub_2_in_QPRRegClassID = 75,
  DQuad_with_dsub_2_then_ssub_0RegClassID = 76,
  DQuad_with_dsub_3_then_ssub_0RegClassID = 77,
  DQuad_with_dsub_0_in_DPR_8RegClassID = 78,
  DQuad_with_qsub_0_in_QPR_VFP2RegClassID = 79,
  DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID = 80,
  DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClassID = 81,
  DQuad_with_dsub_1_in_DPR_8RegClassID = 82,
  DQuad_with_qsub_1_in_QPR_VFP2RegClassID = 83,
  DQuad_with_dsub_2_in_DPR_8RegClassID = 84,
  DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID = 85,
  DQuad_with_dsub_3_in_DPR_8RegClassID = 86,
  DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID = 87,
  DQuad_with_qsub_0_in_QPR_8RegClassID = 88,
  DQuad_with_dsub_1_dsub_2_in_QPR_8RegClassID = 89,
  DQuad_with_qsub_1_in_QPR_8RegClassID = 90,
  DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID = 91,
  QQQQPRRegClassID = 92,
  QQQQPR_with_ssub_0RegClassID = 93,
  QQQQPR_with_dsub_2_then_ssub_0RegClassID = 94,
  QQQQPR_with_dsub_5_then_ssub_0RegClassID = 95,
  QQQQPR_with_dsub_7_then_ssub_0RegClassID = 96,
  QQQQPR_with_dsub_0_in_DPR_8RegClassID = 97,
  QQQQPR_with_dsub_2_in_DPR_8RegClassID = 98,
  QQQQPR_with_dsub_4_in_DPR_8RegClassID = 99,
  QQQQPR_with_dsub_6_in_DPR_8RegClassID = 100
  };
}

// Subregister indices
namespace ARM {
enum {
  NoSubRegister,
  dsub_0,	// 1
  dsub_1,	// 2
  dsub_2,	// 3
  dsub_3,	// 4
  dsub_4,	// 5
  dsub_5,	// 6
  dsub_6,	// 7
  dsub_7,	// 8
  gsub_0,	// 9
  gsub_1,	// 10
  qqsub_0,	// 11
  qqsub_1,	// 12
  qsub_0,	// 13
  qsub_1,	// 14
  qsub_2,	// 15
  qsub_3,	// 16
  ssub_0,	// 17
  ssub_1,	// 18
  ssub_2,	// 19
  ssub_3,	// 20
  dsub_2_then_ssub_0,	// 21
  dsub_2_then_ssub_1,	// 22
  dsub_3_then_ssub_0,	// 23
  dsub_3_then_ssub_1,	// 24
  dsub_7_then_ssub_0,	// 25
  dsub_7_then_ssub_1,	// 26
  dsub_6_then_ssub_0,	// 27
  dsub_6_then_ssub_1,	// 28
  dsub_5_then_ssub_0,	// 29
  dsub_5_then_ssub_1,	// 30
  dsub_4_then_ssub_0,	// 31
  dsub_4_then_ssub_1,	// 32
  dsub_0_dsub_2,	// 33
  dsub_0_dsub_1_dsub_2,	// 34
  dsub_1_dsub_3,	// 35
  dsub_1_dsub_2_dsub_3,	// 36
  dsub_1_dsub_2,	// 37
  dsub_0_dsub_2_dsub_4,	// 38
  dsub_0_dsub_2_dsub_4_dsub_6,	// 39
  dsub_1_dsub_3_dsub_5,	// 40
  dsub_1_dsub_3_dsub_5_dsub_7,	// 41
  dsub_1_dsub_2_dsub_3_dsub_4,	// 42
  dsub_2_dsub_4,	// 43
  dsub_2_dsub_3_dsub_4,	// 44
  dsub_2_dsub_4_dsub_6,	// 45
  dsub_3_dsub_5,	// 46
  dsub_3_dsub_4_dsub_5,	// 47
  dsub_3_dsub_5_dsub_7,	// 48
  dsub_3_dsub_4,	// 49
  dsub_3_dsub_4_dsub_5_dsub_6,	// 50
  dsub_4_dsub_6,	// 51
  dsub_4_dsub_5_dsub_6,	// 52
  dsub_5_dsub_7,	// 53
  dsub_5_dsub_6_dsub_7,	// 54
  dsub_5_dsub_6,	// 55
  qsub_1_qsub_2,	// 56
  NUM_TARGET_SUBREGS
};
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*MC Register Information                                                     *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const MCPhysReg ARMRegDiffLists[] = {
  /* 0 */ 64930, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 17 */ 22, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 32 */ 26, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 45 */ 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 56 */ 64456, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 65 */ 64990, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 74 */ 65250, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 83 */ 28, 1, 1, 1, 1, 1, 1, 0,
  /* 91 */ 65396, 1, 1, 1, 1, 1, 1, 1, 25, 1, 1, 1, 67, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 9, 1, 1, 2, 1, 1, 24, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 0,
  /* 172 */ 65395, 1, 1, 1, 1, 1, 1, 1, 26, 1, 1, 1, 66, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 9, 1, 1, 2, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 0,
  /* 253 */ 65397, 1, 1, 1, 1, 1, 1, 1, 24, 1, 1, 1, 68, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 1, 1, 1, 9, 1, 1, 2, 1, 26, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 0,
  /* 331 */ 65394, 1, 1, 1, 1, 1, 1, 1, 27, 1, 1, 1, 47, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 9, 1, 1, 2, 1, 1, 22, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 0,
  /* 416 */ 65393, 1, 1, 1, 1, 1, 1, 1, 28, 1, 1, 1, 44, 1, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 1, 1, 1, 1, 9, 1, 1, 2, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 0,
  /* 505 */ 65392, 1, 1, 1, 1, 1, 1, 1, 29, 1, 1, 1, 41, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 9, 1, 1, 2, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 0,
  /* 598 */ 65391, 1, 1, 1, 1, 1, 1, 1, 30, 1, 1, 1, 38, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 1, 9, 1, 1, 2, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 0,
  /* 695 */ 65390, 1, 1, 1, 1, 1, 1, 1, 31, 1, 1, 1, 35, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 9, 1, 1, 2, 1, 1, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 0,
  /* 792 */ 65389, 1, 1, 1, 1, 1, 1, 1, 32, 1, 1, 1, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 10, 1, 2, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 0,
  /* 886 */ 30, 1, 1, 1, 1, 1, 0,
  /* 893 */ 65194, 1, 1, 1, 1, 1, 0,
  /* 900 */ 65398, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 69, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 9, 1, 1, 2, 28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 10, 1, 1, 1, 1, 0,
  /* 972 */ 65388, 1, 1, 1, 1, 1, 1, 1, 33, 1, 1, 1, 29, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 11, 2, 1, 1, 16, 1, 1, 1, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1060 */ 65309, 2, 2, 2, 26, 1, 1, 1, 67, 2, 2, 2, 2, 14, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 24, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 10, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1116 */ 65309, 2, 2, 2, 25, 1, 1, 1, 68, 2, 2, 2, 2, 13, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 25, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 10, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1172 */ 65309, 2, 2, 2, 27, 1, 1, 1, 66, 2, 2, 2, 2, 15, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 11, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1228 */ 65309, 2, 2, 2, 26, 1, 1, 1, 67, 2, 2, 2, 2, 14, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 24, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 11, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1284 */ 65309, 2, 2, 2, 25, 1, 1, 1, 68, 2, 2, 2, 2, 13, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 26, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 11, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1338 */ 65309, 2, 2, 2, 24, 1, 1, 1, 69, 2, 2, 2, 2, 12, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 27, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 11, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1392 */ 65309, 2, 2, 2, 28, 1, 1, 1, 47, 1, 17, 2, 2, 2, 2, 16, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 22, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 12, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1450 */ 65309, 2, 2, 2, 27, 1, 1, 1, 49, 1, 16, 2, 2, 2, 2, 15, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 12, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1508 */ 65309, 2, 2, 2, 24, 1, 1, 1, 69, 2, 2, 2, 2, 12, 1, 1, 1, 1, 9, 1, 1, 1, 1, 28, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 18, 2, 2, 4, 12, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1559 */ 65309, 2, 2, 2, 29, 1, 1, 1, 44, 1, 3, 1, 15, 2, 2, 2, 2, 17, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 13, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1619 */ 65309, 2, 2, 2, 28, 1, 1, 1, 46, 1, 3, 1, 14, 2, 2, 2, 2, 16, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 22, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 13, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1679 */ 65309, 2, 2, 2, 30, 1, 1, 1, 41, 1, 3, 1, 3, 1, 13, 2, 2, 2, 2, 18, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 14, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1741 */ 65309, 2, 2, 2, 29, 1, 1, 1, 43, 1, 3, 1, 3, 1, 12, 2, 2, 2, 2, 17, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 14, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1803 */ 65309, 2, 2, 2, 31, 1, 1, 1, 38, 1, 3, 1, 3, 1, 3, 1, 11, 2, 2, 2, 2, 19, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 15, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1867 */ 65309, 2, 2, 2, 30, 1, 1, 1, 40, 1, 3, 1, 3, 1, 3, 1, 10, 2, 2, 2, 2, 18, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 15, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1931 */ 65309, 2, 2, 2, 32, 1, 1, 1, 35, 1, 3, 1, 3, 1, 3, 1, 13, 2, 2, 2, 2, 20, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 16, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 1995 */ 65309, 2, 2, 2, 31, 1, 1, 1, 37, 1, 3, 1, 3, 1, 3, 1, 12, 2, 2, 2, 2, 19, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 16, 2, 2, 4, 2, 2, 16, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 2059 */ 65309, 2, 2, 2, 33, 1, 1, 1, 32, 1, 3, 1, 3, 1, 3, 1, 15, 2, 2, 2, 2, 21, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 18, 2, 4, 2, 2, 17, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 2121 */ 65309, 2, 2, 2, 32, 1, 1, 1, 34, 1, 3, 1, 3, 1, 3, 1, 14, 2, 2, 2, 2, 20, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 18, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 18, 2, 4, 2, 2, 17, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 2183 */ 65309, 2, 2, 2, 33, 1, 1, 1, 31, 1, 3, 1, 3, 1, 3, 1, 16, 2, 2, 2, 2, 21, 1, 1, 1, 1, 11, 1, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 22, 2, 2, 2, 2, 20, 4, 2, 2, 18, 1, 1, 1, 11, 1, 1, 1, 1, 0,
  /* 2242 */ 30, 1, 1, 1, 1, 0,
  /* 2248 */ 32, 1, 1, 1, 1, 0,
  /* 2254 */ 65399, 1, 1, 1, 1, 1, 1, 1, 22, 1, 1, 1, 70, 1, 1, 1, 1, 1, 1, 1, 12, 1, 1, 1, 10, 1, 1, 31, 1, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 12, 1, 1, 1, 11, 1, 1, 1, 0,
  /* 2314 */ 65309, 2, 2, 2, 23, 1, 1, 1, 70, 2, 2, 2, 2, 11, 1, 1, 1, 1, 9, 1, 1, 1, 1, 29, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 18, 2, 2, 4, 12, 1, 1, 1, 11, 1, 1, 1, 0,
  /* 2364 */ 65309, 2, 2, 2, 23, 1, 1, 1, 70, 2, 2, 2, 13, 1, 1, 1, 10, 1, 1, 1, 30, 1, 1, 1, 1, 1, 1, 1, 21, 2, 2, 2, 20, 2, 2, 15, 1, 1, 1, 11, 1, 1, 1, 0,
  /* 2408 */ 65309, 2, 2, 2, 34, 1, 1, 1, 29, 1, 3, 1, 3, 1, 3, 1, 17, 2, 2, 2, 2, 22, 1, 1, 1, 1, 11, 1, 1, 1, 1, 16, 1, 1, 1, 1, 1, 1, 1, 1, 22, 2, 2, 2, 2, 20, 4, 2, 2, 18, 1, 1, 1, 12, 1, 1, 1, 0,
  /* 2466 */ 65387, 1, 1, 1, 1, 1, 1, 1, 34, 1, 1, 1, 26, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 13, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 12, 1, 1, 1, 0,
  /* 2542 */ 65309, 2, 2, 2, 34, 1, 1, 1, 28, 1, 3, 1, 3, 1, 3, 1, 20, 2, 2, 2, 23, 1, 1, 1, 12, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 1, 24, 2, 2, 2, 24, 2, 2, 19, 1, 1, 1, 12, 1, 1, 1, 0,
  /* 2594 */ 65413, 1, 1, 1, 27, 1, 71, 1, 1, 1, 1, 1, 15, 2, 11, 1, 1, 1, 1, 28, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 12, 1, 1, 1, 0,
  /* 2645 */ 65337, 2, 2, 27, 1, 1, 69, 2, 2, 2, 15, 1, 1, 1, 10, 1, 1, 1, 1, 1, 26, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 11, 1, 1, 12, 1, 1, 1, 0,
  /* 2690 */ 65337, 2, 2, 26, 1, 1, 70, 2, 2, 2, 14, 1, 1, 1, 10, 1, 1, 1, 1, 1, 27, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 11, 1, 1, 12, 1, 1, 1, 0,
  /* 2735 */ 65412, 1, 1, 1, 28, 1, 70, 1, 1, 1, 1, 1, 16, 2, 11, 1, 1, 1, 1, 27, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 1, 12, 1, 1, 1, 0,
  /* 2786 */ 65414, 1, 1, 1, 26, 1, 72, 1, 1, 1, 1, 1, 14, 2, 11, 1, 1, 1, 30, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 12, 1, 1, 12, 1, 1, 1, 0,
  /* 2834 */ 65337, 2, 2, 28, 1, 1, 68, 2, 2, 2, 16, 1, 1, 1, 10, 1, 1, 1, 1, 1, 25, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 12, 1, 1, 12, 1, 1, 1, 0,
  /* 2879 */ 65337, 2, 2, 27, 1, 1, 69, 2, 2, 2, 15, 1, 1, 1, 10, 1, 1, 1, 1, 1, 26, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 12, 1, 1, 12, 1, 1, 1, 0,
  /* 2924 */ 65337, 2, 2, 26, 1, 1, 70, 2, 2, 2, 14, 1, 1, 1, 10, 1, 1, 1, 1, 28, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 12, 1, 1, 12, 1, 1, 1, 0,
  /* 2967 */ 65337, 2, 2, 25, 1, 1, 71, 2, 2, 2, 13, 1, 1, 1, 10, 1, 1, 1, 1, 29, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 12, 1, 1, 12, 1, 1, 1, 0,
  /* 3010 */ 65411, 1, 1, 1, 29, 1, 69, 1, 1, 1, 1, 1, 17, 2, 11, 1, 1, 1, 1, 26, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 1, 12, 1, 1, 1, 0,
  /* 3061 */ 65337, 2, 2, 29, 1, 1, 67, 2, 2, 2, 17, 1, 1, 1, 10, 1, 1, 1, 1, 1, 24, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 13, 1, 1, 12, 1, 1, 1, 0,
  /* 3106 */ 65337, 2, 2, 28, 1, 1, 68, 2, 2, 2, 16, 1, 1, 1, 10, 1, 1, 1, 1, 1, 25, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 13, 1, 1, 12, 1, 1, 1, 0,
  /* 3151 */ 65337, 2, 2, 25, 1, 1, 71, 2, 2, 2, 13, 1, 1, 1, 10, 1, 1, 1, 30, 1, 1, 1, 1, 1, 1, 22, 2, 4, 20, 2, 2, 2, 13, 1, 1, 12, 1, 1, 1, 0,
  /* 3191 */ 65410, 1, 1, 1, 30, 1, 68, 1, 1, 1, 1, 1, 18, 2, 11, 1, 1, 1, 1, 25, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 1, 12, 1, 1, 1, 0,
  /* 3242 */ 65337, 2, 2, 30, 1, 1, 48, 1, 17, 2, 2, 2, 18, 1, 1, 1, 10, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 14, 1, 1, 12, 1, 1, 1, 0,
  /* 3289 */ 65337, 2, 2, 29, 1, 1, 50, 1, 16, 2, 2, 2, 17, 1, 1, 1, 10, 1, 1, 1, 1, 1, 24, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 14, 1, 1, 12, 1, 1, 1, 0,
  /* 3336 */ 65409, 1, 1, 1, 31, 1, 49, 1, 1, 1, 15, 1, 1, 1, 1, 1, 19, 2, 11, 1, 1, 1, 1, 24, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 12, 1, 1, 1, 0,
  /* 3391 */ 65337, 2, 2, 31, 1, 1, 45, 1, 3, 1, 15, 2, 2, 2, 19, 1, 1, 1, 10, 1, 1, 1, 1, 1, 22, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 15, 1, 1, 12, 1, 1, 1, 0,
  /* 3440 */ 65337, 2, 2, 30, 1, 1, 47, 1, 3, 1, 14, 2, 2, 2, 18, 1, 1, 1, 10, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 15, 1, 1, 12, 1, 1, 1, 0,
  /* 3489 */ 65408, 1, 1, 1, 32, 1, 46, 1, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 20, 2, 11, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 1, 1, 12, 1, 1, 1, 0,
  /* 3548 */ 65337, 2, 2, 32, 1, 1, 42, 1, 3, 1, 3, 1, 13, 2, 2, 2, 20, 1, 1, 1, 10, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 16, 1, 1, 12, 1, 1, 1, 0,
  /* 3599 */ 65337, 2, 2, 31, 1, 1, 44, 1, 3, 1, 3, 1, 12, 2, 2, 2, 19, 1, 1, 1, 10, 1, 1, 1, 1, 1, 22, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 16, 1, 1, 12, 1, 1, 1, 0,
  /* 3650 */ 65407, 1, 1, 1, 33, 1, 43, 1, 1, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 1, 21, 2, 11, 1, 1, 1, 1, 22, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 17, 1, 1, 12, 1, 1, 1, 0,
  /* 3709 */ 65337, 2, 2, 33, 1, 1, 39, 1, 3, 1, 3, 1, 15, 2, 2, 2, 21, 1, 1, 1, 10, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 17, 1, 1, 12, 1, 1, 1, 0,
  /* 3760 */ 65337, 2, 2, 32, 1, 1, 41, 1, 3, 1, 3, 1, 14, 2, 2, 2, 20, 1, 1, 1, 10, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 17, 1, 1, 12, 1, 1, 1, 0,
  /* 3811 */ 65406, 1, 1, 1, 34, 1, 40, 1, 1, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 1, 22, 2, 11, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 12, 1, 1, 1, 0,
  /* 3870 */ 65337, 2, 2, 34, 1, 1, 36, 1, 3, 1, 3, 1, 17, 2, 2, 2, 22, 1, 1, 1, 10, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 18, 1, 1, 12, 1, 1, 1, 0,
  /* 3921 */ 65337, 2, 2, 33, 1, 1, 38, 1, 3, 1, 3, 1, 16, 2, 2, 2, 21, 1, 1, 1, 10, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 18, 2, 2, 2, 2, 2, 18, 1, 1, 12, 1, 1, 1, 0,
  /* 3972 */ 65405, 1, 1, 1, 35, 1, 37, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 23, 2, 11, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 12, 1, 1, 1, 0,
  /* 4031 */ 65337, 2, 2, 35, 1, 1, 33, 1, 3, 1, 3, 1, 19, 2, 2, 2, 23, 1, 1, 1, 11, 1, 1, 1, 1, 18, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 20, 2, 2, 2, 2, 19, 1, 1, 12, 1, 1, 1, 0,
  /* 4080 */ 65337, 2, 2, 34, 1, 1, 35, 1, 3, 1, 3, 1, 18, 2, 2, 2, 22, 1, 1, 1, 11, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 22, 2, 4, 2, 20, 2, 2, 2, 2, 19, 1, 1, 12, 1, 1, 1, 0,
  /* 4129 */ 65404, 1, 1, 1, 36, 1, 34, 1, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 24, 2, 12, 1, 1, 1, 19, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 20, 1, 1, 12, 1, 1, 1, 0,
  /* 4185 */ 65337, 2, 2, 35, 1, 1, 32, 1, 3, 1, 3, 1, 20, 2, 2, 2, 23, 1, 1, 1, 12, 1, 1, 1, 18, 1, 1, 1, 1, 1, 1, 24, 4, 2, 22, 2, 2, 2, 20, 1, 1, 12, 1, 1, 1, 0,
  /* 4231 */ 32, 1, 1, 1, 0,
  /* 4236 */ 64516, 1, 1, 1, 0,
  /* 4241 */ 65013, 1, 1, 1, 0,
  /* 4246 */ 65280, 1, 1, 1, 0,
  /* 4251 */ 65362, 1, 1, 1, 0,
  /* 4256 */ 65415, 1, 1, 1, 25, 1, 73, 1, 1, 1, 1, 1, 13, 2, 11, 1, 1, 32, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 13, 1, 1, 12, 1, 1, 0,
  /* 4298 */ 65337, 2, 2, 24, 1, 1, 72, 2, 2, 2, 12, 1, 1, 1, 10, 1, 1, 1, 31, 1, 1, 1, 1, 1, 1, 22, 2, 4, 20, 2, 2, 2, 13, 1, 1, 12, 1, 1, 0,
  /* 4337 */ 65337, 2, 2, 24, 1, 1, 72, 2, 2, 14, 1, 1, 11, 1, 1, 32, 1, 1, 1, 1, 1, 23, 2, 24, 2, 2, 14, 1, 1, 12, 1, 1, 0,
  /* 4370 */ 65309, 2, 2, 2, 22, 1, 1, 1, 71, 2, 2, 2, 12, 1, 1, 1, 10, 1, 1, 1, 31, 1, 1, 1, 1, 1, 1, 22, 2, 2, 2, 20, 2, 2, 15, 1, 1, 12, 1, 1, 0,
  /* 4411 */ 65337, 2, 2, 36, 1, 1, 30, 1, 3, 1, 3, 1, 21, 2, 2, 2, 24, 1, 1, 1, 12, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 24, 4, 2, 22, 2, 2, 2, 20, 1, 1, 13, 1, 1, 0,
  /* 4456 */ 65309, 2, 2, 2, 35, 1, 1, 1, 26, 1, 3, 1, 3, 1, 3, 1, 21, 2, 2, 2, 24, 1, 1, 1, 12, 1, 1, 1, 17, 1, 1, 1, 1, 1, 1, 24, 2, 2, 2, 24, 2, 2, 20, 1, 1, 13, 1, 1, 0,
  /* 4505 */ 65403, 1, 1, 1, 37, 1, 31, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 25, 2, 13, 1, 1, 18, 1, 1, 1, 1, 1, 25, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 21, 1, 1, 13, 1, 1, 0,
  /* 4555 */ 65337, 2, 2, 36, 1, 1, 29, 1, 3, 1, 3, 1, 24, 2, 2, 25, 1, 1, 13, 1, 1, 18, 1, 1, 1, 1, 1, 28, 2, 24, 2, 2, 21, 1, 1, 13, 1, 1, 0,
  /* 4594 */ 65367, 1, 1, 28, 1, 71, 1, 1, 1, 1, 16, 1, 1, 11, 1, 1, 1, 1, 28, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 13, 1, 1, 0,
  /* 4638 */ 65367, 1, 1, 27, 1, 72, 1, 1, 1, 1, 15, 1, 1, 11, 1, 1, 1, 1, 29, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 13, 1, 1, 0,
  /* 4682 */ 65367, 1, 1, 27, 1, 72, 1, 1, 1, 1, 15, 1, 1, 11, 1, 1, 1, 30, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 12, 1, 13, 1, 1, 0,
  /* 4724 */ 65507, 1, 101, 1, 1, 1, 16, 1, 12, 1, 1, 1, 30, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 12, 1, 13, 1, 1, 0,
  /* 4760 */ 65432, 2, 28, 1, 71, 4, 16, 1, 1, 11, 1, 1, 1, 1, 28, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 12, 1, 13, 1, 1, 0,
  /* 4794 */ 65432, 2, 27, 1, 72, 4, 15, 1, 1, 11, 1, 1, 1, 1, 29, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 12, 1, 13, 1, 1, 0,
  /* 4828 */ 65367, 1, 1, 29, 1, 70, 1, 1, 1, 1, 17, 1, 1, 11, 1, 1, 1, 1, 27, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 13, 1, 1, 0,
  /* 4872 */ 65367, 1, 1, 28, 1, 71, 1, 1, 1, 1, 16, 1, 1, 11, 1, 1, 1, 1, 28, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 13, 1, 1, 0,
  /* 4916 */ 65506, 1, 101, 1, 1, 1, 17, 1, 12, 1, 1, 1, 29, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 13, 1, 13, 1, 1, 0,
  /* 4952 */ 65367, 1, 1, 26, 1, 73, 1, 1, 1, 1, 14, 1, 1, 11, 1, 1, 1, 31, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 13, 1, 13, 1, 1, 0,
  /* 4993 */ 65367, 1, 1, 26, 1, 73, 1, 1, 1, 1, 14, 1, 1, 11, 1, 1, 32, 1, 2, 1, 24, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 13, 1, 13, 1, 1, 0,
  /* 5031 */ 65508, 1, 101, 1, 1, 1, 15, 1, 12, 1, 1, 32, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 13, 1, 13, 1, 1, 0,
  /* 5064 */ 65432, 2, 29, 1, 70, 4, 17, 1, 1, 11, 1, 1, 1, 1, 27, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 13, 1, 13, 1, 1, 0,
  /* 5098 */ 65432, 2, 28, 1, 71, 4, 16, 1, 1, 11, 1, 1, 1, 1, 28, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 13, 1, 13, 1, 1, 0,
  /* 5132 */ 65432, 2, 27, 1, 72, 4, 15, 1, 1, 11, 1, 1, 1, 30, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 13, 1, 13, 1, 1, 0,
  /* 5164 */ 65432, 2, 26, 1, 73, 4, 14, 1, 1, 11, 1, 1, 1, 31, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 13, 1, 13, 1, 1, 0,
  /* 5196 */ 65367, 1, 1, 30, 1, 69, 1, 1, 1, 1, 18, 1, 1, 11, 1, 1, 1, 1, 26, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 13, 1, 1, 0,
  /* 5240 */ 65367, 1, 1, 29, 1, 70, 1, 1, 1, 1, 17, 1, 1, 11, 1, 1, 1, 1, 27, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 13, 1, 1, 0,
  /* 5284 */ 65505, 1, 101, 1, 1, 1, 18, 1, 12, 1, 1, 1, 28, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 14, 1, 13, 1, 1, 0,
  /* 5320 */ 65432, 2, 30, 1, 69, 4, 18, 1, 1, 11, 1, 1, 1, 1, 26, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 14, 1, 13, 1, 1, 0,
  /* 5354 */ 65432, 2, 29, 1, 70, 4, 17, 1, 1, 11, 1, 1, 1, 1, 27, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 14, 1, 13, 1, 1, 0,
  /* 5388 */ 65432, 2, 26, 1, 73, 4, 14, 1, 1, 11, 1, 1, 32, 1, 1, 1, 1, 24, 2, 2, 22, 2, 2, 14, 1, 13, 1, 1, 0,
  /* 5417 */ 65367, 1, 1, 31, 1, 68, 1, 1, 1, 1, 19, 1, 1, 11, 1, 1, 1, 1, 25, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 13, 1, 1, 0,
  /* 5461 */ 65367, 1, 1, 30, 1, 69, 1, 1, 1, 1, 18, 1, 1, 11, 1, 1, 1, 1, 26, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 13, 1, 1, 0,
  /* 5505 */ 65504, 1, 101, 1, 1, 1, 19, 1, 12, 1, 1, 1, 27, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 15, 1, 13, 1, 1, 0,
  /* 5541 */ 65432, 2, 31, 1, 68, 4, 19, 1, 1, 11, 1, 1, 1, 1, 25, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 15, 1, 13, 1, 1, 0,
  /* 5575 */ 65432, 2, 30, 1, 69, 4, 18, 1, 1, 11, 1, 1, 1, 1, 26, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 15, 1, 13, 1, 1, 0,
  /* 5609 */ 65367, 1, 1, 32, 1, 49, 1, 1, 1, 15, 1, 1, 1, 1, 20, 1, 1, 11, 1, 1, 1, 1, 24, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 16, 1, 13, 1, 1, 0,
  /* 5657 */ 65367, 1, 1, 31, 1, 51, 1, 16, 1, 1, 1, 1, 19, 1, 1, 11, 1, 1, 1, 1, 25, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 16, 1, 13, 1, 1, 0,
  /* 5703 */ 65503, 1, 101, 1, 1, 1, 20, 1, 12, 1, 1, 1, 26, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 16, 1, 13, 1, 1, 0,
  /* 5739 */ 65432, 2, 32, 1, 49, 1, 17, 4, 20, 1, 1, 11, 1, 1, 1, 1, 24, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 16, 1, 13, 1, 1, 0,
  /* 5775 */ 65432, 2, 31, 1, 51, 1, 16, 4, 19, 1, 1, 11, 1, 1, 1, 1, 25, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 16, 1, 13, 1, 1, 0,
  /* 5811 */ 65367, 1, 1, 33, 1, 46, 1, 1, 1, 1, 1, 15, 1, 1, 1, 1, 21, 1, 1, 11, 1, 1, 1, 1, 23, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 17, 1, 13, 1, 1, 0,
  /* 5861 */ 65367, 1, 1, 32, 1, 48, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 20, 1, 1, 11, 1, 1, 1, 1, 24, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 17, 1, 13, 1, 1, 0,
  /* 5911 */ 65502, 1, 83, 1, 1, 1, 15, 1, 1, 1, 21, 1, 12, 1, 1, 1, 25, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 17, 1, 13, 1, 1, 0,
  /* 5951 */ 65432, 2, 33, 1, 46, 1, 3, 1, 15, 4, 21, 1, 1, 11, 1, 1, 1, 1, 23, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 17, 1, 13, 1, 1, 0,
  /* 5989 */ 65432, 2, 32, 1, 48, 1, 3, 1, 14, 4, 20, 1, 1, 11, 1, 1, 1, 1, 24, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 17, 1, 13, 1, 1, 0,
  /* 6027 */ 65367, 1, 1, 34, 1, 43, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 22, 1, 1, 11, 1, 1, 1, 1, 22, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 13, 1, 1, 0,
  /* 6077 */ 65367, 1, 1, 33, 1, 45, 1, 1, 1, 1, 1, 16, 1, 1, 1, 1, 21, 1, 1, 11, 1, 1, 1, 1, 23, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 13, 1, 1, 0,
  /* 6127 */ 65501, 1, 81, 1, 1, 1, 17, 1, 1, 1, 22, 1, 12, 1, 1, 1, 24, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 18, 1, 13, 1, 1, 0,
  /* 6167 */ 65432, 2, 34, 1, 43, 1, 3, 1, 17, 4, 22, 1, 1, 11, 1, 1, 1, 1, 22, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 18, 1, 13, 1, 1, 0,
  /* 6205 */ 65432, 2, 33, 1, 45, 1, 3, 1, 16, 4, 21, 1, 1, 11, 1, 1, 1, 1, 23, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 18, 1, 13, 1, 1, 0,
  /* 6243 */ 65367, 1, 1, 35, 1, 40, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 23, 1, 1, 11, 1, 1, 1, 1, 21, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 13, 1, 1, 0,
  /* 6293 */ 65367, 1, 1, 34, 1, 42, 1, 1, 1, 1, 1, 18, 1, 1, 1, 1, 22, 1, 1, 11, 1, 1, 1, 1, 22, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 13, 1, 1, 0,
  /* 6343 */ 65500, 1, 79, 1, 1, 1, 19, 1, 1, 1, 23, 1, 12, 1, 1, 1, 23, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 19, 1, 13, 1, 1, 0,
  /* 6383 */ 65432, 2, 35, 1, 40, 1, 3, 1, 19, 4, 23, 1, 1, 11, 1, 1, 1, 1, 21, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 19, 1, 13, 1, 1, 0,
  /* 6421 */ 65432, 2, 34, 1, 42, 1, 3, 1, 18, 4, 22, 1, 1, 11, 1, 1, 1, 1, 22, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 19, 1, 13, 1, 1, 0,
  /* 6459 */ 65367, 1, 1, 36, 1, 37, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 24, 1, 1, 11, 1, 1, 1, 1, 20, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 20, 1, 13, 1, 1, 0,
  /* 6509 */ 65367, 1, 1, 35, 1, 39, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 23, 1, 1, 11, 1, 1, 1, 1, 21, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 20, 1, 13, 1, 1, 0,
  /* 6559 */ 65499, 1, 77, 1, 1, 1, 21, 1, 1, 1, 24, 1, 12, 1, 1, 1, 22, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 20, 1, 13, 1, 1, 0,
  /* 6599 */ 65432, 2, 36, 1, 37, 1, 3, 1, 21, 4, 24, 1, 1, 11, 1, 1, 1, 1, 20, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 20, 1, 13, 1, 1, 0,
  /* 6637 */ 65432, 2, 35, 1, 39, 1, 3, 1, 20, 4, 23, 1, 1, 11, 1, 1, 1, 1, 21, 1, 1, 1, 1, 24, 2, 2, 2, 20, 2, 2, 2, 2, 20, 1, 13, 1, 1, 0,
  /* 6675 */ 65367, 1, 1, 36, 1, 36, 1, 1, 1, 1, 1, 22, 1, 1, 1, 1, 24, 1, 1, 12, 1, 1, 1, 20, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 21, 1, 13, 1, 1, 0,
  /* 6723 */ 65498, 1, 75, 1, 1, 1, 23, 1, 1, 1, 25, 1, 12, 1, 1, 1, 21, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 21, 1, 13, 1, 1, 0,
  /* 6763 */ 65367, 1, 1, 37, 1, 34, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 25, 1, 1, 12, 1, 1, 1, 19, 1, 2, 1, 24, 1, 1, 1, 1, 1, 1, 22, 1, 1, 1, 1, 1, 1, 21, 1, 13, 1, 1, 0,
  /* 6810 */ 65432, 2, 37, 1, 34, 1, 3, 1, 23, 4, 25, 1, 1, 12, 1, 1, 1, 19, 1, 1, 1, 1, 24, 2, 2, 2, 22, 2, 2, 2, 21, 1, 13, 1, 1, 0,
  /* 6846 */ 65432, 2, 36, 1, 36, 1, 3, 1, 22, 4, 24, 1, 1, 12, 1, 1, 1, 20, 1, 1, 1, 1, 24, 2, 2, 2, 22, 2, 2, 2, 21, 1, 13, 1, 1, 0,
  /* 6882 */ 65497, 1, 73, 1, 1, 1, 25, 1, 1, 1, 26, 1, 13, 1, 1, 20, 1, 1, 1, 25, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 22, 1, 13, 1, 1, 0,
  /* 6919 */ 65367, 1, 1, 37, 1, 33, 1, 1, 1, 1, 1, 24, 1, 1, 1, 1, 25, 1, 1, 13, 1, 1, 19, 1, 2, 1, 25, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 22, 1, 13, 1, 1, 0,
  /* 6963 */ 65432, 2, 37, 1, 33, 1, 3, 1, 24, 4, 25, 1, 1, 13, 1, 1, 19, 1, 1, 1, 1, 26, 2, 2, 24, 2, 2, 22, 1, 13, 1, 1, 0,
  /* 6996 */ 32, 1, 1, 0,
  /* 7000 */ 65382, 1, 1, 0,
  /* 7004 */ 139, 65489, 48, 65489, 12, 121, 65416, 1, 1, 0,
  /* 7014 */ 138, 65490, 47, 65490, 12, 121, 65416, 1, 1, 0,
  /* 7024 */ 137, 65491, 46, 65491, 12, 121, 65416, 1, 1, 0,
  /* 7034 */ 136, 65492, 45, 65492, 12, 121, 65416, 1, 1, 0,
  /* 7044 */ 135, 65493, 44, 65493, 12, 121, 65416, 1, 1, 0,
  /* 7054 */ 134, 65494, 43, 65494, 12, 121, 65416, 1, 1, 0,
  /* 7064 */ 133, 65495, 42, 65495, 12, 121, 65416, 1, 1, 0,
  /* 7074 */ 132, 65496, 41, 65496, 12, 121, 65416, 1, 1, 0,
  /* 7084 */ 131, 65497, 40, 65497, 12, 121, 65416, 1, 1, 0,
  /* 7094 */ 130, 65498, 39, 65498, 12, 121, 65416, 1, 1, 0,
  /* 7104 */ 65489, 133, 65416, 1, 1, 0,
  /* 7110 */ 65490, 133, 65416, 1, 1, 0,
  /* 7116 */ 65491, 133, 65416, 1, 1, 0,
  /* 7122 */ 65492, 133, 65416, 1, 1, 0,
  /* 7128 */ 65493, 133, 65416, 1, 1, 0,
  /* 7134 */ 65494, 133, 65416, 1, 1, 0,
  /* 7140 */ 65495, 133, 65416, 1, 1, 0,
  /* 7146 */ 65496, 133, 65416, 1, 1, 0,
  /* 7152 */ 65497, 133, 65416, 1, 1, 0,
  /* 7158 */ 65498, 133, 65416, 1, 1, 0,
  /* 7164 */ 129, 65499, 38, 65499, 133, 65416, 1, 1, 0,
  /* 7173 */ 65078, 1, 3, 1, 3, 1, 3, 1, 0,
  /* 7182 */ 65134, 1, 3, 1, 3, 1, 0,
  /* 7189 */ 65324, 1, 3, 1, 0,
  /* 7194 */ 65367, 1, 1, 25, 1, 74, 1, 1, 1, 1, 13, 1, 1, 11, 1, 1, 33, 1, 2, 1, 24, 1, 1, 1, 1, 22, 1, 1, 1, 1, 14, 1, 13, 1, 0,
  /* 7229 */ 65509, 1, 101, 1, 1, 1, 14, 1, 12, 1, 34, 1, 1, 1, 25, 1, 1, 1, 23, 1, 1, 1, 14, 1, 13, 1, 0,
  /* 7256 */ 65416, 1, 1, 1, 24, 1, 74, 1, 1, 1, 14, 13, 1, 34, 1, 1, 1, 25, 1, 1, 1, 23, 1, 1, 1, 14, 1, 13, 1, 0,
  /* 7286 */ 65367, 1, 1, 25, 1, 74, 1, 1, 1, 14, 1, 12, 1, 34, 1, 2, 25, 1, 1, 1, 23, 1, 1, 1, 14, 1, 13, 1, 0,
  /* 7315 */ 65432, 2, 25, 1, 74, 4, 13, 1, 1, 11, 1, 1, 33, 1, 1, 1, 1, 24, 2, 2, 22, 2, 2, 14, 1, 13, 1, 0,
  /* 7343 */ 65337, 2, 2, 23, 1, 1, 73, 2, 2, 13, 1, 1, 11, 1, 1, 33, 1, 1, 1, 1, 24, 2, 24, 2, 2, 14, 1, 13, 1, 0,
  /* 7373 */ 65432, 2, 25, 1, 74, 17, 1, 12, 1, 34, 1, 1, 1, 25, 2, 24, 2, 15, 1, 13, 1, 0,
  /* 7395 */ 65367, 1, 1, 38, 1, 31, 1, 1, 1, 1, 1, 25, 1, 1, 1, 1, 26, 1, 1, 13, 1, 1, 18, 1, 2, 1, 26, 1, 1, 1, 1, 24, 1, 1, 1, 1, 22, 1, 14, 1, 0,
  /* 7436 */ 65432, 2, 38, 1, 31, 1, 3, 1, 25, 4, 26, 1, 1, 13, 1, 1, 18, 1, 1, 1, 1, 26, 2, 2, 24, 2, 2, 22, 1, 14, 1, 0,
  /* 7468 */ 65337, 2, 2, 37, 1, 1, 27, 1, 3, 1, 3, 1, 25, 2, 2, 26, 1, 1, 13, 1, 1, 18, 1, 1, 1, 1, 28, 2, 24, 2, 2, 22, 1, 14, 1, 0,
  /* 7504 */ 65496, 1, 71, 1, 1, 1, 27, 1, 1, 1, 27, 1, 14, 1, 19, 1, 1, 1, 27, 1, 1, 1, 25, 1, 1, 1, 23, 1, 14, 1, 0,
  /* 7535 */ 65402, 1, 1, 1, 38, 1, 28, 1, 1, 1, 1, 1, 1, 1, 27, 1, 1, 1, 28, 14, 1, 19, 1, 1, 1, 27, 1, 1, 1, 25, 1, 1, 1, 23, 1, 14, 1, 0,
  /* 7573 */ 65367, 1, 1, 38, 1, 30, 1, 1, 1, 1, 1, 27, 1, 1, 1, 27, 1, 14, 1, 19, 2, 1, 27, 1, 1, 1, 25, 1, 1, 1, 23, 1, 14, 1, 0,
  /* 7608 */ 65432, 2, 38, 1, 30, 1, 3, 1, 30, 27, 1, 14, 1, 19, 1, 1, 1, 28, 2, 26, 2, 23, 1, 14, 1, 0,
  /* 7634 */ 29, 73, 2, 17, 1, 12, 1, 1, 1, 30, 1, 1, 26, 2, 2, 22, 2, 2, 2, 13, 14, 1, 0,
  /* 7657 */ 28, 74, 2, 16, 1, 12, 1, 1, 1, 31, 1, 1, 26, 2, 2, 22, 2, 2, 2, 13, 14, 1, 0,
  /* 7680 */ 30, 72, 2, 18, 1, 12, 1, 1, 1, 29, 1, 1, 26, 2, 2, 22, 2, 2, 2, 14, 14, 1, 0,
  /* 7703 */ 29, 73, 2, 17, 1, 12, 1, 1, 1, 30, 1, 1, 26, 2, 2, 22, 2, 2, 2, 14, 14, 1, 0,
  /* 7726 */ 28, 74, 2, 16, 1, 12, 1, 1, 32, 1, 1, 26, 2, 2, 22, 2, 2, 14, 14, 1, 0,
  /* 7747 */ 27, 75, 2, 15, 1, 12, 1, 1, 33, 1, 1, 26, 2, 2, 22, 2, 2, 14, 14, 1, 0,
  /* 7768 */ 31, 71, 2, 19, 1, 12, 1, 1, 1, 28, 1, 1, 26, 2, 2, 22, 2, 2, 2, 15, 14, 1, 0,
  /* 7791 */ 30, 72, 2, 18, 1, 12, 1, 1, 1, 29, 1, 1, 26, 2, 2, 22, 2, 2, 2, 15, 14, 1, 0,
  /* 7814 */ 27, 75, 2, 15, 1, 12, 1, 34, 1, 1, 26, 2, 24, 2, 15, 14, 1, 0,
  /* 7832 */ 32, 70, 2, 20, 1, 12, 1, 1, 1, 27, 1, 1, 26, 2, 2, 22, 2, 2, 2, 16, 14, 1, 0,
  /* 7855 */ 31, 71, 2, 19, 1, 12, 1, 1, 1, 28, 1, 1, 26, 2, 2, 22, 2, 2, 2, 16, 14, 1, 0,
  /* 7878 */ 33, 69, 2, 21, 1, 12, 1, 1, 1, 26, 1, 1, 26, 2, 2, 22, 2, 2, 2, 17, 14, 1, 0,
  /* 7901 */ 32, 70, 2, 20, 1, 12, 1, 1, 1, 27, 1, 1, 26, 2, 2, 22, 2, 2, 2, 17, 14, 1, 0,
  /* 7924 */ 34, 50, 1, 17, 2, 22, 1, 12, 1, 1, 1, 25, 1, 1, 26, 2, 2, 22, 2, 2, 2, 18, 14, 1, 0,
  /* 7949 */ 65451, 34, 68, 2, 22, 1, 12, 1, 1, 1, 25, 1, 1, 26, 2, 2, 22, 2, 2, 2, 18, 14, 1, 0,
  /* 7973 */ 65452, 34, 68, 2, 22, 1, 12, 1, 1, 1, 25, 1, 1, 26, 2, 2, 22, 2, 2, 2, 18, 14, 1, 0,
  /* 7997 */ 33, 52, 1, 16, 2, 21, 1, 12, 1, 1, 1, 26, 1, 1, 26, 2, 2, 22, 2, 2, 2, 18, 14, 1, 0,
  /* 8022 */ 65450, 33, 69, 2, 21, 1, 12, 1, 1, 1, 26, 1, 1, 26, 2, 2, 22, 2, 2, 2, 18, 14, 1, 0,
  /* 8046 */ 65451, 33, 69, 2, 21, 1, 12, 1, 1, 1, 26, 1, 1, 26, 2, 2, 22, 2, 2, 2, 18, 14, 1, 0,
  /* 8070 */ 35, 47, 1, 19, 2, 23, 1, 12, 1, 1, 1, 24, 1, 1, 26, 2, 2, 22, 2, 2, 2, 19, 14, 1, 0,
  /* 8095 */ 65453, 35, 67, 2, 23, 1, 12, 1, 1, 1, 24, 1, 1, 26, 2, 2, 22, 2, 2, 2, 19, 14, 1, 0,
  /* 8119 */ 65454, 35, 67, 2, 23, 1, 12, 1, 1, 1, 24, 1, 1, 26, 2, 2, 22, 2, 2, 2, 19, 14, 1, 0,
  /* 8143 */ 34, 49, 1, 18, 2, 22, 1, 12, 1, 1, 1, 25, 1, 1, 26, 2, 2, 22, 2, 2, 2, 19, 14, 1, 0,
  /* 8168 */ 65452, 34, 68, 2, 22, 1, 12, 1, 1, 1, 25, 1, 1, 26, 2, 2, 22, 2, 2, 2, 19, 14, 1, 0,
  /* 8192 */ 65453, 34, 68, 2, 22, 1, 12, 1, 1, 1, 25, 1, 1, 26, 2, 2, 22, 2, 2, 2, 19, 14, 1, 0,
  /* 8216 */ 36, 44, 1, 21, 2, 24, 1, 12, 1, 1, 1, 23, 1, 1, 26, 2, 2, 22, 2, 2, 2, 20, 14, 1, 0,
  /* 8241 */ 65455, 36, 66, 2, 24, 1, 12, 1, 1, 1, 23, 1, 1, 26, 2, 2, 22, 2, 2, 2, 20, 14, 1, 0,
  /* 8265 */ 65456, 36, 66, 2, 24, 1, 12, 1, 1, 1, 23, 1, 1, 26, 2, 2, 22, 2, 2, 2, 20, 14, 1, 0,
  /* 8289 */ 35, 46, 1, 20, 2, 23, 1, 12, 1, 1, 1, 24, 1, 1, 26, 2, 2, 22, 2, 2, 2, 20, 14, 1, 0,
  /* 8314 */ 65454, 35, 67, 2, 23, 1, 12, 1, 1, 1, 24, 1, 1, 26, 2, 2, 22, 2, 2, 2, 20, 14, 1, 0,
  /* 8338 */ 65455, 35, 67, 2, 23, 1, 12, 1, 1, 1, 24, 1, 1, 26, 2, 2, 22, 2, 2, 2, 20, 14, 1, 0,
  /* 8362 */ 37, 41, 1, 23, 2, 25, 1, 12, 1, 1, 1, 22, 1, 1, 26, 2, 2, 22, 2, 2, 2, 21, 14, 1, 0,
  /* 8387 */ 65457, 37, 65, 2, 25, 1, 12, 1, 1, 1, 22, 1, 1, 26, 2, 2, 22, 2, 2, 2, 21, 14, 1, 0,
  /* 8411 */ 65458, 37, 65, 2, 25, 1, 12, 1, 1, 1, 22, 1, 1, 26, 2, 2, 22, 2, 2, 2, 21, 14, 1, 0,
  /* 8435 */ 36, 43, 1, 22, 2, 24, 1, 12, 1, 1, 1, 23, 1, 1, 26, 2, 2, 22, 2, 2, 2, 21, 14, 1, 0,
  /* 8460 */ 65456, 36, 66, 2, 24, 1, 12, 1, 1, 1, 23, 1, 1, 26, 2, 2, 22, 2, 2, 2, 21, 14, 1, 0,
  /* 8484 */ 65457, 36, 66, 2, 24, 1, 12, 1, 1, 1, 23, 1, 1, 26, 2, 2, 22, 2, 2, 2, 21, 14, 1, 0,
  /* 8508 */ 38, 38, 1, 25, 2, 26, 1, 12, 1, 1, 1, 21, 1, 1, 26, 2, 2, 22, 2, 2, 2, 22, 14, 1, 0,
  /* 8533 */ 65459, 38, 64, 2, 26, 1, 12, 1, 1, 1, 21, 1, 1, 26, 2, 2, 22, 2, 2, 2, 22, 14, 1, 0,
  /* 8557 */ 65460, 38, 64, 2, 26, 1, 12, 1, 1, 1, 21, 1, 1, 26, 2, 2, 22, 2, 2, 2, 22, 14, 1, 0,
  /* 8581 */ 37, 40, 1, 24, 2, 25, 1, 12, 1, 1, 1, 22, 1, 1, 26, 2, 2, 22, 2, 2, 2, 22, 14, 1, 0,
  /* 8606 */ 65458, 37, 65, 2, 25, 1, 12, 1, 1, 1, 22, 1, 1, 26, 2, 2, 22, 2, 2, 2, 22, 14, 1, 0,
  /* 8630 */ 65459, 37, 65, 2, 25, 1, 12, 1, 1, 1, 22, 1, 1, 26, 2, 2, 22, 2, 2, 2, 22, 14, 1, 0,
  /* 8654 */ 39, 35, 1, 27, 2, 27, 1, 13, 1, 1, 20, 1, 1, 26, 2, 2, 24, 2, 2, 23, 14, 1, 0,
  /* 8677 */ 65461, 39, 63, 2, 27, 1, 13, 1, 1, 20, 1, 1, 26, 2, 2, 24, 2, 2, 23, 14, 1, 0,
  /* 8699 */ 65462, 39, 63, 2, 27, 1, 13, 1, 1, 20, 1, 1, 26, 2, 2, 24, 2, 2, 23, 14, 1, 0,
  /* 8721 */ 38, 37, 1, 26, 2, 26, 1, 13, 1, 1, 21, 1, 1, 26, 2, 2, 24, 2, 2, 23, 14, 1, 0,
  /* 8744 */ 65460, 38, 64, 2, 26, 1, 13, 1, 1, 21, 1, 1, 26, 2, 2, 24, 2, 2, 23, 14, 1, 0,
  /* 8766 */ 65461, 38, 64, 2, 26, 1, 13, 1, 1, 21, 1, 1, 26, 2, 2, 24, 2, 2, 23, 14, 1, 0,
  /* 8788 */ 39, 34, 1, 28, 2, 27, 1, 14, 1, 20, 1, 1, 28, 2, 26, 2, 24, 14, 1, 0,
  /* 8808 */ 65462, 39, 63, 2, 27, 1, 14, 1, 20, 1, 1, 28, 2, 26, 2, 24, 14, 1, 0,
  /* 8827 */ 65463, 39, 63, 2, 27, 1, 14, 1, 20, 1, 1, 28, 2, 26, 2, 24, 14, 1, 0,
  /* 8846 */ 65295, 1, 28, 1, 72, 1, 1, 1, 16, 1, 1, 11, 1, 1, 1, 1, 29, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 27, 1, 0,
  /* 8883 */ 65296, 1, 27, 1, 73, 1, 1, 1, 15, 1, 1, 11, 1, 1, 1, 31, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 27, 1, 0,
  /* 8918 */ 65294, 1, 29, 1, 71, 1, 1, 1, 17, 1, 1, 11, 1, 1, 1, 1, 28, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 28, 1, 0,
  /* 8955 */ 65297, 1, 26, 1, 74, 1, 1, 1, 14, 1, 1, 11, 1, 1, 33, 1, 1, 1, 25, 1, 1, 1, 1, 22, 1, 1, 1, 1, 28, 1, 0,
  /* 8986 */ 65293, 1, 30, 1, 70, 1, 1, 1, 18, 1, 1, 11, 1, 1, 1, 1, 27, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 29, 1, 0,
  /* 9023 */ 65292, 1, 31, 1, 69, 1, 1, 1, 19, 1, 1, 11, 1, 1, 1, 1, 26, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 30, 1, 0,
  /* 9060 */ 65291, 1, 32, 1, 51, 1, 16, 1, 1, 1, 20, 1, 1, 11, 1, 1, 1, 1, 25, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 31, 1, 0,
  /* 9099 */ 65290, 1, 33, 1, 48, 1, 1, 1, 16, 1, 1, 1, 21, 1, 1, 11, 1, 1, 1, 1, 24, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 32, 1, 0,
  /* 9140 */ 65289, 1, 34, 1, 45, 1, 1, 1, 18, 1, 1, 1, 22, 1, 1, 11, 1, 1, 1, 1, 23, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 33, 1, 0,
  /* 9181 */ 65288, 1, 35, 1, 42, 1, 1, 1, 20, 1, 1, 1, 23, 1, 1, 11, 1, 1, 1, 1, 22, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 34, 1, 0,
  /* 9222 */ 65287, 1, 36, 1, 39, 1, 1, 1, 22, 1, 1, 1, 24, 1, 1, 11, 1, 1, 1, 1, 21, 1, 1, 1, 25, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 1, 35, 1, 0,
  /* 9263 */ 65286, 1, 37, 1, 36, 1, 1, 1, 24, 1, 1, 1, 25, 1, 1, 12, 1, 1, 1, 20, 1, 1, 1, 25, 1, 1, 1, 1, 1, 22, 1, 1, 1, 1, 1, 1, 36, 1, 0,
  /* 9302 */ 65285, 1, 38, 1, 33, 1, 1, 1, 26, 1, 1, 1, 26, 1, 1, 13, 1, 1, 19, 1, 1, 1, 26, 1, 1, 1, 1, 24, 1, 1, 1, 1, 37, 1, 0,
  /* 9337 */ 70, 1, 0,
  /* 9340 */ 65495, 70, 1, 65466, 71, 1, 0,
  /* 9347 */ 65284, 71, 1, 65465, 72, 1, 0,
  /* 9354 */ 65432, 70, 1, 65467, 72, 1, 0,
  /* 9361 */ 65496, 72, 1, 65464, 73, 1, 0,
  /* 9368 */ 65432, 71, 1, 65466, 73, 1, 0,
  /* 9375 */ 65285, 73, 1, 65463, 74, 1, 0,
  /* 9382 */ 65432, 72, 1, 65465, 74, 1, 0,
  /* 9389 */ 65497, 74, 1, 65462, 75, 1, 0,
  /* 9396 */ 65432, 73, 1, 65464, 75, 1, 0,
  /* 9403 */ 65286, 75, 1, 65461, 76, 1, 0,
  /* 9410 */ 65432, 74, 1, 65463, 76, 1, 0,
  /* 9417 */ 65498, 76, 1, 65460, 77, 1, 0,
  /* 9424 */ 65432, 75, 1, 65462, 77, 1, 0,
  /* 9431 */ 65287, 77, 1, 65459, 78, 1, 0,
  /* 9438 */ 65432, 76, 1, 65461, 78, 1, 0,
  /* 9445 */ 65499, 78, 1, 65458, 79, 1, 0,
  /* 9452 */ 65432, 77, 1, 65460, 79, 1, 0,
  /* 9459 */ 65288, 79, 1, 65457, 80, 1, 0,
  /* 9466 */ 65432, 78, 1, 65459, 80, 1, 0,
  /* 9473 */ 65500, 80, 1, 65456, 81, 1, 0,
  /* 9480 */ 65432, 79, 1, 65458, 81, 1, 0,
  /* 9487 */ 65289, 81, 1, 65455, 82, 1, 0,
  /* 9494 */ 65432, 80, 1, 65457, 82, 1, 0,
  /* 9501 */ 65501, 82, 1, 65454, 83, 1, 0,
  /* 9508 */ 65432, 81, 1, 65456, 83, 1, 0,
  /* 9515 */ 65290, 83, 1, 65453, 84, 1, 0,
  /* 9522 */ 65432, 82, 1, 65455, 84, 1, 0,
  /* 9529 */ 65502, 84, 1, 65452, 85, 1, 0,
  /* 9536 */ 65432, 83, 1, 65454, 85, 1, 0,
  /* 9543 */ 65043, 1, 0,
  /* 9546 */ 65264, 1, 0,
  /* 9549 */ 65292, 1, 0,
  /* 9552 */ 65293, 1, 0,
  /* 9555 */ 65294, 1, 0,
  /* 9558 */ 65295, 1, 0,
  /* 9561 */ 65296, 1, 0,
  /* 9564 */ 65297, 1, 0,
  /* 9567 */ 65298, 1, 0,
  /* 9570 */ 65453, 1, 65499, 133, 1, 65416, 1, 0,
  /* 9578 */ 140, 65488, 49, 65488, 12, 121, 65416, 1, 0,
  /* 9587 */ 65488, 13, 121, 65416, 1, 0,
  /* 9593 */ 65489, 13, 121, 65416, 1, 0,
  /* 9599 */ 65490, 13, 121, 65416, 1, 0,
  /* 9605 */ 65491, 13, 121, 65416, 1, 0,
  /* 9611 */ 65492, 13, 121, 65416, 1, 0,
  /* 9617 */ 65493, 13, 121, 65416, 1, 0,
  /* 9623 */ 65494, 13, 121, 65416, 1, 0,
  /* 9629 */ 65495, 13, 121, 65416, 1, 0,
  /* 9635 */ 65496, 13, 121, 65416, 1, 0,
  /* 9641 */ 65497, 13, 121, 65416, 1, 0,
  /* 9647 */ 65498, 13, 121, 65416, 1, 0,
  /* 9653 */ 65464, 1, 65488, 133, 65416, 121, 65416, 1, 0,
  /* 9662 */ 65463, 1, 65489, 133, 65416, 121, 65416, 1, 0,
  /* 9671 */ 65462, 1, 65490, 133, 65416, 121, 65416, 1, 0,
  /* 9680 */ 65461, 1, 65491, 133, 65416, 121, 65416, 1, 0,
  /* 9689 */ 65460, 1, 65492, 133, 65416, 121, 65416, 1, 0,
  /* 9698 */ 65459, 1, 65493, 133, 65416, 121, 65416, 1, 0,
  /* 9707 */ 65458, 1, 65494, 133, 65416, 121, 65416, 1, 0,
  /* 9716 */ 65457, 1, 65495, 133, 65416, 121, 65416, 1, 0,
  /* 9725 */ 65456, 1, 65496, 133, 65416, 121, 65416, 1, 0,
  /* 9734 */ 65455, 1, 65497, 133, 65416, 121, 65416, 1, 0,
  /* 9743 */ 65454, 1, 65498, 133, 65416, 121, 65416, 1, 0,
  /* 9752 */ 65488, 133, 65416, 1, 0,
  /* 9757 */ 65499, 134, 65416, 1, 0,
  /* 9762 */ 128, 65500, 37, 65500, 133, 65417, 1, 0,
  /* 9770 */ 65431, 1, 0,
  /* 9773 */ 65432, 1, 0,
  /* 9776 */ 65433, 1, 0,
  /* 9779 */ 65434, 1, 0,
  /* 9782 */ 65435, 1, 0,
  /* 9785 */ 65436, 1, 0,
  /* 9788 */ 65466, 1, 0,
  /* 9791 */ 65503, 1, 0,
  /* 9794 */ 65504, 1, 0,
  /* 9797 */ 65505, 1, 0,
  /* 9800 */ 65506, 1, 0,
  /* 9803 */ 65507, 1, 0,
  /* 9806 */ 65508, 1, 0,
  /* 9809 */ 65509, 1, 0,
  /* 9812 */ 65510, 1, 0,
  /* 9815 */ 65532, 1, 0,
  /* 9818 */ 65078, 1, 3, 1, 3, 1, 2, 0,
  /* 9826 */ 65134, 1, 3, 1, 2, 0,
  /* 9832 */ 65324, 1, 2, 0,
  /* 9836 */ 65078, 1, 3, 1, 2, 2, 0,
  /* 9843 */ 65134, 1, 2, 2, 0,
  /* 9848 */ 65078, 1, 2, 2, 2, 0,
  /* 9854 */ 65324, 2, 2, 2, 0,
  /* 9859 */ 65078, 1, 3, 2, 2, 0,
  /* 9865 */ 65352, 2, 2, 0,
  /* 9869 */ 65078, 1, 3, 1, 3, 2, 0,
  /* 9876 */ 65134, 1, 3, 2, 0,
  /* 9881 */ 65279, 1, 1, 1, 27, 1, 1, 70, 1, 1, 1, 1, 1, 15, 1, 1, 1, 10, 1, 1, 1, 1, 1, 27, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 13, 2, 0,
  /* 9933 */ 65280, 1, 1, 1, 26, 1, 1, 71, 1, 1, 1, 1, 1, 14, 1, 1, 1, 10, 1, 1, 1, 1, 29, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 13, 2, 0,
  /* 9983 */ 65278, 1, 1, 1, 28, 1, 1, 69, 1, 1, 1, 1, 1, 16, 1, 1, 1, 10, 1, 1, 1, 1, 1, 26, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 13, 2, 0,
  /* 10035 */ 65281, 1, 1, 1, 25, 1, 1, 72, 1, 1, 1, 1, 1, 13, 1, 1, 1, 10, 1, 1, 1, 31, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 13, 1, 13, 2, 0,
  /* 10081 */ 65277, 1, 1, 1, 29, 1, 1, 68, 1, 1, 1, 1, 1, 17, 1, 1, 1, 10, 1, 1, 1, 1, 1, 25, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14, 1, 13, 2, 0,
  /* 10133 */ 65276, 1, 1, 1, 30, 1, 1, 50, 1, 16, 1, 1, 1, 1, 1, 18, 1, 1, 1, 10, 1, 1, 1, 1, 1, 24, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 1, 13, 2, 0,
  /* 10187 */ 65275, 1, 1, 1, 31, 1, 1, 47, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 19, 1, 1, 1, 10, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 1, 13, 2, 0,
  /* 10245 */ 65274, 1, 1, 1, 32, 1, 1, 44, 1, 1, 1, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 20, 1, 1, 1, 10, 1, 1, 1, 1, 1, 22, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 17, 1, 13, 2, 0,
  /* 10305 */ 65273, 1, 1, 1, 33, 1, 1, 41, 1, 1, 1, 1, 1, 1, 1, 16, 1, 1, 1, 1, 1, 21, 1, 1, 1, 10, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 13, 2, 0,
  /* 10365 */ 65272, 1, 1, 1, 34, 1, 1, 38, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 1, 1, 22, 1, 1, 1, 10, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 19, 1, 13, 2, 0,
  /* 10425 */ 65271, 1, 1, 1, 35, 1, 1, 35, 1, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 23, 1, 1, 1, 11, 1, 1, 1, 1, 19, 1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 20, 1, 13, 2, 0,
  /* 10483 */ 65270, 1, 1, 1, 36, 1, 1, 32, 1, 1, 1, 1, 1, 1, 1, 22, 1, 1, 1, 1, 1, 24, 1, 1, 1, 12, 1, 1, 1, 18, 1, 1, 1, 1, 1, 24, 1, 1, 1, 1, 1, 1, 22, 1, 1, 1, 1, 1, 1, 21, 1, 13, 2, 0,
  /* 10537 */ 65337, 81, 1, 65456, 83, 1, 65454, 85, 1, 14, 2, 0,
  /* 10549 */ 65337, 80, 1, 65457, 82, 1, 65455, 84, 1, 15, 2, 0,
  /* 10561 */ 65337, 79, 1, 65458, 81, 1, 65456, 83, 1, 16, 2, 0,
  /* 10573 */ 65337, 78, 1, 65459, 80, 1, 65457, 82, 1, 17, 2, 0,
  /* 10585 */ 65337, 77, 1, 65460, 79, 1, 65458, 81, 1, 18, 2, 0,
  /* 10597 */ 65337, 76, 1, 65461, 78, 1, 65459, 80, 1, 19, 2, 0,
  /* 10609 */ 65337, 75, 1, 65462, 77, 1, 65460, 79, 1, 20, 2, 0,
  /* 10621 */ 65337, 74, 1, 65463, 76, 1, 65461, 78, 1, 21, 2, 0,
  /* 10633 */ 65337, 73, 1, 65464, 75, 1, 65462, 77, 1, 22, 2, 0,
  /* 10645 */ 65337, 72, 1, 65465, 74, 1, 65463, 76, 1, 23, 2, 0,
  /* 10657 */ 65337, 71, 1, 65466, 73, 1, 65464, 75, 1, 24, 2, 0,
  /* 10669 */ 65337, 70, 1, 65467, 72, 1, 65465, 74, 1, 25, 2, 0,
  /* 10681 */ 65337, 2, 2, 100, 2, 0,
  /* 10687 */ 65337, 85, 1, 65452, 2, 100, 2, 0,
  /* 10695 */ 65337, 84, 1, 65453, 2, 100, 2, 0,
  /* 10703 */ 65337, 83, 1, 65454, 85, 1, 65452, 100, 2, 0,
  /* 10713 */ 65337, 82, 1, 65455, 84, 1, 65453, 100, 2, 0,
  /* 10723 */ 65432, 2, 0,
  /* 10726 */ 65447, 2, 0,
  /* 10729 */ 65078, 1, 3, 1, 3, 1, 3, 0,
  /* 10737 */ 65134, 1, 3, 1, 3, 0,
  /* 10743 */ 65324, 1, 3, 0,
  /* 10747 */ 65282, 1, 1, 1, 24, 1, 1, 73, 1, 1, 1, 1, 13, 1, 1, 11, 1, 1, 33, 1, 1, 1, 1, 24, 1, 1, 1, 1, 22, 1, 1, 1, 1, 14, 1, 13, 0,
  /* 10784 */ 142, 65486, 13, 0,
  /* 10788 */ 65367, 1, 1, 24, 1, 75, 1, 1, 14, 1, 12, 1, 35, 1, 27, 1, 1, 24, 1, 1, 15, 14, 0,
  /* 10811 */ 65510, 1, 101, 1, 15, 13, 36, 1, 27, 1, 25, 1, 15, 14, 0,
  /* 10826 */ 26, 76, 2, 14, 1, 12, 1, 35, 1, 1, 26, 2, 24, 2, 15, 14, 0,
  /* 10843 */ 65432, 2, 24, 1, 75, 16, 1, 12, 1, 35, 1, 1, 26, 2, 24, 2, 15, 14, 0,
  /* 10862 */ 26, 76, 16, 13, 36, 1, 27, 26, 16, 14, 0,
  /* 10873 */ 65269, 1, 1, 1, 37, 1, 1, 29, 1, 1, 1, 1, 1, 1, 1, 25, 1, 1, 1, 1, 26, 1, 1, 13, 1, 1, 18, 1, 1, 1, 1, 26, 1, 1, 1, 1, 24, 1, 1, 1, 1, 22, 1, 15, 0,
  /* 10918 */ 65367, 1, 1, 39, 1, 28, 1, 1, 1, 1, 1, 29, 1, 1, 28, 1, 14, 1, 20, 1, 28, 1, 1, 26, 1, 1, 24, 15, 0,
  /* 10947 */ 40, 32, 1, 29, 2, 28, 1, 14, 1, 19, 1, 1, 28, 2, 26, 2, 24, 15, 0,
  /* 10966 */ 65463, 40, 62, 2, 28, 1, 14, 1, 19, 1, 1, 28, 2, 26, 2, 24, 15, 0,
  /* 10984 */ 65464, 40, 62, 2, 28, 1, 14, 1, 19, 1, 1, 28, 2, 26, 2, 24, 15, 0,
  /* 11002 */ 65432, 2, 39, 1, 28, 1, 3, 1, 31, 28, 1, 14, 1, 19, 1, 1, 28, 2, 26, 2, 24, 15, 0,
  /* 11025 */ 65495, 1, 69, 1, 1, 1, 31, 1, 29, 15, 20, 1, 29, 1, 27, 1, 25, 15, 0,
  /* 11044 */ 40, 31, 1, 32, 29, 15, 20, 1, 30, 28, 25, 15, 0,
  /* 11057 */ 65464, 40, 64, 29, 15, 20, 1, 30, 28, 25, 15, 0,
  /* 11069 */ 65465, 40, 64, 29, 15, 20, 1, 30, 28, 25, 15, 0,
  /* 11081 */ 128, 65501, 15, 0,
  /* 11085 */ 25, 77, 15, 13, 37, 28, 26, 0,
  /* 11093 */ 41, 29, 1, 33, 30, 15, 20, 30, 28, 0,
  /* 11103 */ 65465, 41, 63, 30, 15, 20, 30, 28, 0,
  /* 11112 */ 65466, 41, 63, 30, 15, 20, 30, 28, 0,
  /* 11121 */ 65298, 1, 25, 1, 75, 1, 1, 14, 1, 12, 1, 35, 1, 1, 26, 1, 1, 24, 1, 1, 29, 0,
  /* 11143 */ 65437, 33, 0,
  /* 11146 */ 65284, 1, 39, 1, 30, 1, 1, 1, 29, 1, 1, 28, 1, 14, 1, 19, 1, 1, 28, 1, 1, 26, 1, 1, 39, 0,
  /* 11172 */ 51, 0,
  /* 11174 */ 66, 0,
  /* 11176 */ 65443, 65509, 1, 27, 65510, 1, 101, 65, 65472, 65, 69, 0,
  /* 11188 */ 65443, 65508, 1, 28, 65509, 1, 101, 65, 65472, 65, 70, 0,
  /* 11200 */ 65443, 65507, 1, 29, 65508, 1, 101, 65, 65472, 65, 71, 0,
  /* 11212 */ 65443, 65506, 1, 30, 65507, 1, 101, 65, 65472, 65, 72, 0,
  /* 11224 */ 65443, 65505, 1, 31, 65506, 1, 101, 65, 65472, 65, 73, 0,
  /* 11236 */ 65443, 65504, 1, 32, 65505, 1, 101, 65, 65472, 65, 74, 0,
  /* 11248 */ 65443, 65503, 1, 33, 65504, 1, 101, 65, 65472, 65, 75, 0,
  /* 11260 */ 65443, 65502, 84, 1, 65452, 85, 1, 65484, 65503, 1, 101, 65, 65472, 65, 76, 0,
  /* 11276 */ 65443, 65501, 82, 1, 65454, 83, 1, 65487, 65502, 84, 1, 65452, 85, 1, 15, 65, 65472, 65, 77, 0,
  /* 11296 */ 65443, 65500, 80, 1, 65456, 81, 1, 65490, 65501, 82, 1, 65454, 83, 1, 17, 65, 65472, 65, 78, 0,
  /* 11316 */ 65443, 65499, 78, 1, 65458, 79, 1, 65493, 65500, 80, 1, 65456, 81, 1, 19, 65, 65472, 65, 79, 0,
  /* 11336 */ 65443, 65498, 76, 1, 65460, 77, 1, 65496, 65499, 78, 1, 65458, 79, 1, 21, 65, 65472, 65, 80, 0,
  /* 11356 */ 65443, 65497, 74, 1, 65462, 75, 1, 65499, 65498, 76, 1, 65460, 77, 1, 23, 65, 65472, 65, 81, 0,
  /* 11376 */ 65443, 65496, 72, 1, 65464, 73, 1, 65502, 65497, 74, 1, 65462, 75, 1, 25, 65, 65472, 65, 82, 0,
  /* 11396 */ 65443, 65495, 70, 1, 65466, 71, 1, 65505, 65496, 72, 1, 65464, 73, 1, 27, 65, 65472, 65, 83, 0,
  /* 11416 */ 99, 0,
  /* 11418 */ 100, 0,
  /* 11420 */ 101, 0,
  /* 11422 */ 102, 0,
  /* 11424 */ 103, 0,
  /* 11426 */ 104, 0,
  /* 11428 */ 105, 0,
  /* 11430 */ 65367, 1, 1, 25, 77, 135, 0,
  /* 11437 */ 65367, 1, 1, 26, 76, 136, 0,
  /* 11444 */ 65367, 1, 1, 27, 75, 137, 0,
  /* 11451 */ 65367, 1, 1, 28, 74, 138, 0,
  /* 11458 */ 65367, 1, 1, 29, 73, 139, 0,
  /* 11465 */ 65367, 1, 1, 30, 72, 140, 0,
  /* 11472 */ 65367, 1, 1, 31, 71, 141, 0,
  /* 11479 */ 65367, 84, 1, 65452, 85, 1, 65451, 32, 70, 142, 0,
  /* 11490 */ 65367, 82, 1, 65454, 83, 1, 65453, 84, 1, 65484, 69, 143, 0,
  /* 11503 */ 65367, 80, 1, 65456, 81, 1, 65455, 82, 1, 65487, 68, 144, 0,
  /* 11516 */ 65367, 78, 1, 65458, 79, 1, 65457, 80, 1, 65490, 67, 145, 0,
  /* 11529 */ 65367, 76, 1, 65460, 77, 1, 65459, 78, 1, 65493, 66, 146, 0,
  /* 11542 */ 65367, 74, 1, 65462, 75, 1, 65461, 76, 1, 65496, 65, 147, 0,
  /* 11555 */ 65367, 72, 1, 65464, 73, 1, 65463, 74, 1, 65499, 64, 148, 0,
  /* 11568 */ 65367, 70, 1, 65466, 71, 1, 65465, 72, 1, 65502, 63, 149, 0,
  /* 11581 */ 65282, 1, 1, 1, 236, 1, 65400, 65, 65472, 65, 65394, 0,
  /* 11593 */ 65281, 1, 1, 1, 237, 1, 65399, 65, 65472, 65, 65395, 0,
  /* 11605 */ 65280, 1, 1, 1, 238, 1, 65398, 65, 65472, 65, 65396, 0,
  /* 11617 */ 65279, 1, 1, 1, 239, 1, 65397, 65, 65472, 65, 65397, 0,
  /* 11629 */ 65278, 1, 1, 1, 240, 1, 65396, 65, 65472, 65, 65398, 0,
  /* 11641 */ 65277, 1, 1, 1, 241, 1, 65395, 65, 65472, 65, 65399, 0,
  /* 11653 */ 65276, 85, 1, 65451, 1, 1, 242, 1, 65394, 65, 65472, 65, 65400, 0,
  /* 11667 */ 65275, 83, 1, 65453, 84, 1, 65452, 85, 1, 65451, 243, 1, 65393, 65, 65472, 65, 65401, 0,
  /* 11685 */ 65521, 65443, 65507, 1, 29, 65508, 1, 101, 65, 65472, 65, 71, 65419, 65443, 65509, 1, 27, 65510, 1, 101, 65, 65472, 65, 69, 65492, 28, 65509, 28, 28, 65386, 65, 30, 65442, 65, 30, 40, 15, 65402, 0,
  /* 11724 */ 65521, 65443, 65506, 1, 30, 65507, 1, 101, 65, 65472, 65, 72, 65419, 65443, 65508, 1, 28, 65509, 1, 101, 65, 65472, 65, 70, 65491, 28, 65509, 28, 29, 65385, 65, 30, 65442, 65, 30, 41, 15, 65402, 0,
  /* 11763 */ 65521, 65443, 65505, 1, 31, 65506, 1, 101, 65, 65472, 65, 73, 65419, 65443, 65507, 1, 29, 65508, 1, 101, 65, 65472, 65, 71, 65490, 28, 65509, 28, 30, 65384, 65, 30, 65442, 65, 30, 42, 15, 65402, 0,
  /* 11802 */ 65521, 65443, 65504, 1, 32, 65505, 1, 101, 65, 65472, 65, 74, 65419, 65443, 65506, 1, 30, 65507, 1, 101, 65, 65472, 65, 72, 65489, 28, 65509, 28, 31, 65383, 65, 30, 65442, 65, 30, 43, 15, 65402, 0,
  /* 11841 */ 65521, 65443, 65503, 1, 33, 65504, 1, 101, 65, 65472, 65, 75, 65419, 65443, 65505, 1, 31, 65506, 1, 101, 65, 65472, 65, 73, 65488, 28, 65509, 28, 32, 65382, 65, 30, 65442, 65, 30, 44, 15, 65402, 0,
  /* 11880 */ 65521, 65443, 65502, 84, 1, 65452, 85, 1, 65484, 65503, 1, 101, 65, 65472, 65, 76, 65419, 65443, 65504, 1, 32, 65505, 1, 101, 65, 65472, 65, 74, 65487, 28, 65509, 28, 33, 65381, 65, 30, 65442, 65, 30, 45, 15, 65402, 0,
  /* 11923 */ 65521, 65443, 65501, 82, 1, 65454, 83, 1, 65487, 65502, 84, 1, 65452, 85, 1, 15, 65, 65472, 65, 77, 65419, 65443, 65503, 1, 33, 65504, 1, 101, 65, 65472, 65, 75, 65486, 28, 65509, 28, 34, 65380, 65, 30, 65442, 65, 30, 46, 15, 65402, 0,
  /* 11970 */ 65521, 65443, 65500, 80, 1, 65456, 81, 1, 65490, 65501, 82, 1, 65454, 83, 1, 17, 65, 65472, 65, 78, 65419, 65443, 65502, 84, 1, 65452, 85, 1, 65484, 65503, 1, 101, 65, 65472, 65, 76, 65485, 28, 65509, 28, 35, 65379, 65, 30, 65442, 65, 30, 47, 15, 65402, 0,
  /* 12021 */ 65521, 65443, 65499, 78, 1, 65458, 79, 1, 65493, 65500, 80, 1, 65456, 81, 1, 19, 65, 65472, 65, 79, 65419, 65443, 65501, 82, 1, 65454, 83, 1, 65487, 65502, 84, 1, 65452, 85, 1, 15, 65, 65472, 65, 77, 65484, 28, 65509, 28, 36, 65378, 65, 30, 65442, 65, 30, 48, 15, 65402, 0,
  /* 12076 */ 65521, 65443, 65498, 76, 1, 65460, 77, 1, 65496, 65499, 78, 1, 65458, 79, 1, 21, 65, 65472, 65, 80, 65419, 65443, 65500, 80, 1, 65456, 81, 1, 65490, 65501, 82, 1, 65454, 83, 1, 17, 65, 65472, 65, 78, 65483, 28, 65509, 28, 37, 65377, 65, 30, 65442, 65, 30, 49, 15, 65402, 0,
  /* 12131 */ 65521, 65443, 65497, 74, 1, 65462, 75, 1, 65499, 65498, 76, 1, 65460, 77, 1, 23, 65, 65472, 65, 81, 65419, 65443, 65499, 78, 1, 65458, 79, 1, 65493, 65500, 80, 1, 65456, 81, 1, 19, 65, 65472, 65, 79, 65482, 28, 65509, 28, 38, 65376, 65, 30, 65442, 65, 30, 50, 15, 65402, 0,
  /* 12186 */ 65521, 65443, 65496, 72, 1, 65464, 73, 1, 65502, 65497, 74, 1, 65462, 75, 1, 25, 65, 65472, 65, 82, 65419, 65443, 65498, 76, 1, 65460, 77, 1, 65496, 65499, 78, 1, 65458, 79, 1, 21, 65, 65472, 65, 80, 65481, 28, 65509, 28, 39, 65375, 65, 30, 65442, 65, 30, 51, 15, 65402, 0,
  /* 12241 */ 65521, 65443, 65495, 70, 1, 65466, 71, 1, 65505, 65496, 72, 1, 65464, 73, 1, 27, 65, 65472, 65, 83, 65419, 65443, 65497, 74, 1, 65462, 75, 1, 65499, 65498, 76, 1, 65460, 77, 1, 23, 65, 65472, 65, 81, 65480, 28, 65509, 28, 40, 65374, 65, 30, 65442, 65, 30, 52, 15, 65402, 0,
  /* 12296 */ 65274, 81, 1, 65455, 82, 1, 65454, 83, 1, 65453, 84, 1, 159, 1, 65392, 65, 65472, 65, 65402, 0,
  /* 12316 */ 65273, 79, 1, 65457, 80, 1, 65456, 81, 1, 65455, 82, 1, 162, 1, 65391, 65, 65472, 65, 65403, 0,
  /* 12336 */ 65272, 77, 1, 65459, 78, 1, 65458, 79, 1, 65457, 80, 1, 165, 1, 65390, 65, 65472, 65, 65404, 0,
  /* 12356 */ 65271, 75, 1, 65461, 76, 1, 65460, 77, 1, 65459, 78, 1, 168, 1, 65389, 65, 65472, 65, 65405, 0,
  /* 12376 */ 65270, 73, 1, 65463, 74, 1, 65462, 75, 1, 65461, 76, 1, 171, 1, 65388, 65, 65472, 65, 65406, 0,
  /* 12396 */ 65269, 71, 1, 65465, 72, 1, 65464, 73, 1, 65463, 74, 1, 174, 1, 65387, 65, 65472, 65, 65407, 0,
  /* 12416 */ 27, 75, 2, 63, 65488, 120, 65465, 1, 65487, 75, 26, 65447, 65, 26, 30, 65416, 66, 26, 29, 65416, 0,
  /* 12437 */ 26, 76, 2, 63, 65487, 120, 65466, 1, 65486, 76, 26, 65446, 66, 26, 29, 65416, 0,
  /* 12454 */ 65, 65487, 77, 26, 65446, 66, 26, 29, 65416, 0,
  /* 12464 */ 27, 75, 2, 134, 65465, 1, 65487, 50, 65487, 75, 26, 31, 65416, 65, 26, 30, 65416, 0,
  /* 12482 */ 26, 76, 135, 65466, 1, 65486, 77, 26, 30, 65416, 0,
  /* 12493 */ 65, 65487, 77, 26, 30, 65416, 0,
  /* 12500 */ 141, 65487, 50, 65487, 12, 121, 65416, 0,
  /* 12508 */ 65487, 13, 121, 65416, 0,
  /* 12513 */ 65465, 1, 65487, 133, 65416, 121, 65416, 0,
  /* 12521 */ 65466, 1, 65486, 133, 65416, 0,
  /* 12527 */ 65487, 133, 65416, 0,
  /* 12531 */ 65464, 40, 64, 148, 65452, 1, 65500, 66, 28, 40, 65417, 0,
  /* 12543 */ 65465, 40, 64, 148, 65452, 1, 65500, 66, 28, 40, 65417, 0,
  /* 12555 */ 65, 65500, 66, 28, 40, 65417, 0,
  /* 12562 */ 65452, 1, 65500, 134, 65417, 0,
  /* 12568 */ 65309, 79, 1, 65458, 81, 1, 65456, 83, 1, 65454, 85, 1, 12, 95, 65443, 95, 65443, 0,
  /* 12586 */ 65309, 78, 1, 65459, 80, 1, 65457, 82, 1, 65455, 84, 1, 13, 95, 65443, 95, 65443, 0,
  /* 12604 */ 65309, 77, 1, 65460, 79, 1, 65458, 81, 1, 65456, 83, 1, 14, 95, 65443, 95, 65443, 0,
  /* 12622 */ 65309, 76, 1, 65461, 78, 1, 65459, 80, 1, 65457, 82, 1, 15, 95, 65443, 95, 65443, 0,
  /* 12640 */ 65309, 75, 1, 65462, 77, 1, 65460, 79, 1, 65458, 81, 1, 16, 95, 65443, 95, 65443, 0,
  /* 12658 */ 65309, 74, 1, 65463, 76, 1, 65461, 78, 1, 65459, 80, 1, 17, 95, 65443, 95, 65443, 0,
  /* 12676 */ 65309, 73, 1, 65464, 75, 1, 65462, 77, 1, 65460, 79, 1, 18, 95, 65443, 95, 65443, 0,
  /* 12694 */ 65309, 72, 1, 65465, 74, 1, 65463, 76, 1, 65461, 78, 1, 19, 95, 65443, 95, 65443, 0,
  /* 12712 */ 65309, 71, 1, 65466, 73, 1, 65464, 75, 1, 65462, 77, 1, 20, 95, 65443, 95, 65443, 0,
  /* 12730 */ 65309, 70, 1, 65467, 72, 1, 65465, 74, 1, 65463, 76, 1, 21, 95, 65443, 95, 65443, 0,
  /* 12748 */ 65309, 2, 2, 2, 98, 95, 65443, 95, 65443, 0,
  /* 12758 */ 65309, 85, 1, 65452, 2, 2, 98, 95, 65443, 95, 65443, 0,
  /* 12770 */ 65309, 84, 1, 65453, 2, 2, 98, 95, 65443, 95, 65443, 0,
  /* 12782 */ 65309, 83, 1, 65454, 85, 1, 65452, 2, 98, 95, 65443, 95, 65443, 0,
  /* 12796 */ 65309, 82, 1, 65455, 84, 1, 65453, 2, 98, 95, 65443, 95, 65443, 0,
  /* 12810 */ 65309, 81, 1, 65456, 83, 1, 65454, 85, 1, 65452, 98, 95, 65443, 95, 65443, 0,
  /* 12826 */ 65309, 80, 1, 65457, 82, 1, 65455, 84, 1, 65453, 98, 95, 65443, 95, 65443, 0,
  /* 12842 */ 25, 77, 65, 65486, 78, 26, 65445, 0,
  /* 12850 */ 28, 74, 2, 63, 65489, 120, 65464, 1, 65488, 74, 26, 65448, 64, 26, 31, 65416, 65, 26, 30, 65416, 92, 65445, 0,
  /* 12873 */ 65, 65488, 76, 26, 65447, 65, 26, 30, 65416, 92, 65445, 0,
  /* 12885 */ 26, 65446, 92, 65445, 0,
  /* 12890 */ 28, 74, 2, 135, 65464, 1, 65488, 49, 65488, 74, 26, 32, 65416, 64, 26, 31, 65416, 65, 26, 65446, 0,
  /* 12911 */ 65, 65488, 76, 26, 31, 65416, 65, 26, 65446, 0,
  /* 12921 */ 29, 73, 2, 63, 65490, 120, 65463, 1, 65489, 73, 26, 65449, 63, 26, 32, 65416, 64, 26, 31, 65416, 91, 65446, 0,
  /* 12944 */ 65, 65489, 75, 26, 65448, 64, 26, 31, 65416, 91, 65446, 0,
  /* 12956 */ 29, 73, 2, 136, 65463, 1, 65489, 48, 65489, 73, 26, 33, 65416, 63, 26, 32, 65416, 64, 26, 65447, 91, 65446, 0,
  /* 12979 */ 65, 65489, 75, 26, 32, 65416, 64, 26, 65447, 91, 65446, 0,
  /* 12991 */ 30, 72, 2, 63, 65491, 120, 65462, 1, 65490, 72, 26, 65450, 62, 26, 33, 65416, 63, 26, 32, 65416, 90, 65447, 0,
  /* 13014 */ 65, 65490, 74, 26, 65449, 63, 26, 32, 65416, 90, 65447, 0,
  /* 13026 */ 30, 72, 2, 137, 65462, 1, 65490, 47, 65490, 72, 26, 34, 65416, 62, 26, 33, 65416, 63, 26, 65448, 90, 65447, 0,
  /* 13049 */ 65, 65490, 74, 26, 33, 65416, 63, 26, 65448, 90, 65447, 0,
  /* 13061 */ 31, 71, 2, 63, 65492, 120, 65461, 1, 65491, 71, 26, 65451, 61, 26, 34, 65416, 62, 26, 33, 65416, 89, 65448, 0,
  /* 13084 */ 65, 65491, 73, 26, 65450, 62, 26, 33, 65416, 89, 65448, 0,
  /* 13096 */ 31, 71, 2, 138, 65461, 1, 65491, 46, 65491, 71, 26, 35, 65416, 61, 26, 34, 65416, 62, 26, 65449, 89, 65448, 0,
  /* 13119 */ 65, 65491, 73, 26, 34, 65416, 62, 26, 65449, 89, 65448, 0,
  /* 13131 */ 32, 70, 2, 63, 65493, 120, 65460, 1, 65492, 70, 26, 65452, 60, 26, 35, 65416, 61, 26, 34, 65416, 88, 65449, 0,
  /* 13154 */ 65, 65492, 72, 26, 65451, 61, 26, 34, 65416, 88, 65449, 0,
  /* 13166 */ 32, 70, 2, 139, 65460, 1, 65492, 45, 65492, 70, 26, 36, 65416, 60, 26, 35, 65416, 61, 26, 65450, 88, 65449, 0,
  /* 13189 */ 65, 65492, 72, 26, 35, 65416, 61, 26, 65450, 88, 65449, 0,
  /* 13201 */ 65450, 33, 69, 2, 63, 65494, 120, 65459, 1, 65493, 69, 26, 65453, 59, 26, 36, 65416, 60, 26, 35, 65416, 87, 65450, 0,
  /* 13225 */ 65451, 33, 69, 2, 63, 65494, 120, 65459, 1, 65493, 69, 26, 65453, 59, 26, 36, 65416, 60, 26, 35, 65416, 87, 65450, 0,
  /* 13249 */ 65, 65493, 71, 26, 65452, 60, 26, 35, 65416, 87, 65450, 0,
  /* 13261 */ 33, 69, 2, 140, 65459, 1, 65493, 44, 65493, 69, 26, 37, 65416, 59, 26, 36, 65416, 60, 26, 65451, 87, 65450, 0,
  /* 13284 */ 65, 65493, 71, 26, 36, 65416, 60, 26, 65451, 87, 65450, 0,
  /* 13296 */ 65291, 85, 1, 65451, 0,
  /* 13301 */ 65452, 34, 68, 2, 63, 65495, 120, 65458, 1, 65494, 68, 26, 65454, 58, 26, 37, 65416, 59, 26, 36, 65416, 86, 65451, 0,
  /* 13325 */ 65453, 34, 68, 2, 63, 65495, 120, 65458, 1, 65494, 68, 26, 65454, 58, 26, 37, 65416, 59, 26, 36, 65416, 86, 65451, 0,
  /* 13349 */ 65, 65494, 70, 26, 65453, 59, 26, 36, 65416, 86, 65451, 0,
  /* 13361 */ 65451, 34, 68, 2, 141, 65458, 1, 65494, 43, 65494, 68, 26, 38, 65416, 58, 26, 37, 65416, 59, 26, 65452, 86, 65451, 0,
  /* 13385 */ 65452, 34, 68, 2, 141, 65458, 1, 65494, 43, 65494, 68, 26, 38, 65416, 58, 26, 37, 65416, 59, 26, 65452, 86, 65451, 0,
  /* 13409 */ 65, 65494, 70, 26, 37, 65416, 59, 26, 65452, 86, 65451, 0,
  /* 13421 */ 65432, 85, 1, 65452, 0,
  /* 13426 */ 65454, 35, 67, 2, 63, 65496, 120, 65457, 1, 65495, 67, 26, 65455, 57, 26, 38, 65416, 58, 26, 37, 65416, 85, 65452, 0,
  /* 13450 */ 65455, 35, 67, 2, 63, 65496, 120, 65457, 1, 65495, 67, 26, 65455, 57, 26, 38, 65416, 58, 26, 37, 65416, 85, 65452, 0,
  /* 13474 */ 65, 65495, 69, 26, 65454, 58, 26, 37, 65416, 85, 65452, 0,
  /* 13486 */ 65453, 35, 67, 2, 142, 65457, 1, 65495, 42, 65495, 67, 26, 39, 65416, 57, 26, 38, 65416, 58, 26, 65453, 85, 65452, 0,
  /* 13510 */ 65454, 35, 67, 2, 142, 65457, 1, 65495, 42, 65495, 67, 26, 39, 65416, 57, 26, 38, 65416, 58, 26, 65453, 85, 65452, 0,
  /* 13534 */ 65, 65495, 69, 26, 38, 65416, 58, 26, 65453, 85, 65452, 0,
  /* 13546 */ 65432, 84, 1, 65453, 0,
  /* 13551 */ 65456, 36, 66, 2, 63, 65497, 120, 65456, 1, 65496, 66, 26, 65456, 56, 26, 39, 65416, 57, 26, 38, 65416, 84, 65453, 0,
  /* 13575 */ 65457, 36, 66, 2, 63, 65497, 120, 65456, 1, 65496, 66, 26, 65456, 56, 26, 39, 65416, 57, 26, 38, 65416, 84, 65453, 0,
  /* 13599 */ 65, 65496, 68, 26, 65455, 57, 26, 38, 65416, 84, 65453, 0,
  /* 13611 */ 65455, 36, 66, 2, 143, 65456, 1, 65496, 41, 65496, 66, 26, 40, 65416, 56, 26, 39, 65416, 57, 26, 65454, 84, 65453, 0,
  /* 13635 */ 65456, 36, 66, 2, 143, 65456, 1, 65496, 41, 65496, 66, 26, 40, 65416, 56, 26, 39, 65416, 57, 26, 65454, 84, 65453, 0,
  /* 13659 */ 65, 65496, 68, 26, 39, 65416, 57, 26, 65454, 84, 65453, 0,
  /* 13671 */ 65458, 37, 65, 2, 63, 65498, 120, 65455, 1, 65497, 65, 26, 65457, 55, 26, 40, 65416, 56, 26, 39, 65416, 83, 65454, 0,
  /* 13695 */ 65459, 37, 65, 2, 63, 65498, 120, 65455, 1, 65497, 65, 26, 65457, 55, 26, 40, 65416, 56, 26, 39, 65416, 83, 65454, 0,
  /* 13719 */ 65, 65497, 67, 26, 65456, 56, 26, 39, 65416, 83, 65454, 0,
  /* 13731 */ 65457, 37, 65, 2, 144, 65455, 1, 65497, 40, 65497, 65, 26, 41, 65416, 55, 26, 40, 65416, 56, 26, 65455, 83, 65454, 0,
  /* 13755 */ 65458, 37, 65, 2, 144, 65455, 1, 65497, 40, 65497, 65, 26, 41, 65416, 55, 26, 40, 65416, 56, 26, 65455, 83, 65454, 0,
  /* 13779 */ 65, 65497, 67, 26, 40, 65416, 56, 26, 65455, 83, 65454, 0,
  /* 13791 */ 65460, 38, 64, 2, 63, 65499, 120, 65454, 1, 65498, 64, 2, 26, 41, 65416, 55, 26, 40, 65416, 82, 65455, 0,
  /* 13813 */ 65461, 38, 64, 2, 63, 65499, 120, 65454, 1, 65498, 64, 2, 26, 41, 65416, 55, 26, 40, 65416, 82, 65455, 0,
  /* 13835 */ 65, 65498, 66, 26, 65457, 55, 26, 40, 65416, 82, 65455, 0,
  /* 13847 */ 65459, 38, 64, 2, 145, 65454, 1, 65498, 39, 65498, 64, 26, 42, 65416, 54, 26, 41, 65416, 55, 26, 65456, 82, 65455, 0,
  /* 13871 */ 65460, 38, 64, 2, 145, 65454, 1, 65498, 39, 65498, 64, 26, 42, 65416, 54, 26, 41, 65416, 55, 26, 65456, 82, 65455, 0,
  /* 13895 */ 65, 65498, 66, 26, 41, 65416, 55, 26, 65456, 82, 65455, 0,
  /* 13907 */ 65462, 39, 63, 2, 63, 65500, 120, 65453, 1, 65499, 65, 2, 26, 40, 1, 65416, 81, 65456, 0,
  /* 13926 */ 65463, 39, 63, 2, 63, 65500, 120, 65453, 1, 65499, 65, 2, 26, 40, 1, 65416, 81, 65456, 0,
  /* 13945 */ 65, 65499, 65, 2, 26, 41, 65416, 81, 65456, 0,
  /* 13955 */ 65461, 39, 63, 2, 146, 65453, 1, 65499, 38, 65499, 63, 2, 26, 41, 1, 65416, 54, 26, 65457, 81, 65456, 0,
  /* 13977 */ 65462, 39, 63, 2, 146, 65453, 1, 65499, 38, 65499, 63, 2, 26, 41, 1, 65416, 54, 26, 65457, 81, 65456, 0,
  /* 13999 */ 65, 65499, 65, 26, 42, 65416, 54, 26, 65457, 81, 65456, 0,
  /* 14011 */ 28, 65457, 0,
  /* 14014 */ 65463, 40, 62, 2, 147, 65452, 1, 65500, 37, 65500, 64, 2, 26, 41, 65417, 80, 65457, 0,
  /* 14032 */ 65464, 40, 62, 2, 147, 65452, 1, 65500, 37, 65500, 64, 2, 26, 41, 65417, 80, 65457, 0,
  /* 14050 */ 65, 65500, 64, 2, 26, 41, 65417, 80, 65457, 0,
  /* 14060 */ 26, 65458, 80, 65457, 0,
  /* 14065 */ 65465, 41, 63, 65, 65501, 65, 28, 65458, 0,
  /* 14074 */ 65466, 41, 63, 65, 65501, 65, 28, 65458, 0,
  /* 14083 */ 65367, 1, 1, 236, 65402, 65459, 0,
  /* 14090 */ 65367, 1, 1, 237, 65401, 65460, 0,
  /* 14097 */ 65367, 1, 1, 238, 65400, 65461, 0,
  /* 14104 */ 65367, 1, 1, 239, 65399, 65462, 0,
  /* 14111 */ 65367, 1, 1, 240, 65398, 65463, 0,
  /* 14118 */ 65367, 1, 1, 241, 65397, 65464, 0,
  /* 14125 */ 65367, 1, 1, 242, 65396, 65465, 0,
  /* 14132 */ 65367, 85, 1, 65451, 1, 243, 65395, 65466, 0,
  /* 14141 */ 65367, 83, 1, 65453, 84, 1, 65452, 85, 1, 158, 65394, 65467, 0,
  /* 14154 */ 65367, 81, 1, 65455, 82, 1, 65454, 83, 1, 161, 65393, 65468, 0,
  /* 14167 */ 65367, 79, 1, 65457, 80, 1, 65456, 81, 1, 164, 65392, 65469, 0,
  /* 14180 */ 65367, 77, 1, 65459, 78, 1, 65458, 79, 1, 167, 65391, 65470, 0,
  /* 14193 */ 65367, 75, 1, 65461, 76, 1, 65460, 77, 1, 170, 65390, 65471, 0,
  /* 14206 */ 65367, 73, 1, 65463, 74, 1, 65462, 75, 1, 173, 65389, 65472, 0,
  /* 14219 */ 65367, 71, 1, 65465, 72, 1, 65464, 73, 1, 176, 65388, 65473, 0,
  /* 14232 */ 65502, 0,
  /* 14234 */ 65534, 0,
  /* 14236 */ 65535, 0,
};

extern const uint16_t ARMSubRegIdxLists[] = {
  /* 0 */ 1, 2, 0,
  /* 3 */ 1, 17, 18, 2, 0,
  /* 8 */ 1, 3, 0,
  /* 11 */ 1, 17, 18, 3, 0,
  /* 16 */ 9, 10, 0,
  /* 19 */ 17, 18, 0,
  /* 22 */ 1, 17, 18, 2, 19, 20, 0,
  /* 29 */ 1, 17, 18, 3, 21, 22, 0,
  /* 36 */ 1, 2, 3, 13, 33, 37, 0,
  /* 43 */ 1, 17, 18, 2, 3, 13, 33, 37, 0,
  /* 52 */ 1, 17, 18, 2, 19, 20, 3, 13, 33, 37, 0,
  /* 63 */ 1, 17, 18, 2, 19, 20, 3, 21, 22, 13, 33, 37, 0,
  /* 76 */ 13, 1, 2, 14, 3, 4, 33, 34, 35, 36, 37, 0,
  /* 88 */ 13, 1, 17, 18, 2, 19, 20, 14, 3, 4, 33, 34, 35, 36, 37, 0,
  /* 104 */ 1, 2, 3, 4, 13, 14, 33, 34, 35, 36, 37, 0,
  /* 116 */ 1, 17, 18, 2, 3, 4, 13, 14, 33, 34, 35, 36, 37, 0,
  /* 130 */ 1, 17, 18, 2, 19, 20, 3, 21, 22, 4, 13, 14, 33, 34, 35, 36, 37, 0,
  /* 148 */ 1, 17, 18, 2, 19, 20, 3, 21, 22, 4, 23, 24, 13, 14, 33, 34, 35, 36, 37, 0,
  /* 168 */ 13, 1, 17, 18, 2, 19, 20, 14, 3, 21, 22, 4, 23, 24, 33, 34, 35, 36, 37, 0,
  /* 188 */ 1, 3, 5, 33, 43, 0,
  /* 194 */ 1, 17, 18, 3, 5, 33, 43, 0,
  /* 202 */ 1, 17, 18, 3, 21, 22, 5, 33, 43, 0,
  /* 212 */ 1, 17, 18, 3, 21, 22, 5, 31, 32, 33, 43, 0,
  /* 224 */ 1, 3, 5, 7, 33, 38, 43, 45, 51, 0,
  /* 234 */ 1, 17, 18, 3, 5, 7, 33, 38, 43, 45, 51, 0,
  /* 246 */ 1, 17, 18, 3, 21, 22, 5, 7, 33, 38, 43, 45, 51, 0,
  /* 260 */ 1, 17, 18, 3, 21, 22, 5, 31, 32, 7, 33, 38, 43, 45, 51, 0,
  /* 276 */ 1, 17, 18, 3, 21, 22, 5, 31, 32, 7, 27, 28, 33, 38, 43, 45, 51, 0,
  /* 294 */ 11, 13, 1, 2, 14, 3, 4, 33, 34, 35, 36, 37, 12, 15, 5, 6, 16, 7, 8, 51, 52, 53, 54, 55, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 0,
  /* 333 */ 11, 13, 1, 17, 18, 2, 19, 20, 14, 3, 4, 33, 34, 35, 36, 37, 12, 15, 5, 6, 16, 7, 8, 51, 52, 53, 54, 55, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 0,
  /* 376 */ 11, 13, 1, 17, 18, 2, 19, 20, 14, 3, 21, 22, 4, 23, 24, 33, 34, 35, 36, 37, 12, 15, 5, 6, 16, 7, 8, 51, 52, 53, 54, 55, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 0,
  /* 423 */ 11, 13, 1, 17, 18, 2, 19, 20, 14, 3, 21, 22, 4, 23, 24, 33, 34, 35, 36, 37, 12, 15, 5, 31, 32, 6, 29, 30, 16, 7, 8, 51, 52, 53, 54, 55, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 0,
  /* 474 */ 11, 13, 1, 17, 18, 2, 19, 20, 14, 3, 21, 22, 4, 23, 24, 33, 34, 35, 36, 37, 12, 15, 5, 31, 32, 6, 29, 30, 16, 7, 27, 28, 8, 25, 26, 51, 52, 53, 54, 55, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 0,
};

extern const char ARMRegStrings[] = {
  /* 0 */ 'D', '4', '_', 'D', '6', '_', 'D', '8', '_', 'D', '1', '0', 0,
  /* 13 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 26 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 39 */ 'R', '1', '0', 0,
  /* 43 */ 'S', '1', '0', 0,
  /* 47 */ 'D', '1', '4', '_', 'D', '1', '6', '_', 'D', '1', '8', '_', 'D', '2', '0', 0,
  /* 63 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 79 */ 'S', '2', '0', 0,
  /* 83 */ 'D', '2', '4', '_', 'D', '2', '6', '_', 'D', '2', '8', '_', 'D', '3', '0', 0,
  /* 99 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 115 */ 'S', '3', '0', 0,
  /* 119 */ 'D', '0', 0,
  /* 122 */ 'Q', '0', 0,
  /* 125 */ 'M', 'V', 'F', 'R', '0', 0,
  /* 131 */ 'S', '0', 0,
  /* 134 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 145 */ 'D', '5', '_', 'D', '7', '_', 'D', '9', '_', 'D', '1', '1', 0,
  /* 158 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 172 */ 'R', '1', '0', '_', 'R', '1', '1', 0,
  /* 180 */ 'S', '1', '1', 0,
  /* 184 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 196 */ 'D', '1', '5', '_', 'D', '1', '7', '_', 'D', '1', '9', '_', 'D', '2', '1', 0,
  /* 212 */ 'S', '2', '1', 0,
  /* 216 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 228 */ 'D', '2', '5', '_', 'D', '2', '7', '_', 'D', '2', '9', '_', 'D', '3', '1', 0,
  /* 244 */ 'S', '3', '1', 0,
  /* 248 */ 'D', '1', 0,
  /* 251 */ 'Q', '0', '_', 'Q', '1', 0,
  /* 257 */ 'M', 'V', 'F', 'R', '1', 0,
  /* 263 */ 'R', '0', '_', 'R', '1', 0,
  /* 269 */ 'S', '1', 0,
  /* 272 */ 'D', '6', '_', 'D', '8', '_', 'D', '1', '0', '_', 'D', '1', '2', 0,
  /* 286 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 301 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 316 */ 'R', '1', '2', 0,
  /* 320 */ 'S', '1', '2', 0,
  /* 324 */ 'D', '1', '6', '_', 'D', '1', '8', '_', 'D', '2', '0', '_', 'D', '2', '2', 0,
  /* 340 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 356 */ 'S', '2', '2', 0,
  /* 360 */ 'D', '0', '_', 'D', '2', 0,
  /* 366 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 375 */ 'Q', '1', '_', 'Q', '2', 0,
  /* 381 */ 'R', '2', 0,
  /* 384 */ 'S', '2', 0,
  /* 387 */ 'D', '7', '_', 'D', '9', '_', 'D', '1', '1', '_', 'D', '1', '3', 0,
  /* 401 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 413 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 429 */ 'S', '1', '3', 0,
  /* 433 */ 'D', '1', '7', '_', 'D', '1', '9', '_', 'D', '2', '1', '_', 'D', '2', '3', 0,
  /* 449 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 461 */ 'S', '2', '3', 0,
  /* 465 */ 'D', '1', '_', 'D', '3', 0,
  /* 471 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 480 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 492 */ 'R', '2', '_', 'R', '3', 0,
  /* 498 */ 'S', '3', 0,
  /* 501 */ 'D', '8', '_', 'D', '1', '0', '_', 'D', '1', '2', '_', 'D', '1', '4', 0,
  /* 516 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 532 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 548 */ 'S', '1', '4', 0,
  /* 552 */ 'D', '1', '8', '_', 'D', '2', '0', '_', 'D', '2', '2', '_', 'D', '2', '4', 0,
  /* 568 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 584 */ 'S', '2', '4', 0,
  /* 588 */ 'D', '0', '_', 'D', '2', '_', 'D', '4', 0,
  /* 597 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 609 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 621 */ 'R', '4', 0,
  /* 624 */ 'S', '4', 0,
  /* 627 */ 'D', '9', '_', 'D', '1', '1', '_', 'D', '1', '3', '_', 'D', '1', '5', 0,
  /* 642 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 654 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 670 */ 'S', '1', '5', 0,
  /* 674 */ 'D', '1', '9', '_', 'D', '2', '1', '_', 'D', '2', '3', '_', 'D', '2', '5', 0,
  /* 690 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 702 */ 'S', '2', '5', 0,
  /* 706 */ 'D', '1', '_', 'D', '3', '_', 'D', '5', 0,
  /* 715 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 724 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 736 */ 'R', '4', '_', 'R', '5', 0,
  /* 742 */ 'S', '5', 0,
  /* 745 */ 'D', '1', '0', '_', 'D', '1', '2', '_', 'D', '1', '4', '_', 'D', '1', '6', 0,
  /* 761 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 777 */ 'S', '1', '6', 0,
  /* 781 */ 'D', '2', '0', '_', 'D', '2', '2', '_', 'D', '2', '4', '_', 'D', '2', '6', 0,
  /* 797 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 813 */ 'S', '2', '6', 0,
  /* 817 */ 'D', '0', '_', 'D', '2', '_', 'D', '4', '_', 'D', '6', 0,
  /* 829 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 841 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 853 */ 'R', '6', 0,
  /* 856 */ 'S', '6', 0,
  /* 859 */ 'D', '1', '1', '_', 'D', '1', '3', '_', 'D', '1', '5', '_', 'D', '1', '7', 0,
  /* 875 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 887 */ 'S', '1', '7', 0,
  /* 891 */ 'D', '2', '1', '_', 'D', '2', '3', '_', 'D', '2', '5', '_', 'D', '2', '7', 0,
  /* 907 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 919 */ 'S', '2', '7', 0,
  /* 923 */ 'D', '1', '_', 'D', '3', '_', 'D', '5', '_', 'D', '7', 0,
  /* 935 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 944 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 956 */ 'R', '6', '_', 'R', '7', 0,
  /* 962 */ 'S', '7', 0,
  /* 965 */ 'D', '1', '2', '_', 'D', '1', '4', '_', 'D', '1', '6', '_', 'D', '1', '8', 0,
  /* 981 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 997 */ 'S', '1', '8', 0,
  /* 1001 */ 'D', '2', '2', '_', 'D', '2', '4', '_', 'D', '2', '6', '_', 'D', '2', '8', 0,
  /* 1017 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1033 */ 'S', '2', '8', 0,
  /* 1037 */ 'D', '2', '_', 'D', '4', '_', 'D', '6', '_', 'D', '8', 0,
  /* 1049 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1061 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1073 */ 'R', '8', 0,
  /* 1076 */ 'S', '8', 0,
  /* 1079 */ 'D', '1', '3', '_', 'D', '1', '5', '_', 'D', '1', '7', '_', 'D', '1', '9', 0,
  /* 1095 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 1107 */ 'S', '1', '9', 0,
  /* 1111 */ 'D', '2', '3', '_', 'D', '2', '5', '_', 'D', '2', '7', '_', 'D', '2', '9', 0,
  /* 1127 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 1139 */ 'S', '2', '9', 0,
  /* 1143 */ 'D', '3', '_', 'D', '5', '_', 'D', '7', '_', 'D', '9', 0,
  /* 1155 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 1164 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 1176 */ 'R', '8', '_', 'R', '9', 0,
  /* 1182 */ 'S', '9', 0,
  /* 1185 */ 'P', 'C', 0,
  /* 1188 */ 'F', 'P', 'E', 'X', 'C', 0,
  /* 1194 */ 'F', 'P', 'S', 'I', 'D', 0,
  /* 1200 */ 'I', 'T', 'S', 'T', 'A', 'T', 'E', 0,
  /* 1208 */ 'R', '1', '2', '_', 'S', 'P', 0,
  /* 1215 */ 'F', 'P', 'S', 'C', 'R', 0,
  /* 1221 */ 'L', 'R', 0,
  /* 1224 */ 'A', 'P', 'S', 'R', 0,
  /* 1229 */ 'C', 'P', 'S', 'R', 0,
  /* 1234 */ 'S', 'P', 'S', 'R', 0,
  /* 1239 */ 'F', 'P', 'S', 'C', 'R', '_', 'N', 'Z', 'C', 'V', 0,
};

extern const MCRegisterDesc ARMRegDesc[] = { // Descriptors
  { 12, 0, 0, 0, 0, 0 },
  { 1224, 16, 16, 16, 2, 227777 },
  { 1229, 16, 16, 16, 2, 227777 },
  { 119, 11093, 9337, 14066, 19, 157042 },
  { 248, 11044, 9344, 12532, 19, 157042 },
  { 363, 10947, 9351, 14015, 19, 157042 },
  { 468, 8788, 9365, 13908, 19, 157042 },
  { 594, 8654, 9379, 13956, 19, 157042 },
  { 712, 8721, 9393, 13792, 19, 157042 },
  { 826, 8508, 9407, 13848, 19, 157042 },
  { 932, 8581, 9421, 13672, 19, 157042 },
  { 1046, 8362, 9435, 13732, 19, 157042 },
  { 1152, 8435, 9449, 13552, 19, 157042 },
  { 9, 8216, 9463, 13612, 19, 157042 },
  { 141, 8289, 9477, 13427, 19, 157042 },
  { 282, 8070, 9491, 13487, 19, 157042 },
  { 397, 8143, 9505, 13302, 19, 157042 },
  { 512, 7924, 9519, 13362, 19, 157042 },
  { 638, 7997, 9533, 13202, 19, 157042 },
  { 757, 7878, 16, 13261, 2, 174657 },
  { 871, 7901, 16, 13131, 2, 174657 },
  { 977, 7832, 16, 13166, 2, 174657 },
  { 1091, 7855, 16, 13061, 2, 174657 },
  { 59, 7768, 16, 13096, 2, 174657 },
  { 192, 7791, 16, 12991, 2, 174657 },
  { 336, 7680, 16, 13026, 2, 174657 },
  { 445, 7703, 16, 12921, 2, 174657 },
  { 564, 7634, 16, 12956, 2, 174657 },
  { 686, 7657, 16, 12850, 2, 174657 },
  { 793, 7726, 16, 12890, 2, 174657 },
  { 903, 7747, 16, 12416, 2, 174657 },
  { 1013, 7814, 16, 12464, 2, 174657 },
  { 1123, 10826, 16, 12437, 2, 174657 },
  { 95, 10862, 16, 12482, 2, 174657 },
  { 224, 11085, 16, 12842, 2, 174657 },
  { 1188, 16, 16, 16, 2, 174657 },
  { 1215, 15, 16, 16, 2, 178752 },
  { 1239, 14236, 16, 16, 2, 178752 },
  { 1194, 16, 16, 16, 2, 172945 },
  { 1200, 16, 16, 16, 2, 172945 },
  { 1221, 16, 16, 16, 2, 172945 },
  { 125, 16, 16, 16, 2, 172945 },
  { 257, 16, 16, 16, 2, 172945 },
  { 1185, 16, 16, 16, 2, 172945 },
  { 122, 11025, 9340, 11081, 22, 68020 },
  { 254, 7504, 9361, 9762, 22, 68020 },
  { 378, 6882, 9389, 7164, 22, 68020 },
  { 489, 6723, 9417, 7094, 22, 68020 },
  { 618, 6559, 9445, 7084, 22, 68020 },
  { 733, 6343, 9473, 7074, 22, 68020 },
  { 850, 6127, 9501, 7064, 22, 68020 },
  { 953, 5911, 9529, 7054, 22, 68020 },
  { 1070, 5703, 9791, 7044, 0, 156610 },
  { 1173, 5505, 9794, 7034, 0, 156610 },
  { 35, 5284, 9797, 7024, 0, 156610 },
  { 168, 4916, 9800, 7014, 0, 156610 },
  { 312, 4724, 9803, 7004, 0, 156610 },
  { 425, 5031, 9806, 9578, 0, 156610 },
  { 544, 7229, 9809, 12500, 0, 156610 },
  { 666, 10811, 9812, 10784, 0, 156610 },
  { 128, 11428, 16, 11428, 2, 227745 },
  { 260, 11426, 16, 11426, 2, 227745 },
  { 381, 11426, 16, 11426, 2, 227745 },
  { 495, 11424, 16, 11424, 2, 227745 },
  { 621, 11424, 16, 11424, 2, 227745 },
  { 739, 11422, 16, 11422, 2, 227745 },
  { 853, 11422, 16, 11422, 2, 227745 },
  { 959, 11420, 16, 11420, 2, 227745 },
  { 1073, 11420, 16, 11420, 2, 227745 },
  { 1179, 11418, 16, 11418, 2, 227745 },
  { 39, 11418, 16, 11418, 2, 227745 },
  { 176, 11416, 16, 11416, 2, 227745 },
  { 316, 11416, 16, 11416, 2, 227745 },
  { 131, 11112, 16, 14074, 2, 226081 },
  { 269, 11103, 16, 14065, 2, 226081 },
  { 384, 11069, 16, 12543, 2, 226081 },
  { 498, 11057, 16, 12531, 2, 226081 },
  { 624, 10984, 16, 14032, 2, 226081 },
  { 742, 10966, 16, 14014, 2, 226081 },
  { 856, 8827, 16, 13926, 2, 226081 },
  { 962, 8808, 16, 13907, 2, 226081 },
  { 1076, 8699, 16, 13977, 2, 226081 },
  { 1182, 8677, 16, 13955, 2, 226081 },
  { 43, 8766, 16, 13813, 2, 226081 },
  { 180, 8744, 16, 13791, 2, 226081 },
  { 320, 8557, 16, 13871, 2, 226081 },
  { 429, 8533, 16, 13847, 2, 226081 },
  { 548, 8630, 16, 13695, 2, 226081 },
  { 670, 8606, 16, 13671, 2, 226081 },
  { 777, 8411, 16, 13755, 2, 226081 },
  { 887, 8387, 16, 13731, 2, 226081 },
  { 997, 8484, 16, 13575, 2, 226081 },
  { 1107, 8460, 16, 13551, 2, 226081 },
  { 79, 8265, 16, 13635, 2, 226081 },
  { 212, 8241, 16, 13611, 2, 226081 },
  { 356, 8338, 16, 13450, 2, 226081 },
  { 461, 8314, 16, 13426, 2, 226081 },
  { 584, 8119, 16, 13510, 2, 226081 },
  { 702, 8095, 16, 13486, 2, 226081 },
  { 813, 8192, 16, 13325, 2, 226081 },
  { 919, 8168, 16, 13301, 2, 226081 },
  { 1033, 7973, 16, 13385, 2, 226081 },
  { 1139, 7949, 16, 13361, 2, 226081 },
  { 115, 8046, 16, 13225, 2, 226081 },
  { 244, 8022, 16, 13201, 2, 226081 },
  { 1212, 11174, 16, 11174, 2, 227713 },
  { 1234, 16, 16, 16, 2, 227713 },
  { 360, 11002, 9354, 14068, 29, 115026 },
  { 465, 7608, 9368, 12555, 29, 115026 },
  { 591, 7436, 9382, 14050, 29, 115026 },
  { 709, 6963, 9396, 13945, 29, 115026 },
  { 823, 6810, 9410, 13999, 29, 115026 },
  { 929, 6846, 9424, 13835, 29, 115026 },
  { 1043, 6599, 9438, 13895, 29, 115026 },
  { 1149, 6637, 9452, 13719, 29, 115026 },
  { 6, 6383, 9466, 13779, 29, 115026 },
  { 151, 6421, 9480, 13599, 29, 115026 },
  { 278, 6167, 9494, 13659, 29, 115026 },
  { 393, 6205, 9508, 13474, 29, 115026 },
  { 508, 5951, 9522, 13534, 29, 115026 },
  { 634, 5989, 9536, 13349, 29, 115026 },
  { 753, 5739, 13546, 13409, 11, 171890 },
  { 867, 5775, 13421, 13249, 11, 157314 },
  { 973, 5541, 10723, 13284, 8, 171617 },
  { 1087, 5575, 10723, 13154, 8, 171617 },
  { 55, 5320, 10723, 13189, 8, 171617 },
  { 204, 5354, 10723, 13084, 8, 171617 },
  { 332, 5064, 10723, 13119, 8, 171617 },
  { 441, 5098, 10723, 13014, 8, 171617 },
  { 560, 4760, 10723, 13049, 8, 171617 },
  { 682, 4794, 10723, 12944, 8, 171617 },
  { 789, 5132, 10723, 12979, 8, 171617 },
  { 899, 5164, 10723, 12873, 8, 171617 },
  { 1009, 5388, 10723, 12911, 8, 171617 },
  { 1119, 7315, 10723, 12454, 8, 171617 },
  { 91, 7373, 10723, 12493, 8, 171617 },
  { 236, 10843, 10723, 12844, 8, 171617 },
  { 251, 7535, 11396, 10916, 168, 1044 },
  { 375, 4505, 11376, 7433, 168, 1044 },
  { 486, 4129, 11356, 4452, 168, 1044 },
  { 615, 3972, 11336, 4452, 168, 1044 },
  { 730, 3811, 11316, 4452, 168, 1044 },
  { 847, 3650, 11296, 4452, 168, 1044 },
  { 950, 3489, 11276, 4452, 168, 1044 },
  { 1067, 3336, 11260, 4452, 88, 14176 },
  { 1170, 3191, 11248, 4452, 76, 67938 },
  { 32, 3010, 11236, 4452, 76, 67938 },
  { 164, 2735, 11224, 4452, 76, 67938 },
  { 308, 2594, 11212, 4452, 76, 67938 },
  { 421, 2786, 11200, 4452, 76, 67938 },
  { 540, 4256, 11188, 7226, 76, 67938 },
  { 662, 7256, 11176, 10782, 76, 67938 },
  { 480, 2466, 12241, 16, 474, 4 },
  { 609, 972, 12186, 16, 474, 4 },
  { 724, 792, 12131, 16, 474, 4 },
  { 841, 695, 12076, 16, 474, 4 },
  { 944, 598, 12021, 16, 474, 4 },
  { 1061, 505, 11970, 16, 423, 272 },
  { 1164, 416, 11923, 16, 376, 512 },
  { 26, 331, 11880, 16, 333, 720 },
  { 158, 172, 11841, 16, 294, 1186 },
  { 301, 91, 11802, 16, 294, 1186 },
  { 413, 253, 11763, 16, 294, 1186 },
  { 532, 900, 11724, 16, 294, 1186 },
  { 654, 2254, 11685, 16, 294, 1186 },
  { 263, 9770, 9770, 16, 16, 152738 },
  { 492, 9773, 9773, 16, 16, 152738 },
  { 736, 9776, 9776, 16, 16, 152738 },
  { 956, 9779, 9779, 16, 16, 152738 },
  { 1176, 9782, 9782, 16, 16, 152738 },
  { 172, 9785, 9785, 16, 16, 152738 },
  { 1208, 11143, 11143, 16, 16, 152738 },
  { 366, 10918, 11568, 11082, 63, 14290 },
  { 471, 7573, 14219, 12564, 63, 14290 },
  { 600, 7395, 11555, 9765, 63, 14290 },
  { 715, 6919, 14206, 9757, 63, 14290 },
  { 832, 6763, 11542, 7167, 63, 14290 },
  { 935, 6675, 14193, 9647, 63, 14290 },
  { 1052, 6459, 11529, 7158, 63, 14290 },
  { 1155, 6509, 14180, 9641, 63, 14290 },
  { 16, 6243, 11516, 7152, 63, 14290 },
  { 134, 6293, 14167, 9635, 63, 14290 },
  { 289, 6027, 11503, 7146, 63, 14290 },
  { 401, 6077, 14154, 9629, 63, 14290 },
  { 520, 5811, 11490, 7140, 63, 14290 },
  { 642, 5861, 14141, 9623, 63, 14290 },
  { 765, 5609, 11479, 7134, 52, 35872 },
  { 875, 5657, 14132, 9617, 43, 67696 },
  { 985, 5417, 11472, 7128, 36, 112001 },
  { 1095, 5461, 14125, 9611, 36, 112001 },
  { 67, 5196, 11465, 7122, 36, 112001 },
  { 184, 5240, 14118, 9605, 36, 112001 },
  { 344, 4828, 11458, 7116, 36, 112001 },
  { 449, 4872, 14111, 9599, 36, 112001 },
  { 572, 4594, 11451, 7110, 36, 112001 },
  { 690, 4638, 14104, 9593, 36, 112001 },
  { 801, 4682, 11444, 7104, 36, 112001 },
  { 907, 4952, 14097, 9587, 36, 112001 },
  { 1021, 4993, 11437, 9752, 36, 112001 },
  { 1127, 7194, 14090, 12508, 36, 112001 },
  { 103, 7286, 11430, 12527, 36, 112001 },
  { 216, 10788, 14083, 10785, 36, 112001 },
  { 588, 7468, 10669, 14071, 212, 114914 },
  { 706, 4555, 10657, 14011, 212, 114914 },
  { 820, 4411, 10645, 14060, 212, 114914 },
  { 926, 4185, 10633, 13972, 212, 114914 },
  { 1040, 4031, 10621, 13972, 212, 114914 },
  { 1146, 4080, 10609, 13866, 212, 114914 },
  { 3, 3870, 10597, 13866, 212, 114914 },
  { 148, 3921, 10585, 13750, 212, 114914 },
  { 275, 3709, 10573, 13750, 212, 114914 },
  { 390, 3760, 10561, 13630, 212, 114914 },
  { 504, 3548, 10549, 13630, 212, 114914 },
  { 630, 3599, 10537, 13505, 212, 114914 },
  { 749, 3391, 10713, 13505, 202, 171794 },
  { 863, 3440, 10703, 13380, 202, 157218 },
  { 969, 3242, 10695, 13380, 194, 158018 },
  { 1083, 3289, 10687, 13279, 194, 157490 },
  { 51, 3061, 10681, 13279, 188, 157841 },
  { 200, 3106, 10681, 13184, 188, 157841 },
  { 328, 2834, 10681, 13184, 188, 157841 },
  { 437, 2879, 10681, 13114, 188, 157841 },
  { 556, 2645, 10681, 13114, 188, 157841 },
  { 678, 2690, 10681, 13044, 188, 157841 },
  { 785, 2924, 10681, 13044, 188, 157841 },
  { 895, 2967, 10681, 12974, 188, 157841 },
  { 1005, 3151, 10681, 12974, 188, 157841 },
  { 1115, 4298, 10681, 12885, 188, 157841 },
  { 87, 4337, 10681, 12908, 188, 157841 },
  { 232, 7343, 10681, 12847, 188, 157841 },
  { 817, 4456, 12730, 14072, 276, 114770 },
  { 923, 2542, 12712, 14012, 276, 114770 },
  { 1037, 2408, 12694, 14012, 276, 114770 },
  { 1143, 2183, 12676, 13924, 276, 114770 },
  { 0, 2059, 12658, 13924, 276, 114770 },
  { 145, 2121, 12640, 13811, 276, 114770 },
  { 272, 1931, 12622, 13811, 276, 114770 },
  { 387, 1995, 12604, 13693, 276, 114770 },
  { 501, 1803, 12586, 13693, 276, 114770 },
  { 627, 1867, 12568, 13549, 276, 114770 },
  { 745, 1679, 12826, 13549, 260, 171666 },
  { 859, 1741, 12810, 13424, 260, 157090 },
  { 965, 1559, 12796, 13424, 246, 157906 },
  { 1079, 1619, 12782, 13299, 246, 157378 },
  { 47, 1392, 12770, 13299, 234, 157746 },
  { 196, 1450, 12758, 13223, 234, 157570 },
  { 324, 1172, 12748, 13223, 224, 157665 },
  { 433, 1228, 12748, 13152, 224, 157665 },
  { 552, 1060, 12748, 13152, 224, 157665 },
  { 674, 1116, 12748, 13082, 224, 157665 },
  { 781, 1284, 12748, 13082, 224, 157665 },
  { 891, 1338, 12748, 13012, 224, 157665 },
  { 1001, 1508, 12748, 13012, 224, 157665 },
  { 1111, 2314, 12748, 12909, 224, 157665 },
  { 83, 2364, 12748, 12909, 224, 157665 },
  { 228, 4370, 12748, 12848, 224, 157665 },
  { 369, 11146, 9347, 12562, 22, 67780 },
  { 603, 9302, 9375, 9570, 22, 67780 },
  { 835, 9263, 9403, 9743, 22, 67780 },
  { 1055, 9222, 9431, 9734, 22, 67780 },
  { 19, 9181, 9459, 9725, 22, 67780 },
  { 293, 9140, 9487, 9716, 22, 67780 },
  { 524, 9099, 9515, 9707, 22, 67780 },
  { 769, 9060, 13296, 9698, 3, 111936 },
  { 989, 9023, 9549, 9689, 0, 152690 },
  { 71, 8986, 9552, 9680, 0, 152690 },
  { 348, 8918, 9555, 9671, 0, 152690 },
  { 576, 8846, 9558, 9662, 0, 152690 },
  { 805, 8883, 9561, 9653, 0, 152690 },
  { 1025, 8955, 9564, 12513, 0, 152690 },
  { 107, 11121, 9567, 12521, 0, 152690 },
  { 597, 10873, 12396, 12541, 148, 900 },
  { 829, 10483, 12376, 9575, 148, 900 },
  { 1049, 10425, 12356, 9575, 148, 900 },
  { 13, 10365, 12336, 9575, 148, 900 },
  { 286, 10305, 12316, 9575, 148, 900 },
  { 516, 10245, 12296, 9575, 148, 900 },
  { 761, 10187, 11667, 9575, 130, 1328 },
  { 981, 10133, 11653, 9575, 116, 35968 },
  { 63, 10081, 11641, 9575, 104, 67858 },
  { 340, 9983, 11629, 9575, 104, 67858 },
  { 568, 9881, 11617, 9575, 104, 67858 },
  { 797, 9933, 11605, 9575, 104, 67858 },
  { 1017, 10035, 11593, 9575, 104, 67858 },
  { 99, 10747, 11581, 12435, 104, 67858 },
};

extern const uint16_t ARMRegUnitRoots[][2] = {
  { ARM::APSR },
  { ARM::CPSR },
  { ARM::S0 },
  { ARM::S1 },
  { ARM::S2 },
  { ARM::S3 },
  { ARM::S4 },
  { ARM::S5 },
  { ARM::S6 },
  { ARM::S7 },
  { ARM::S8 },
  { ARM::S9 },
  { ARM::S10 },
  { ARM::S11 },
  { ARM::S12 },
  { ARM::S13 },
  { ARM::S14 },
  { ARM::S15 },
  { ARM::S16 },
  { ARM::S17 },
  { ARM::S18 },
  { ARM::S19 },
  { ARM::S20 },
  { ARM::S21 },
  { ARM::S22 },
  { ARM::S23 },
  { ARM::S24 },
  { ARM::S25 },
  { ARM::S26 },
  { ARM::S27 },
  { ARM::S28 },
  { ARM::S29 },
  { ARM::S30 },
  { ARM::S31 },
  { ARM::D16 },
  { ARM::D17 },
  { ARM::D18 },
  { ARM::D19 },
  { ARM::D20 },
  { ARM::D21 },
  { ARM::D22 },
  { ARM::D23 },
  { ARM::D24 },
  { ARM::D25 },
  { ARM::D26 },
  { ARM::D27 },
  { ARM::D28 },
  { ARM::D29 },
  { ARM::D30 },
  { ARM::D31 },
  { ARM::FPEXC },
  { ARM::FPSCR, ARM::FPSCR_NZCV },
  { ARM::FPSID },
  { ARM::ITSTATE },
  { ARM::LR },
  { ARM::MVFR0 },
  { ARM::MVFR1 },
  { ARM::PC },
  { ARM::R0 },
  { ARM::R1 },
  { ARM::R2 },
  { ARM::R3 },
  { ARM::R4 },
  { ARM::R5 },
  { ARM::R6 },
  { ARM::R7 },
  { ARM::R8 },
  { ARM::R9 },
  { ARM::R10 },
  { ARM::R11 },
  { ARM::R12 },
  { ARM::SP },
  { ARM::SPSR },
};

namespace {     // Register classes...
  // SPR Register Class...
  const uint16_t SPR[] = {
    ARM::S0, ARM::S2, ARM::S4, ARM::S6, ARM::S8, ARM::S10, ARM::S12, ARM::S14, ARM::S16, ARM::S18, ARM::S20, ARM::S22, ARM::S24, ARM::S26, ARM::S28, ARM::S30, ARM::S1, ARM::S3, ARM::S5, ARM::S7, ARM::S9, ARM::S11, ARM::S13, ARM::S15, ARM::S17, ARM::S19, ARM::S21, ARM::S23, ARM::S25, ARM::S27, ARM::S29, ARM::S31, 
  };

  // SPR Bit set.
  const uint8_t SPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x01, 
  };

  // GPR Register Class...
  const uint16_t GPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, ARM::PC, 
  };

  // GPR Bit set.
  const uint8_t GPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0xf0, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 
  };

  // SPR_8 Register Class...
  const uint16_t SPR_8[] = {
    ARM::S0, ARM::S1, ARM::S2, ARM::S3, ARM::S4, ARM::S5, ARM::S6, ARM::S7, ARM::S8, ARM::S9, ARM::S10, ARM::S11, ARM::S12, ARM::S13, ARM::S14, ARM::S15, 
  };

  // SPR_8 Bit set.
  const uint8_t SPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x01, 
  };

  // GPRnopc Register Class...
  const uint16_t GPRnopc[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, 
  };

  // GPRnopc Bit set.
  const uint8_t GPRnopcBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xf0, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 
  };

  // rGPR Register Class...
  const uint16_t rGPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::LR, 
  };

  // rGPR Bit set.
  const uint8_t rGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xf0, 0xff, 0x01, 
  };

  // hGPR Register Class...
  const uint16_t hGPR[] = {
    ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, ARM::PC, 
  };

  // hGPR Bit set.
  const uint8_t hGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x02, 
  };

  // tGPR Register Class...
  const uint16_t tGPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, 
  };

  // tGPR Bit set.
  const uint8_t tGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 
  };

  // GPRnopc_and_hGPR Register Class...
  const uint16_t GPRnopc_and_hGPR[] = {
    ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, 
  };

  // GPRnopc_and_hGPR Bit set.
  const uint8_t GPRnopc_and_hGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x02, 
  };

  // hGPR_and_rGPR Register Class...
  const uint16_t hGPR_and_rGPR[] = {
    ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::LR, 
  };

  // hGPR_and_rGPR Bit set.
  const uint8_t hGPR_and_rGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xf0, 0x01, 
  };

  // tcGPR Register Class...
  const uint16_t tcGPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R9, ARM::R12, 
  };

  // tcGPR Bit set.
  const uint8_t tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x20, 0x01, 
  };

  // tGPR_and_tcGPR Register Class...
  const uint16_t tGPR_and_tcGPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, 
  };

  // tGPR_and_tcGPR Bit set.
  const uint8_t tGPR_and_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 
  };

  // hGPR_and_tcGPR Register Class...
  const uint16_t hGPR_and_tcGPR[] = {
    ARM::R9, ARM::R12, 
  };

  // hGPR_and_tcGPR Bit set.
  const uint8_t hGPR_and_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 
  };

  // CCR Register Class...
  const uint16_t CCR[] = {
    ARM::CPSR, 
  };

  // CCR Bit set.
  const uint8_t CCRBits[] = {
    0x04, 
  };

  // GPRsp Register Class...
  const uint16_t GPRsp[] = {
    ARM::SP, 
  };

  // GPRsp Bit set.
  const uint8_t GPRspBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
  };

  // DPR Register Class...
  const uint16_t DPR[] = {
    ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, ARM::D8, ARM::D9, ARM::D10, ARM::D11, ARM::D12, ARM::D13, ARM::D14, ARM::D15, ARM::D16, ARM::D17, ARM::D18, ARM::D19, ARM::D20, ARM::D21, ARM::D22, ARM::D23, ARM::D24, ARM::D25, ARM::D26, ARM::D27, ARM::D28, ARM::D29, ARM::D30, ARM::D31, 
  };

  // DPR Bit set.
  const uint8_t DPRBits[] = {
    0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // DPR_VFP2 Register Class...
  const uint16_t DPR_VFP2[] = {
    ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, ARM::D8, ARM::D9, ARM::D10, ARM::D11, ARM::D12, ARM::D13, ARM::D14, ARM::D15, 
  };

  // DPR_VFP2 Bit set.
  const uint8_t DPR_VFP2Bits[] = {
    0xf8, 0xff, 0x07, 
  };

  // DPR_8 Register Class...
  const uint16_t DPR_8[] = {
    ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, 
  };

  // DPR_8 Bit set.
  const uint8_t DPR_8Bits[] = {
    0xf8, 0x07, 
  };

  // GPRPair Register Class...
  const uint16_t GPRPair[] = {
    ARM::R0_R1, ARM::R2_R3, ARM::R4_R5, ARM::R6_R7, ARM::R8_R9, ARM::R10_R11, ARM::R12_SP, 
  };

  // GPRPair Bit set.
  const uint8_t GPRPairBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f, 
  };

  // GPRPair_with_gsub_1_in_rGPR Register Class...
  const uint16_t GPRPair_with_gsub_1_in_rGPR[] = {
    ARM::R0_R1, ARM::R2_R3, ARM::R4_R5, ARM::R6_R7, ARM::R8_R9, ARM::R10_R11, 
  };

  // GPRPair_with_gsub_1_in_rGPR Bit set.
  const uint8_t GPRPair_with_gsub_1_in_rGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 
  };

  // GPRPair_with_gsub_0_in_tGPR Register Class...
  const uint16_t GPRPair_with_gsub_0_in_tGPR[] = {
    ARM::R0_R1, ARM::R2_R3, ARM::R4_R5, ARM::R6_R7, 
  };

  // GPRPair_with_gsub_0_in_tGPR Bit set.
  const uint8_t GPRPair_with_gsub_0_in_tGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 
  };

  // GPRPair_with_gsub_0_in_hGPR Register Class...
  const uint16_t GPRPair_with_gsub_0_in_hGPR[] = {
    ARM::R8_R9, ARM::R10_R11, ARM::R12_SP, 
  };

  // GPRPair_with_gsub_0_in_hGPR Bit set.
  const uint8_t GPRPair_with_gsub_0_in_hGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 
  };

  // GPRPair_with_gsub_0_in_tcGPR Register Class...
  const uint16_t GPRPair_with_gsub_0_in_tcGPR[] = {
    ARM::R0_R1, ARM::R2_R3, ARM::R12_SP, 
  };

  // GPRPair_with_gsub_0_in_tcGPR Bit set.
  const uint8_t GPRPair_with_gsub_0_in_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x08, 
  };

  // GPRPair_with_gsub_1_in_tcGPR Register Class...
  const uint16_t GPRPair_with_gsub_1_in_tcGPR[] = {
    ARM::R0_R1, ARM::R2_R3, ARM::R8_R9, 
  };

  // GPRPair_with_gsub_1_in_tcGPR Bit set.
  const uint8_t GPRPair_with_gsub_1_in_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x02, 
  };

  // GPRPair_with_gsub_0_in_tGPR_and_tcGPR Register Class...
  const uint16_t GPRPair_with_gsub_0_in_tGPR_and_tcGPR[] = {
    ARM::R0_R1, ARM::R2_R3, 
  };

  // GPRPair_with_gsub_0_in_tGPR_and_tcGPR Bit set.
  const uint8_t GPRPair_with_gsub_0_in_tGPR_and_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
  };

  // GPRPair_with_gsub_1_in_hGPR_and_rGPR Register Class...
  const uint16_t GPRPair_with_gsub_1_in_hGPR_and_rGPR[] = {
    ARM::R8_R9, ARM::R10_R11, 
  };

  // GPRPair_with_gsub_1_in_hGPR_and_rGPR Bit set.
  const uint8_t GPRPair_with_gsub_1_in_hGPR_and_rGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
  };

  // GPRPair_with_gsub_1_in_GPRsp Register Class...
  const uint16_t GPRPair_with_gsub_1_in_GPRsp[] = {
    ARM::R12_SP, 
  };

  // GPRPair_with_gsub_1_in_GPRsp Bit set.
  const uint8_t GPRPair_with_gsub_1_in_GPRspBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  };

  // GPRPair_with_gsub_1_in_hGPR_and_tcGPR Register Class...
  const uint16_t GPRPair_with_gsub_1_in_hGPR_and_tcGPR[] = {
    ARM::R8_R9, 
  };

  // GPRPair_with_gsub_1_in_hGPR_and_tcGPR Bit set.
  const uint8_t GPRPair_with_gsub_1_in_hGPR_and_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
  };

  // DPairSpc Register Class...
  const uint16_t DPairSpc[] = {
    ARM::D0_D2, ARM::D1_D3, ARM::D2_D4, ARM::D3_D5, ARM::D4_D6, ARM::D5_D7, ARM::D6_D8, ARM::D7_D9, ARM::D8_D10, ARM::D9_D11, ARM::D10_D12, ARM::D11_D13, ARM::D12_D14, ARM::D13_D15, ARM::D14_D16, ARM::D15_D17, ARM::D16_D18, ARM::D17_D19, ARM::D18_D20, ARM::D19_D21, ARM::D20_D22, ARM::D21_D23, ARM::D22_D24, ARM::D23_D25, ARM::D24_D26, ARM::D25_D27, ARM::D26_D28, ARM::D27_D29, ARM::D28_D30, ARM::D29_D31, 
  };

  // DPairSpc Bit set.
  const uint8_t DPairSpcBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x01, 
  };

  // DPairSpc_with_ssub_0 Register Class...
  const uint16_t DPairSpc_with_ssub_0[] = {
    ARM::D0_D2, ARM::D1_D3, ARM::D2_D4, ARM::D3_D5, ARM::D4_D6, ARM::D5_D7, ARM::D6_D8, ARM::D7_D9, ARM::D8_D10, ARM::D9_D11, ARM::D10_D12, ARM::D11_D13, ARM::D12_D14, ARM::D13_D15, ARM::D14_D16, ARM::D15_D17, 
  };

  // DPairSpc_with_ssub_0 Bit set.
  const uint8_t DPairSpc_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x07, 
  };

  // DPairSpc_with_dsub_2_then_ssub_0 Register Class...
  const uint16_t DPairSpc_with_dsub_2_then_ssub_0[] = {
    ARM::D0_D2, ARM::D1_D3, ARM::D2_D4, ARM::D3_D5, ARM::D4_D6, ARM::D5_D7, ARM::D6_D8, ARM::D7_D9, ARM::D8_D10, ARM::D9_D11, ARM::D10_D12, ARM::D11_D13, ARM::D12_D14, ARM::D13_D15, 
  };

  // DPairSpc_with_dsub_2_then_ssub_0 Bit set.
  const uint8_t DPairSpc_with_dsub_2_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x01, 
  };

  // DPairSpc_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t DPairSpc_with_dsub_0_in_DPR_8[] = {
    ARM::D0_D2, ARM::D1_D3, ARM::D2_D4, ARM::D3_D5, ARM::D4_D6, ARM::D5_D7, ARM::D6_D8, ARM::D7_D9, 
  };

  // DPairSpc_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t DPairSpc_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 
  };

  // DPairSpc_with_dsub_2_in_DPR_8 Register Class...
  const uint16_t DPairSpc_with_dsub_2_in_DPR_8[] = {
    ARM::D0_D2, ARM::D1_D3, ARM::D2_D4, ARM::D3_D5, ARM::D4_D6, ARM::D5_D7, 
  };

  // DPairSpc_with_dsub_2_in_DPR_8 Bit set.
  const uint8_t DPairSpc_with_dsub_2_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x01, 
  };

  // DPair Register Class...
  const uint16_t DPair[] = {
    ARM::Q0, ARM::D1_D2, ARM::Q1, ARM::D3_D4, ARM::Q2, ARM::D5_D6, ARM::Q3, ARM::D7_D8, ARM::Q4, ARM::D9_D10, ARM::Q5, ARM::D11_D12, ARM::Q6, ARM::D13_D14, ARM::Q7, ARM::D15_D16, ARM::Q8, ARM::D17_D18, ARM::Q9, ARM::D19_D20, ARM::Q10, ARM::D21_D22, ARM::Q11, ARM::D23_D24, ARM::Q12, ARM::D25_D26, ARM::Q13, ARM::D27_D28, ARM::Q14, ARM::D29_D30, ARM::Q15, 
  };

  // DPair Bit set.
  const uint8_t DPairBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f, 
  };

  // DPair_with_ssub_0 Register Class...
  const uint16_t DPair_with_ssub_0[] = {
    ARM::Q0, ARM::D1_D2, ARM::Q1, ARM::D3_D4, ARM::Q2, ARM::D5_D6, ARM::Q3, ARM::D7_D8, ARM::Q4, ARM::D9_D10, ARM::Q5, ARM::D11_D12, ARM::Q6, ARM::D13_D14, ARM::Q7, ARM::D15_D16, 
  };

  // DPair_with_ssub_0 Bit set.
  const uint8_t DPair_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
  };

  // QPR Register Class...
  const uint16_t QPR[] = {
    ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, ARM::Q8, ARM::Q9, ARM::Q10, ARM::Q11, ARM::Q12, ARM::Q13, ARM::Q14, ARM::Q15, 
  };

  // QPR Bit set.
  const uint8_t QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 
  };

  // DPair_with_ssub_2 Register Class...
  const uint16_t DPair_with_ssub_2[] = {
    ARM::Q0, ARM::D1_D2, ARM::Q1, ARM::D3_D4, ARM::Q2, ARM::D5_D6, ARM::Q3, ARM::D7_D8, ARM::Q4, ARM::D9_D10, ARM::Q5, ARM::D11_D12, ARM::Q6, ARM::D13_D14, ARM::Q7, 
  };

  // DPair_with_ssub_2 Bit set.
  const uint8_t DPair_with_ssub_2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 
  };

  // DPair_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t DPair_with_dsub_0_in_DPR_8[] = {
    ARM::Q0, ARM::D1_D2, ARM::Q1, ARM::D3_D4, ARM::Q2, ARM::D5_D6, ARM::Q3, ARM::D7_D8, 
  };

  // DPair_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t DPair_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  };

  // QPR_VFP2 Register Class...
  const uint16_t QPR_VFP2[] = {
    ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, 
  };

  // QPR_VFP2 Bit set.
  const uint8_t QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 
  };

  // DPair_with_dsub_1_in_DPR_8 Register Class...
  const uint16_t DPair_with_dsub_1_in_DPR_8[] = {
    ARM::Q0, ARM::D1_D2, ARM::Q1, ARM::D3_D4, ARM::Q2, ARM::D5_D6, ARM::Q3, 
  };

  // DPair_with_dsub_1_in_DPR_8 Bit set.
  const uint8_t DPair_with_dsub_1_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  };

  // QPR_8 Register Class...
  const uint16_t QPR_8[] = {
    ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, 
  };

  // QPR_8 Bit set.
  const uint8_t QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 
  };

  // DTriple Register Class...
  const uint16_t DTriple[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, ARM::D6_D7_D8, ARM::D7_D8_D9, ARM::D8_D9_D10, ARM::D9_D10_D11, ARM::D10_D11_D12, ARM::D11_D12_D13, ARM::D12_D13_D14, ARM::D13_D14_D15, ARM::D14_D15_D16, ARM::D15_D16_D17, ARM::D16_D17_D18, ARM::D17_D18_D19, ARM::D18_D19_D20, ARM::D19_D20_D21, ARM::D20_D21_D22, ARM::D21_D22_D23, ARM::D22_D23_D24, ARM::D23_D24_D25, ARM::D24_D25_D26, ARM::D25_D26_D27, ARM::D26_D27_D28, ARM::D27_D28_D29, ARM::D28_D29_D30, ARM::D29_D30_D31, 
  };

  // DTriple Bit set.
  const uint8_t DTripleBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x03, 
  };

  // DTripleSpc Register Class...
  const uint16_t DTripleSpc[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, ARM::D12_D14_D16, ARM::D13_D15_D17, ARM::D14_D16_D18, ARM::D15_D17_D19, ARM::D16_D18_D20, ARM::D17_D19_D21, ARM::D18_D20_D22, ARM::D19_D21_D23, ARM::D20_D22_D24, ARM::D21_D23_D25, ARM::D22_D24_D26, ARM::D23_D25_D27, ARM::D24_D26_D28, ARM::D25_D27_D29, ARM::D26_D28_D30, ARM::D27_D29_D31, 
  };

  // DTripleSpc Bit set.
  const uint8_t DTripleSpcBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x3f, 
  };

  // DTripleSpc_with_ssub_0 Register Class...
  const uint16_t DTripleSpc_with_ssub_0[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, ARM::D12_D14_D16, ARM::D13_D15_D17, ARM::D14_D16_D18, ARM::D15_D17_D19, 
  };

  // DTripleSpc_with_ssub_0 Bit set.
  const uint8_t DTripleSpc_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x03, 
  };

  // DTriple_with_ssub_0 Register Class...
  const uint16_t DTriple_with_ssub_0[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, ARM::D6_D7_D8, ARM::D7_D8_D9, ARM::D8_D9_D10, ARM::D9_D10_D11, ARM::D10_D11_D12, ARM::D11_D12_D13, ARM::D12_D13_D14, ARM::D13_D14_D15, ARM::D14_D15_D16, ARM::D15_D16_D17, 
  };

  // DTriple_with_ssub_0 Bit set.
  const uint8_t DTriple_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 
  };

  // DTriple_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DTriple_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3, ARM::D3_D4_D5, ARM::D5_D6_D7, ARM::D7_D8_D9, ARM::D9_D10_D11, ARM::D11_D12_D13, ARM::D13_D14_D15, ARM::D15_D16_D17, ARM::D17_D18_D19, ARM::D19_D20_D21, ARM::D21_D22_D23, ARM::D23_D24_D25, ARM::D25_D26_D27, ARM::D27_D28_D29, ARM::D29_D30_D31, 
  };

  // DTriple_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DTriple_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xaa, 0xaa, 0xaa, 0x02, 
  };

  // DTriple_with_qsub_0_in_QPR Register Class...
  const uint16_t DTriple_with_qsub_0_in_QPR[] = {
    ARM::D0_D1_D2, ARM::D2_D3_D4, ARM::D4_D5_D6, ARM::D6_D7_D8, ARM::D8_D9_D10, ARM::D10_D11_D12, ARM::D12_D13_D14, ARM::D14_D15_D16, ARM::D16_D17_D18, ARM::D18_D19_D20, ARM::D20_D21_D22, ARM::D22_D23_D24, ARM::D24_D25_D26, ARM::D26_D27_D28, ARM::D28_D29_D30, 
  };

  // DTriple_with_qsub_0_in_QPR Bit set.
  const uint8_t DTriple_with_qsub_0_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x55, 0x55, 0x55, 0x01, 
  };

  // DTriple_with_ssub_2 Register Class...
  const uint16_t DTriple_with_ssub_2[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, ARM::D6_D7_D8, ARM::D7_D8_D9, ARM::D8_D9_D10, ARM::D9_D10_D11, ARM::D10_D11_D12, ARM::D11_D12_D13, ARM::D12_D13_D14, ARM::D13_D14_D15, ARM::D14_D15_D16, 
  };

  // DTriple_with_ssub_2 Bit set.
  const uint8_t DTriple_with_ssub_2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x07, 
  };

  // DTripleSpc_with_dsub_2_then_ssub_0 Register Class...
  const uint16_t DTripleSpc_with_dsub_2_then_ssub_0[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, ARM::D12_D14_D16, ARM::D13_D15_D17, 
  };

  // DTripleSpc_with_dsub_2_then_ssub_0 Bit set.
  const uint8_t DTripleSpc_with_dsub_2_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 
  };

  // DTriple_with_dsub_2_then_ssub_0 Register Class...
  const uint16_t DTriple_with_dsub_2_then_ssub_0[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, ARM::D6_D7_D8, ARM::D7_D8_D9, ARM::D8_D9_D10, ARM::D9_D10_D11, ARM::D10_D11_D12, ARM::D11_D12_D13, ARM::D12_D13_D14, ARM::D13_D14_D15, 
  };

  // DTriple_with_dsub_2_then_ssub_0 Bit set.
  const uint8_t DTriple_with_dsub_2_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x03, 
  };

  // DTripleSpc_with_dsub_4_then_ssub_0 Register Class...
  const uint16_t DTripleSpc_with_dsub_4_then_ssub_0[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, 
  };

  // DTripleSpc_with_dsub_4_then_ssub_0 Bit set.
  const uint8_t DTripleSpc_with_dsub_4_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 
  };

  // DTripleSpc_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t DTripleSpc_with_dsub_0_in_DPR_8[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, 
  };

  // DTripleSpc_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t DTripleSpc_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 
  };

  // DTriple_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t DTriple_with_dsub_0_in_DPR_8[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, ARM::D6_D7_D8, ARM::D7_D8_D9, 
  };

  // DTriple_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t DTriple_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 
  };

  // DTriple_with_qsub_0_in_QPR_VFP2 Register Class...
  const uint16_t DTriple_with_qsub_0_in_QPR_VFP2[] = {
    ARM::D0_D1_D2, ARM::D2_D3_D4, ARM::D4_D5_D6, ARM::D6_D7_D8, ARM::D8_D9_D10, ARM::D10_D11_D12, ARM::D12_D13_D14, ARM::D14_D15_D16, 
  };

  // DTriple_with_qsub_0_in_QPR_VFP2 Bit set.
  const uint8_t DTriple_with_qsub_0_in_QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x55, 0x05, 
  };

  // DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3, ARM::D3_D4_D5, ARM::D5_D6_D7, ARM::D7_D8_D9, ARM::D9_D10_D11, ARM::D11_D12_D13, ARM::D13_D14_D15, ARM::D15_D16_D17, 
  };

  // DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xaa, 0x0a, 
  };

  // DTriple_with_dsub_1_dsub_2_in_QPR_VFP2 Register Class...
  const uint16_t DTriple_with_dsub_1_dsub_2_in_QPR_VFP2[] = {
    ARM::D1_D2_D3, ARM::D3_D4_D5, ARM::D5_D6_D7, ARM::D7_D8_D9, ARM::D9_D10_D11, ARM::D11_D12_D13, ARM::D13_D14_D15, 
  };

  // DTriple_with_dsub_1_dsub_2_in_QPR_VFP2 Bit set.
  const uint8_t DTriple_with_dsub_1_dsub_2_in_QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xaa, 0x02, 
  };

  // DTriple_with_dsub_1_in_DPR_8 Register Class...
  const uint16_t DTriple_with_dsub_1_in_DPR_8[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, ARM::D6_D7_D8, 
  };

  // DTriple_with_dsub_1_in_DPR_8 Bit set.
  const uint8_t DTriple_with_dsub_1_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 
  };

  // DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR Register Class...
  const uint16_t DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR[] = {
    ARM::D0_D1_D2, ARM::D2_D3_D4, ARM::D4_D5_D6, ARM::D6_D7_D8, ARM::D8_D9_D10, ARM::D10_D11_D12, ARM::D12_D13_D14, 
  };

  // DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR Bit set.
  const uint8_t DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x55, 0x01, 
  };

  // DTripleSpc_with_dsub_2_in_DPR_8 Register Class...
  const uint16_t DTripleSpc_with_dsub_2_in_DPR_8[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, 
  };

  // DTripleSpc_with_dsub_2_in_DPR_8 Bit set.
  const uint8_t DTripleSpc_with_dsub_2_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 
  };

  // DTriple_with_dsub_2_in_DPR_8 Register Class...
  const uint16_t DTriple_with_dsub_2_in_DPR_8[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, 
  };

  // DTriple_with_dsub_2_in_DPR_8 Bit set.
  const uint8_t DTriple_with_dsub_2_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 
  };

  // DTripleSpc_with_dsub_4_in_DPR_8 Register Class...
  const uint16_t DTripleSpc_with_dsub_4_in_DPR_8[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, 
  };

  // DTripleSpc_with_dsub_4_in_DPR_8 Bit set.
  const uint8_t DTripleSpc_with_dsub_4_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 
  };

  // DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3, ARM::D3_D4_D5, ARM::D5_D6_D7, ARM::D7_D8_D9, 
  };

  // DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x0a, 
  };

  // DTriple_with_qsub_0_in_QPR_8 Register Class...
  const uint16_t DTriple_with_qsub_0_in_QPR_8[] = {
    ARM::D0_D1_D2, ARM::D2_D3_D4, ARM::D4_D5_D6, ARM::D6_D7_D8, 
  };

  // DTriple_with_qsub_0_in_QPR_8 Bit set.
  const uint8_t DTriple_with_qsub_0_in_QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x05, 
  };

  // DTriple_with_dsub_1_dsub_2_in_QPR_8 Register Class...
  const uint16_t DTriple_with_dsub_1_dsub_2_in_QPR_8[] = {
    ARM::D1_D2_D3, ARM::D3_D4_D5, ARM::D5_D6_D7, 
  };

  // DTriple_with_dsub_1_dsub_2_in_QPR_8 Bit set.
  const uint8_t DTriple_with_dsub_1_dsub_2_in_QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x02, 
  };

  // DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR Register Class...
  const uint16_t DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR[] = {
    ARM::D0_D1_D2, ARM::D2_D3_D4, ARM::D4_D5_D6, 
  };

  // DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR Bit set.
  const uint8_t DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 
  };

  // DQuadSpc Register Class...
  const uint16_t DQuadSpc[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, ARM::D12_D14_D16, ARM::D13_D15_D17, ARM::D14_D16_D18, ARM::D15_D17_D19, ARM::D16_D18_D20, ARM::D17_D19_D21, ARM::D18_D20_D22, ARM::D19_D21_D23, ARM::D20_D22_D24, ARM::D21_D23_D25, ARM::D22_D24_D26, ARM::D23_D25_D27, ARM::D24_D26_D28, ARM::D25_D27_D29, ARM::D26_D28_D30, ARM::D27_D29_D31, 
  };

  // DQuadSpc Bit set.
  const uint8_t DQuadSpcBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x3f, 
  };

  // DQuadSpc_with_ssub_0 Register Class...
  const uint16_t DQuadSpc_with_ssub_0[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, ARM::D12_D14_D16, ARM::D13_D15_D17, ARM::D14_D16_D18, ARM::D15_D17_D19, 
  };

  // DQuadSpc_with_ssub_0 Bit set.
  const uint8_t DQuadSpc_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x03, 
  };

  // DQuadSpc_with_dsub_2_then_ssub_0 Register Class...
  const uint16_t DQuadSpc_with_dsub_2_then_ssub_0[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, ARM::D12_D14_D16, ARM::D13_D15_D17, 
  };

  // DQuadSpc_with_dsub_2_then_ssub_0 Bit set.
  const uint8_t DQuadSpc_with_dsub_2_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 
  };

  // DQuadSpc_with_dsub_4_then_ssub_0 Register Class...
  const uint16_t DQuadSpc_with_dsub_4_then_ssub_0[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, 
  };

  // DQuadSpc_with_dsub_4_then_ssub_0 Bit set.
  const uint8_t DQuadSpc_with_dsub_4_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 
  };

  // DQuadSpc_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t DQuadSpc_with_dsub_0_in_DPR_8[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, 
  };

  // DQuadSpc_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t DQuadSpc_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 
  };

  // DQuadSpc_with_dsub_2_in_DPR_8 Register Class...
  const uint16_t DQuadSpc_with_dsub_2_in_DPR_8[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, 
  };

  // DQuadSpc_with_dsub_2_in_DPR_8 Bit set.
  const uint8_t DQuadSpc_with_dsub_2_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 
  };

  // DQuadSpc_with_dsub_4_in_DPR_8 Register Class...
  const uint16_t DQuadSpc_with_dsub_4_in_DPR_8[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, 
  };

  // DQuadSpc_with_dsub_4_in_DPR_8 Bit set.
  const uint8_t DQuadSpc_with_dsub_4_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 
  };

  // DQuad Register Class...
  const uint16_t DQuad[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, ARM::D7_D8_D9_D10, ARM::Q4_Q5, ARM::D9_D10_D11_D12, ARM::Q5_Q6, ARM::D11_D12_D13_D14, ARM::Q6_Q7, ARM::D13_D14_D15_D16, ARM::Q7_Q8, ARM::D15_D16_D17_D18, ARM::Q8_Q9, ARM::D17_D18_D19_D20, ARM::Q9_Q10, ARM::D19_D20_D21_D22, ARM::Q10_Q11, ARM::D21_D22_D23_D24, ARM::Q11_Q12, ARM::D23_D24_D25_D26, ARM::Q12_Q13, ARM::D25_D26_D27_D28, ARM::Q13_Q14, ARM::D27_D28_D29_D30, ARM::Q14_Q15, 
  };

  // DQuad Bit set.
  const uint8_t DQuadBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x1f, 
  };

  // DQuad_with_ssub_0 Register Class...
  const uint16_t DQuad_with_ssub_0[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, ARM::D7_D8_D9_D10, ARM::Q4_Q5, ARM::D9_D10_D11_D12, ARM::Q5_Q6, ARM::D11_D12_D13_D14, ARM::Q6_Q7, ARM::D13_D14_D15_D16, ARM::Q7_Q8, ARM::D15_D16_D17_D18, 
  };

  // DQuad_with_ssub_0 Bit set.
  const uint8_t DQuad_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 
  };

  // DQuad_with_ssub_2 Register Class...
  const uint16_t DQuad_with_ssub_2[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, ARM::D7_D8_D9_D10, ARM::Q4_Q5, ARM::D9_D10_D11_D12, ARM::Q5_Q6, ARM::D11_D12_D13_D14, ARM::Q6_Q7, ARM::D13_D14_D15_D16, ARM::Q7_Q8, 
  };

  // DQuad_with_ssub_2 Bit set.
  const uint8_t DQuad_with_ssub_2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 
  };

  // QQPR Register Class...
  const uint16_t QQPR[] = {
    ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, ARM::Q4_Q5, ARM::Q5_Q6, ARM::Q6_Q7, ARM::Q7_Q8, ARM::Q8_Q9, ARM::Q9_Q10, ARM::Q10_Q11, ARM::Q11_Q12, ARM::Q12_Q13, ARM::Q13_Q14, ARM::Q14_Q15, 
  };

  // QQPR Bit set.
  const uint8_t QQPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 
  };

  // DQuad_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DQuad_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, ARM::D5_D6_D7_D8, ARM::D7_D8_D9_D10, ARM::D9_D10_D11_D12, ARM::D11_D12_D13_D14, ARM::D13_D14_D15_D16, ARM::D15_D16_D17_D18, ARM::D17_D18_D19_D20, ARM::D19_D20_D21_D22, ARM::D21_D22_D23_D24, ARM::D23_D24_D25_D26, ARM::D25_D26_D27_D28, ARM::D27_D28_D29_D30, 
  };

  // DQuad_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DQuad_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x1f, 
  };

  // DQuad_with_dsub_2_then_ssub_0 Register Class...
  const uint16_t DQuad_with_dsub_2_then_ssub_0[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, ARM::D7_D8_D9_D10, ARM::Q4_Q5, ARM::D9_D10_D11_D12, ARM::Q5_Q6, ARM::D11_D12_D13_D14, ARM::Q6_Q7, ARM::D13_D14_D15_D16, 
  };

  // DQuad_with_dsub_2_then_ssub_0 Bit set.
  const uint8_t DQuad_with_dsub_2_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 
  };

  // DQuad_with_dsub_3_then_ssub_0 Register Class...
  const uint16_t DQuad_with_dsub_3_then_ssub_0[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, ARM::D7_D8_D9_D10, ARM::Q4_Q5, ARM::D9_D10_D11_D12, ARM::Q5_Q6, ARM::D11_D12_D13_D14, ARM::Q6_Q7, 
  };

  // DQuad_with_dsub_3_then_ssub_0 Bit set.
  const uint8_t DQuad_with_dsub_3_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1f, 
  };

  // DQuad_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t DQuad_with_dsub_0_in_DPR_8[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, ARM::D7_D8_D9_D10, 
  };

  // DQuad_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t DQuad_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 
  };

  // DQuad_with_qsub_0_in_QPR_VFP2 Register Class...
  const uint16_t DQuad_with_qsub_0_in_QPR_VFP2[] = {
    ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, ARM::Q4_Q5, ARM::Q5_Q6, ARM::Q6_Q7, ARM::Q7_Q8, 
  };

  // DQuad_with_qsub_0_in_QPR_VFP2 Bit set.
  const uint8_t DQuad_with_qsub_0_in_QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 
  };

  // DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, ARM::D5_D6_D7_D8, ARM::D7_D8_D9_D10, ARM::D9_D10_D11_D12, ARM::D11_D12_D13_D14, ARM::D13_D14_D15_D16, ARM::D15_D16_D17_D18, 
  };

  // DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 
  };

  // DQuad_with_dsub_1_dsub_2_in_QPR_VFP2 Register Class...
  const uint16_t DQuad_with_dsub_1_dsub_2_in_QPR_VFP2[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, ARM::D5_D6_D7_D8, ARM::D7_D8_D9_D10, ARM::D9_D10_D11_D12, ARM::D11_D12_D13_D14, ARM::D13_D14_D15_D16, 
  };

  // DQuad_with_dsub_1_dsub_2_in_QPR_VFP2 Bit set.
  const uint8_t DQuad_with_dsub_1_dsub_2_in_QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 
  };

  // DQuad_with_dsub_1_in_DPR_8 Register Class...
  const uint16_t DQuad_with_dsub_1_in_DPR_8[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, 
  };

  // DQuad_with_dsub_1_in_DPR_8 Bit set.
  const uint8_t DQuad_with_dsub_1_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 
  };

  // DQuad_with_qsub_1_in_QPR_VFP2 Register Class...
  const uint16_t DQuad_with_qsub_1_in_QPR_VFP2[] = {
    ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, ARM::Q4_Q5, ARM::Q5_Q6, ARM::Q6_Q7, 
  };

  // DQuad_with_qsub_1_in_QPR_VFP2 Bit set.
  const uint8_t DQuad_with_qsub_1_in_QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 
  };

  // DQuad_with_dsub_2_in_DPR_8 Register Class...
  const uint16_t DQuad_with_dsub_2_in_DPR_8[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, 
  };

  // DQuad_with_dsub_2_in_DPR_8 Bit set.
  const uint8_t DQuad_with_dsub_2_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 
  };

  // DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, ARM::D5_D6_D7_D8, ARM::D7_D8_D9_D10, ARM::D9_D10_D11_D12, ARM::D11_D12_D13_D14, 
  };

  // DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1f, 
  };

  // DQuad_with_dsub_3_in_DPR_8 Register Class...
  const uint16_t DQuad_with_dsub_3_in_DPR_8[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, 
  };

  // DQuad_with_dsub_3_in_DPR_8 Bit set.
  const uint8_t DQuad_with_dsub_3_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 
  };

  // DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, ARM::D5_D6_D7_D8, ARM::D7_D8_D9_D10, 
  };

  // DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 
  };

  // DQuad_with_qsub_0_in_QPR_8 Register Class...
  const uint16_t DQuad_with_qsub_0_in_QPR_8[] = {
    ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, 
  };

  // DQuad_with_qsub_0_in_QPR_8 Bit set.
  const uint8_t DQuad_with_qsub_0_in_QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 
  };

  // DQuad_with_dsub_1_dsub_2_in_QPR_8 Register Class...
  const uint16_t DQuad_with_dsub_1_dsub_2_in_QPR_8[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, ARM::D5_D6_D7_D8, 
  };

  // DQuad_with_dsub_1_dsub_2_in_QPR_8 Bit set.
  const uint8_t DQuad_with_dsub_1_dsub_2_in_QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 
  };

  // DQuad_with_qsub_1_in_QPR_8 Register Class...
  const uint16_t DQuad_with_qsub_1_in_QPR_8[] = {
    ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, 
  };

  // DQuad_with_qsub_1_in_QPR_8 Bit set.
  const uint8_t DQuad_with_qsub_1_in_QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 
  };

  // DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, 
  };

  // DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 
  };

  // QQQQPR Register Class...
  const uint16_t QQQQPR[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, ARM::Q6_Q7_Q8_Q9, ARM::Q7_Q8_Q9_Q10, ARM::Q8_Q9_Q10_Q11, ARM::Q9_Q10_Q11_Q12, ARM::Q10_Q11_Q12_Q13, ARM::Q11_Q12_Q13_Q14, ARM::Q12_Q13_Q14_Q15, 
  };

  // QQQQPR Bit set.
  const uint8_t QQQQPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1f, 
  };

  // QQQQPR_with_ssub_0 Register Class...
  const uint16_t QQQQPR_with_ssub_0[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, ARM::Q6_Q7_Q8_Q9, ARM::Q7_Q8_Q9_Q10, 
  };

  // QQQQPR_with_ssub_0 Bit set.
  const uint8_t QQQQPR_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
  };

  // QQQQPR_with_dsub_2_then_ssub_0 Register Class...
  const uint16_t QQQQPR_with_dsub_2_then_ssub_0[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, ARM::Q6_Q7_Q8_Q9, 
  };

  // QQQQPR_with_dsub_2_then_ssub_0 Bit set.
  const uint8_t QQQQPR_with_dsub_2_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 
  };

  // QQQQPR_with_dsub_5_then_ssub_0 Register Class...
  const uint16_t QQQQPR_with_dsub_5_then_ssub_0[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, 
  };

  // QQQQPR_with_dsub_5_then_ssub_0 Bit set.
  const uint8_t QQQQPR_with_dsub_5_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 
  };

  // QQQQPR_with_dsub_7_then_ssub_0 Register Class...
  const uint16_t QQQQPR_with_dsub_7_then_ssub_0[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, 
  };

  // QQQQPR_with_dsub_7_then_ssub_0 Bit set.
  const uint8_t QQQQPR_with_dsub_7_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  };

  // QQQQPR_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t QQQQPR_with_dsub_0_in_DPR_8[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, 
  };

  // QQQQPR_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t QQQQPR_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  };

  // QQQQPR_with_dsub_2_in_DPR_8 Register Class...
  const uint16_t QQQQPR_with_dsub_2_in_DPR_8[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, 
  };

  // QQQQPR_with_dsub_2_in_DPR_8 Bit set.
  const uint8_t QQQQPR_with_dsub_2_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  };

  // QQQQPR_with_dsub_4_in_DPR_8 Register Class...
  const uint16_t QQQQPR_with_dsub_4_in_DPR_8[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, 
  };

  // QQQQPR_with_dsub_4_in_DPR_8 Bit set.
  const uint8_t QQQQPR_with_dsub_4_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  };

  // QQQQPR_with_dsub_6_in_DPR_8 Register Class...
  const uint16_t QQQQPR_with_dsub_6_in_DPR_8[] = {
    ARM::Q0_Q1_Q2_Q3, 
  };

  // QQQQPR_with_dsub_6_in_DPR_8 Bit set.
  const uint8_t QQQQPR_with_dsub_6_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  };

}

extern const MCRegisterClass ARMMCRegisterClasses[] = {
  { "SPR", SPR, SPRBits, 32, sizeof(SPRBits), ARM::SPRRegClassID, 4, 4, 1, 1 },
  { "GPR", GPR, GPRBits, 16, sizeof(GPRBits), ARM::GPRRegClassID, 4, 4, 1, 1 },
  { "SPR_8", SPR_8, SPR_8Bits, 16, sizeof(SPR_8Bits), ARM::SPR_8RegClassID, 4, 4, 1, 1 },
  { "GPRnopc", GPRnopc, GPRnopcBits, 15, sizeof(GPRnopcBits), ARM::GPRnopcRegClassID, 4, 4, 1, 1 },
  { "rGPR", rGPR, rGPRBits, 14, sizeof(rGPRBits), ARM::rGPRRegClassID, 4, 4, 1, 1 },
  { "hGPR", hGPR, hGPRBits, 8, sizeof(hGPRBits), ARM::hGPRRegClassID, 4, 4, 1, 1 },
  { "tGPR", tGPR, tGPRBits, 8, sizeof(tGPRBits), ARM::tGPRRegClassID, 4, 4, 1, 1 },
  { "GPRnopc_and_hGPR", GPRnopc_and_hGPR, GPRnopc_and_hGPRBits, 7, sizeof(GPRnopc_and_hGPRBits), ARM::GPRnopc_and_hGPRRegClassID, 4, 4, 1, 1 },
  { "hGPR_and_rGPR", hGPR_and_rGPR, hGPR_and_rGPRBits, 6, sizeof(hGPR_and_rGPRBits), ARM::hGPR_and_rGPRRegClassID, 4, 4, 1, 1 },
  { "tcGPR", tcGPR, tcGPRBits, 6, sizeof(tcGPRBits), ARM::tcGPRRegClassID, 4, 4, 1, 1 },
  { "tGPR_and_tcGPR", tGPR_and_tcGPR, tGPR_and_tcGPRBits, 4, sizeof(tGPR_and_tcGPRBits), ARM::tGPR_and_tcGPRRegClassID, 4, 4, 1, 1 },
  { "hGPR_and_tcGPR", hGPR_and_tcGPR, hGPR_and_tcGPRBits, 2, sizeof(hGPR_and_tcGPRBits), ARM::hGPR_and_tcGPRRegClassID, 4, 4, 1, 1 },
  { "CCR", CCR, CCRBits, 1, sizeof(CCRBits), ARM::CCRRegClassID, 4, 4, -1, 0 },
  { "GPRsp", GPRsp, GPRspBits, 1, sizeof(GPRspBits), ARM::GPRspRegClassID, 4, 4, 1, 1 },
  { "DPR", DPR, DPRBits, 32, sizeof(DPRBits), ARM::DPRRegClassID, 8, 8, 1, 1 },
  { "DPR_VFP2", DPR_VFP2, DPR_VFP2Bits, 16, sizeof(DPR_VFP2Bits), ARM::DPR_VFP2RegClassID, 8, 8, 1, 1 },
  { "DPR_8", DPR_8, DPR_8Bits, 8, sizeof(DPR_8Bits), ARM::DPR_8RegClassID, 8, 8, 1, 1 },
  { "GPRPair", GPRPair, GPRPairBits, 7, sizeof(GPRPairBits), ARM::GPRPairRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_1_in_rGPR", GPRPair_with_gsub_1_in_rGPR, GPRPair_with_gsub_1_in_rGPRBits, 6, sizeof(GPRPair_with_gsub_1_in_rGPRBits), ARM::GPRPair_with_gsub_1_in_rGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_0_in_tGPR", GPRPair_with_gsub_0_in_tGPR, GPRPair_with_gsub_0_in_tGPRBits, 4, sizeof(GPRPair_with_gsub_0_in_tGPRBits), ARM::GPRPair_with_gsub_0_in_tGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_0_in_hGPR", GPRPair_with_gsub_0_in_hGPR, GPRPair_with_gsub_0_in_hGPRBits, 3, sizeof(GPRPair_with_gsub_0_in_hGPRBits), ARM::GPRPair_with_gsub_0_in_hGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_0_in_tcGPR", GPRPair_with_gsub_0_in_tcGPR, GPRPair_with_gsub_0_in_tcGPRBits, 3, sizeof(GPRPair_with_gsub_0_in_tcGPRBits), ARM::GPRPair_with_gsub_0_in_tcGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_1_in_tcGPR", GPRPair_with_gsub_1_in_tcGPR, GPRPair_with_gsub_1_in_tcGPRBits, 3, sizeof(GPRPair_with_gsub_1_in_tcGPRBits), ARM::GPRPair_with_gsub_1_in_tcGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_0_in_tGPR_and_tcGPR", GPRPair_with_gsub_0_in_tGPR_and_tcGPR, GPRPair_with_gsub_0_in_tGPR_and_tcGPRBits, 2, sizeof(GPRPair_with_gsub_0_in_tGPR_and_tcGPRBits), ARM::GPRPair_with_gsub_0_in_tGPR_and_tcGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_1_in_hGPR_and_rGPR", GPRPair_with_gsub_1_in_hGPR_and_rGPR, GPRPair_with_gsub_1_in_hGPR_and_rGPRBits, 2, sizeof(GPRPair_with_gsub_1_in_hGPR_and_rGPRBits), ARM::GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_1_in_GPRsp", GPRPair_with_gsub_1_in_GPRsp, GPRPair_with_gsub_1_in_GPRspBits, 1, sizeof(GPRPair_with_gsub_1_in_GPRspBits), ARM::GPRPair_with_gsub_1_in_GPRspRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_1_in_hGPR_and_tcGPR", GPRPair_with_gsub_1_in_hGPR_and_tcGPR, GPRPair_with_gsub_1_in_hGPR_and_tcGPRBits, 1, sizeof(GPRPair_with_gsub_1_in_hGPR_and_tcGPRBits), ARM::GPRPair_with_gsub_1_in_hGPR_and_tcGPRRegClassID, 8, 8, 1, 1 },
  { "DPairSpc", DPairSpc, DPairSpcBits, 30, sizeof(DPairSpcBits), ARM::DPairSpcRegClassID, 16, 8, 1, 1 },
  { "DPairSpc_with_ssub_0", DPairSpc_with_ssub_0, DPairSpc_with_ssub_0Bits, 16, sizeof(DPairSpc_with_ssub_0Bits), ARM::DPairSpc_with_ssub_0RegClassID, 16, 8, 1, 1 },
  { "DPairSpc_with_dsub_2_then_ssub_0", DPairSpc_with_dsub_2_then_ssub_0, DPairSpc_with_dsub_2_then_ssub_0Bits, 14, sizeof(DPairSpc_with_dsub_2_then_ssub_0Bits), ARM::DPairSpc_with_dsub_2_then_ssub_0RegClassID, 16, 8, 1, 1 },
  { "DPairSpc_with_dsub_0_in_DPR_8", DPairSpc_with_dsub_0_in_DPR_8, DPairSpc_with_dsub_0_in_DPR_8Bits, 8, sizeof(DPairSpc_with_dsub_0_in_DPR_8Bits), ARM::DPairSpc_with_dsub_0_in_DPR_8RegClassID, 16, 8, 1, 1 },
  { "DPairSpc_with_dsub_2_in_DPR_8", DPairSpc_with_dsub_2_in_DPR_8, DPairSpc_with_dsub_2_in_DPR_8Bits, 6, sizeof(DPairSpc_with_dsub_2_in_DPR_8Bits), ARM::DPairSpc_with_dsub_2_in_DPR_8RegClassID, 16, 8, 1, 1 },
  { "DPair", DPair, DPairBits, 31, sizeof(DPairBits), ARM::DPairRegClassID, 16, 16, 1, 1 },
  { "DPair_with_ssub_0", DPair_with_ssub_0, DPair_with_ssub_0Bits, 16, sizeof(DPair_with_ssub_0Bits), ARM::DPair_with_ssub_0RegClassID, 16, 16, 1, 1 },
  { "QPR", QPR, QPRBits, 16, sizeof(QPRBits), ARM::QPRRegClassID, 16, 16, 1, 1 },
  { "DPair_with_ssub_2", DPair_with_ssub_2, DPair_with_ssub_2Bits, 15, sizeof(DPair_with_ssub_2Bits), ARM::DPair_with_ssub_2RegClassID, 16, 16, 1, 1 },
  { "DPair_with_dsub_0_in_DPR_8", DPair_with_dsub_0_in_DPR_8, DPair_with_dsub_0_in_DPR_8Bits, 8, sizeof(DPair_with_dsub_0_in_DPR_8Bits), ARM::DPair_with_dsub_0_in_DPR_8RegClassID, 16, 16, 1, 1 },
  { "QPR_VFP2", QPR_VFP2, QPR_VFP2Bits, 8, sizeof(QPR_VFP2Bits), ARM::QPR_VFP2RegClassID, 16, 16, 1, 1 },
  { "DPair_with_dsub_1_in_DPR_8", DPair_with_dsub_1_in_DPR_8, DPair_with_dsub_1_in_DPR_8Bits, 7, sizeof(DPair_with_dsub_1_in_DPR_8Bits), ARM::DPair_with_dsub_1_in_DPR_8RegClassID, 16, 16, 1, 1 },
  { "QPR_8", QPR_8, QPR_8Bits, 4, sizeof(QPR_8Bits), ARM::QPR_8RegClassID, 16, 16, 1, 1 },
  { "DTriple", DTriple, DTripleBits, 30, sizeof(DTripleBits), ARM::DTripleRegClassID, 24, 8, 1, 1 },
  { "DTripleSpc", DTripleSpc, DTripleSpcBits, 28, sizeof(DTripleSpcBits), ARM::DTripleSpcRegClassID, 24, 8, 1, 1 },
  { "DTripleSpc_with_ssub_0", DTripleSpc_with_ssub_0, DTripleSpc_with_ssub_0Bits, 16, sizeof(DTripleSpc_with_ssub_0Bits), ARM::DTripleSpc_with_ssub_0RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_ssub_0", DTriple_with_ssub_0, DTriple_with_ssub_0Bits, 16, sizeof(DTriple_with_ssub_0Bits), ARM::DTriple_with_ssub_0RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_1_dsub_2_in_QPR", DTriple_with_dsub_1_dsub_2_in_QPR, DTriple_with_dsub_1_dsub_2_in_QPRBits, 15, sizeof(DTriple_with_dsub_1_dsub_2_in_QPRBits), ARM::DTriple_with_dsub_1_dsub_2_in_QPRRegClassID, 24, 8, 1, 1 },
  { "DTriple_with_qsub_0_in_QPR", DTriple_with_qsub_0_in_QPR, DTriple_with_qsub_0_in_QPRBits, 15, sizeof(DTriple_with_qsub_0_in_QPRBits), ARM::DTriple_with_qsub_0_in_QPRRegClassID, 24, 8, 1, 1 },
  { "DTriple_with_ssub_2", DTriple_with_ssub_2, DTriple_with_ssub_2Bits, 15, sizeof(DTriple_with_ssub_2Bits), ARM::DTriple_with_ssub_2RegClassID, 24, 8, 1, 1 },
  { "DTripleSpc_with_dsub_2_then_ssub_0", DTripleSpc_with_dsub_2_then_ssub_0, DTripleSpc_with_dsub_2_then_ssub_0Bits, 14, sizeof(DTripleSpc_with_dsub_2_then_ssub_0Bits), ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_2_then_ssub_0", DTriple_with_dsub_2_then_ssub_0, DTriple_with_dsub_2_then_ssub_0Bits, 14, sizeof(DTriple_with_dsub_2_then_ssub_0Bits), ARM::DTriple_with_dsub_2_then_ssub_0RegClassID, 24, 8, 1, 1 },
  { "DTripleSpc_with_dsub_4_then_ssub_0", DTripleSpc_with_dsub_4_then_ssub_0, DTripleSpc_with_dsub_4_then_ssub_0Bits, 12, sizeof(DTripleSpc_with_dsub_4_then_ssub_0Bits), ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClassID, 24, 8, 1, 1 },
  { "DTripleSpc_with_dsub_0_in_DPR_8", DTripleSpc_with_dsub_0_in_DPR_8, DTripleSpc_with_dsub_0_in_DPR_8Bits, 8, sizeof(DTripleSpc_with_dsub_0_in_DPR_8Bits), ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_0_in_DPR_8", DTriple_with_dsub_0_in_DPR_8, DTriple_with_dsub_0_in_DPR_8Bits, 8, sizeof(DTriple_with_dsub_0_in_DPR_8Bits), ARM::DTriple_with_dsub_0_in_DPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_qsub_0_in_QPR_VFP2", DTriple_with_qsub_0_in_QPR_VFP2, DTriple_with_qsub_0_in_QPR_VFP2Bits, 8, sizeof(DTriple_with_qsub_0_in_QPR_VFP2Bits), ARM::DTriple_with_qsub_0_in_QPR_VFP2RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR", DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR, DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRBits, 8, sizeof(DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRBits), ARM::DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_1_dsub_2_in_QPR_VFP2", DTriple_with_dsub_1_dsub_2_in_QPR_VFP2, DTriple_with_dsub_1_dsub_2_in_QPR_VFP2Bits, 7, sizeof(DTriple_with_dsub_1_dsub_2_in_QPR_VFP2Bits), ARM::DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_1_in_DPR_8", DTriple_with_dsub_1_in_DPR_8, DTriple_with_dsub_1_in_DPR_8Bits, 7, sizeof(DTriple_with_dsub_1_in_DPR_8Bits), ARM::DTriple_with_dsub_1_in_DPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR", DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR, DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRBits, 7, sizeof(DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRBits), ARM::DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClassID, 24, 8, 1, 1 },
  { "DTripleSpc_with_dsub_2_in_DPR_8", DTripleSpc_with_dsub_2_in_DPR_8, DTripleSpc_with_dsub_2_in_DPR_8Bits, 6, sizeof(DTripleSpc_with_dsub_2_in_DPR_8Bits), ARM::DTripleSpc_with_dsub_2_in_DPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_2_in_DPR_8", DTriple_with_dsub_2_in_DPR_8, DTriple_with_dsub_2_in_DPR_8Bits, 6, sizeof(DTriple_with_dsub_2_in_DPR_8Bits), ARM::DTriple_with_dsub_2_in_DPR_8RegClassID, 24, 8, 1, 1 },
  { "DTripleSpc_with_dsub_4_in_DPR_8", DTripleSpc_with_dsub_4_in_DPR_8, DTripleSpc_with_dsub_4_in_DPR_8Bits, 4, sizeof(DTripleSpc_with_dsub_4_in_DPR_8Bits), ARM::DTripleSpc_with_dsub_4_in_DPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR", DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR, DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRBits, 4, sizeof(DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRBits), ARM::DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClassID, 24, 8, 1, 1 },
  { "DTriple_with_qsub_0_in_QPR_8", DTriple_with_qsub_0_in_QPR_8, DTriple_with_qsub_0_in_QPR_8Bits, 4, sizeof(DTriple_with_qsub_0_in_QPR_8Bits), ARM::DTriple_with_qsub_0_in_QPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_1_dsub_2_in_QPR_8", DTriple_with_dsub_1_dsub_2_in_QPR_8, DTriple_with_dsub_1_dsub_2_in_QPR_8Bits, 3, sizeof(DTriple_with_dsub_1_dsub_2_in_QPR_8Bits), ARM::DTriple_with_dsub_1_dsub_2_in_QPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR", DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR, DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRBits, 3, sizeof(DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRBits), ARM::DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRRegClassID, 24, 8, 1, 1 },
  { "DQuadSpc", DQuadSpc, DQuadSpcBits, 28, sizeof(DQuadSpcBits), ARM::DQuadSpcRegClassID, 32, 8, 1, 1 },
  { "DQuadSpc_with_ssub_0", DQuadSpc_with_ssub_0, DQuadSpc_with_ssub_0Bits, 16, sizeof(DQuadSpc_with_ssub_0Bits), ARM::DQuadSpc_with_ssub_0RegClassID, 32, 8, 1, 1 },
  { "DQuadSpc_with_dsub_2_then_ssub_0", DQuadSpc_with_dsub_2_then_ssub_0, DQuadSpc_with_dsub_2_then_ssub_0Bits, 14, sizeof(DQuadSpc_with_dsub_2_then_ssub_0Bits), ARM::DQuadSpc_with_dsub_2_then_ssub_0RegClassID, 32, 8, 1, 1 },
  { "DQuadSpc_with_dsub_4_then_ssub_0", DQuadSpc_with_dsub_4_then_ssub_0, DQuadSpc_with_dsub_4_then_ssub_0Bits, 12, sizeof(DQuadSpc_with_dsub_4_then_ssub_0Bits), ARM::DQuadSpc_with_dsub_4_then_ssub_0RegClassID, 32, 8, 1, 1 },
  { "DQuadSpc_with_dsub_0_in_DPR_8", DQuadSpc_with_dsub_0_in_DPR_8, DQuadSpc_with_dsub_0_in_DPR_8Bits, 8, sizeof(DQuadSpc_with_dsub_0_in_DPR_8Bits), ARM::DQuadSpc_with_dsub_0_in_DPR_8RegClassID, 32, 8, 1, 1 },
  { "DQuadSpc_with_dsub_2_in_DPR_8", DQuadSpc_with_dsub_2_in_DPR_8, DQuadSpc_with_dsub_2_in_DPR_8Bits, 6, sizeof(DQuadSpc_with_dsub_2_in_DPR_8Bits), ARM::DQuadSpc_with_dsub_2_in_DPR_8RegClassID, 32, 8, 1, 1 },
  { "DQuadSpc_with_dsub_4_in_DPR_8", DQuadSpc_with_dsub_4_in_DPR_8, DQuadSpc_with_dsub_4_in_DPR_8Bits, 4, sizeof(DQuadSpc_with_dsub_4_in_DPR_8Bits), ARM::DQuadSpc_with_dsub_4_in_DPR_8RegClassID, 32, 8, 1, 1 },
  { "DQuad", DQuad, DQuadBits, 29, sizeof(DQuadBits), ARM::DQuadRegClassID, 32, 32, 1, 1 },
  { "DQuad_with_ssub_0", DQuad_with_ssub_0, DQuad_with_ssub_0Bits, 16, sizeof(DQuad_with_ssub_0Bits), ARM::DQuad_with_ssub_0RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_ssub_2", DQuad_with_ssub_2, DQuad_with_ssub_2Bits, 15, sizeof(DQuad_with_ssub_2Bits), ARM::DQuad_with_ssub_2RegClassID, 32, 32, 1, 1 },
  { "QQPR", QQPR, QQPRBits, 15, sizeof(QQPRBits), ARM::QQPRRegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_1_dsub_2_in_QPR", DQuad_with_dsub_1_dsub_2_in_QPR, DQuad_with_dsub_1_dsub_2_in_QPRBits, 14, sizeof(DQuad_with_dsub_1_dsub_2_in_QPRBits), ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_2_then_ssub_0", DQuad_with_dsub_2_then_ssub_0, DQuad_with_dsub_2_then_ssub_0Bits, 14, sizeof(DQuad_with_dsub_2_then_ssub_0Bits), ARM::DQuad_with_dsub_2_then_ssub_0RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_3_then_ssub_0", DQuad_with_dsub_3_then_ssub_0, DQuad_with_dsub_3_then_ssub_0Bits, 13, sizeof(DQuad_with_dsub_3_then_ssub_0Bits), ARM::DQuad_with_dsub_3_then_ssub_0RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_0_in_DPR_8", DQuad_with_dsub_0_in_DPR_8, DQuad_with_dsub_0_in_DPR_8Bits, 8, sizeof(DQuad_with_dsub_0_in_DPR_8Bits), ARM::DQuad_with_dsub_0_in_DPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_qsub_0_in_QPR_VFP2", DQuad_with_qsub_0_in_QPR_VFP2, DQuad_with_qsub_0_in_QPR_VFP2Bits, 8, sizeof(DQuad_with_qsub_0_in_QPR_VFP2Bits), ARM::DQuad_with_qsub_0_in_QPR_VFP2RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR", DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR, DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRBits, 8, sizeof(DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRBits), ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_1_dsub_2_in_QPR_VFP2", DQuad_with_dsub_1_dsub_2_in_QPR_VFP2, DQuad_with_dsub_1_dsub_2_in_QPR_VFP2Bits, 7, sizeof(DQuad_with_dsub_1_dsub_2_in_QPR_VFP2Bits), ARM::DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_1_in_DPR_8", DQuad_with_dsub_1_in_DPR_8, DQuad_with_dsub_1_in_DPR_8Bits, 7, sizeof(DQuad_with_dsub_1_in_DPR_8Bits), ARM::DQuad_with_dsub_1_in_DPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_qsub_1_in_QPR_VFP2", DQuad_with_qsub_1_in_QPR_VFP2, DQuad_with_qsub_1_in_QPR_VFP2Bits, 7, sizeof(DQuad_with_qsub_1_in_QPR_VFP2Bits), ARM::DQuad_with_qsub_1_in_QPR_VFP2RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_2_in_DPR_8", DQuad_with_dsub_2_in_DPR_8, DQuad_with_dsub_2_in_DPR_8Bits, 6, sizeof(DQuad_with_dsub_2_in_DPR_8Bits), ARM::DQuad_with_dsub_2_in_DPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR", DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR, DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRBits, 6, sizeof(DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRBits), ARM::DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_3_in_DPR_8", DQuad_with_dsub_3_in_DPR_8, DQuad_with_dsub_3_in_DPR_8Bits, 5, sizeof(DQuad_with_dsub_3_in_DPR_8Bits), ARM::DQuad_with_dsub_3_in_DPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR", DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR, DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRBits, 4, sizeof(DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRBits), ARM::DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID, 32, 32, 1, 1 },
  { "DQuad_with_qsub_0_in_QPR_8", DQuad_with_qsub_0_in_QPR_8, DQuad_with_qsub_0_in_QPR_8Bits, 4, sizeof(DQuad_with_qsub_0_in_QPR_8Bits), ARM::DQuad_with_qsub_0_in_QPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_1_dsub_2_in_QPR_8", DQuad_with_dsub_1_dsub_2_in_QPR_8, DQuad_with_dsub_1_dsub_2_in_QPR_8Bits, 3, sizeof(DQuad_with_dsub_1_dsub_2_in_QPR_8Bits), ARM::DQuad_with_dsub_1_dsub_2_in_QPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_qsub_1_in_QPR_8", DQuad_with_qsub_1_in_QPR_8, DQuad_with_qsub_1_in_QPR_8Bits, 3, sizeof(DQuad_with_qsub_1_in_QPR_8Bits), ARM::DQuad_with_qsub_1_in_QPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR", DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR, DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRBits, 2, sizeof(DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRBits), ARM::DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID, 32, 32, 1, 1 },
  { "QQQQPR", QQQQPR, QQQQPRBits, 13, sizeof(QQQQPRBits), ARM::QQQQPRRegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_ssub_0", QQQQPR_with_ssub_0, QQQQPR_with_ssub_0Bits, 8, sizeof(QQQQPR_with_ssub_0Bits), ARM::QQQQPR_with_ssub_0RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_2_then_ssub_0", QQQQPR_with_dsub_2_then_ssub_0, QQQQPR_with_dsub_2_then_ssub_0Bits, 7, sizeof(QQQQPR_with_dsub_2_then_ssub_0Bits), ARM::QQQQPR_with_dsub_2_then_ssub_0RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_5_then_ssub_0", QQQQPR_with_dsub_5_then_ssub_0, QQQQPR_with_dsub_5_then_ssub_0Bits, 6, sizeof(QQQQPR_with_dsub_5_then_ssub_0Bits), ARM::QQQQPR_with_dsub_5_then_ssub_0RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_7_then_ssub_0", QQQQPR_with_dsub_7_then_ssub_0, QQQQPR_with_dsub_7_then_ssub_0Bits, 5, sizeof(QQQQPR_with_dsub_7_then_ssub_0Bits), ARM::QQQQPR_with_dsub_7_then_ssub_0RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_0_in_DPR_8", QQQQPR_with_dsub_0_in_DPR_8, QQQQPR_with_dsub_0_in_DPR_8Bits, 4, sizeof(QQQQPR_with_dsub_0_in_DPR_8Bits), ARM::QQQQPR_with_dsub_0_in_DPR_8RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_2_in_DPR_8", QQQQPR_with_dsub_2_in_DPR_8, QQQQPR_with_dsub_2_in_DPR_8Bits, 3, sizeof(QQQQPR_with_dsub_2_in_DPR_8Bits), ARM::QQQQPR_with_dsub_2_in_DPR_8RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_4_in_DPR_8", QQQQPR_with_dsub_4_in_DPR_8, QQQQPR_with_dsub_4_in_DPR_8Bits, 2, sizeof(QQQQPR_with_dsub_4_in_DPR_8Bits), ARM::QQQQPR_with_dsub_4_in_DPR_8RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_6_in_DPR_8", QQQQPR_with_dsub_6_in_DPR_8, QQQQPR_with_dsub_6_in_DPR_8Bits, 1, sizeof(QQQQPR_with_dsub_6_in_DPR_8Bits), ARM::QQQQPR_with_dsub_6_in_DPR_8RegClassID, 64, 32, 1, 1 },
};

// ARM Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair ARMDwarfFlavour0Dwarf2L[] = {
  { 0U, ARM::R0 },
  { 1U, ARM::R1 },
  { 2U, ARM::R2 },
  { 3U, ARM::R3 },
  { 4U, ARM::R4 },
  { 5U, ARM::R5 },
  { 6U, ARM::R6 },
  { 7U, ARM::R7 },
  { 8U, ARM::R8 },
  { 9U, ARM::R9 },
  { 10U, ARM::R10 },
  { 11U, ARM::R11 },
  { 12U, ARM::R12 },
  { 13U, ARM::SP },
  { 14U, ARM::LR },
  { 15U, ARM::PC },
  { 256U, ARM::D0 },
  { 257U, ARM::D1 },
  { 258U, ARM::D2 },
  { 259U, ARM::D3 },
  { 260U, ARM::D4 },
  { 261U, ARM::D5 },
  { 262U, ARM::D6 },
  { 263U, ARM::D7 },
  { 264U, ARM::D8 },
  { 265U, ARM::D9 },
  { 266U, ARM::D10 },
  { 267U, ARM::D11 },
  { 268U, ARM::D12 },
  { 269U, ARM::D13 },
  { 270U, ARM::D14 },
  { 271U, ARM::D15 },
  { 272U, ARM::D16 },
  { 273U, ARM::D17 },
  { 274U, ARM::D18 },
  { 275U, ARM::D19 },
  { 276U, ARM::D20 },
  { 277U, ARM::D21 },
  { 278U, ARM::D22 },
  { 279U, ARM::D23 },
  { 280U, ARM::D24 },
  { 281U, ARM::D25 },
  { 282U, ARM::D26 },
  { 283U, ARM::D27 },
  { 284U, ARM::D28 },
  { 285U, ARM::D29 },
  { 286U, ARM::D30 },
  { 287U, ARM::D31 },
};
extern const unsigned ARMDwarfFlavour0Dwarf2LSize = sizeof(ARMDwarfFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair ARMEHFlavour0Dwarf2L[] = {
  { 0U, ARM::R0 },
  { 1U, ARM::R1 },
  { 2U, ARM::R2 },
  { 3U, ARM::R3 },
  { 4U, ARM::R4 },
  { 5U, ARM::R5 },
  { 6U, ARM::R6 },
  { 7U, ARM::R7 },
  { 8U, ARM::R8 },
  { 9U, ARM::R9 },
  { 10U, ARM::R10 },
  { 11U, ARM::R11 },
  { 12U, ARM::R12 },
  { 13U, ARM::SP },
  { 14U, ARM::LR },
  { 15U, ARM::PC },
  { 256U, ARM::D0 },
  { 257U, ARM::D1 },
  { 258U, ARM::D2 },
  { 259U, ARM::D3 },
  { 260U, ARM::D4 },
  { 261U, ARM::D5 },
  { 262U, ARM::D6 },
  { 263U, ARM::D7 },
  { 264U, ARM::D8 },
  { 265U, ARM::D9 },
  { 266U, ARM::D10 },
  { 267U, ARM::D11 },
  { 268U, ARM::D12 },
  { 269U, ARM::D13 },
  { 270U, ARM::D14 },
  { 271U, ARM::D15 },
  { 272U, ARM::D16 },
  { 273U, ARM::D17 },
  { 274U, ARM::D18 },
  { 275U, ARM::D19 },
  { 276U, ARM::D20 },
  { 277U, ARM::D21 },
  { 278U, ARM::D22 },
  { 279U, ARM::D23 },
  { 280U, ARM::D24 },
  { 281U, ARM::D25 },
  { 282U, ARM::D26 },
  { 283U, ARM::D27 },
  { 284U, ARM::D28 },
  { 285U, ARM::D29 },
  { 286U, ARM::D30 },
  { 287U, ARM::D31 },
};
extern const unsigned ARMEHFlavour0Dwarf2LSize = sizeof(ARMEHFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair ARMDwarfFlavour0L2Dwarf[] = {
  { ARM::D0, 256U },
  { ARM::D1, 257U },
  { ARM::D2, 258U },
  { ARM::D3, 259U },
  { ARM::D4, 260U },
  { ARM::D5, 261U },
  { ARM::D6, 262U },
  { ARM::D7, 263U },
  { ARM::D8, 264U },
  { ARM::D9, 265U },
  { ARM::D10, 266U },
  { ARM::D11, 267U },
  { ARM::D12, 268U },
  { ARM::D13, 269U },
  { ARM::D14, 270U },
  { ARM::D15, 271U },
  { ARM::D16, 272U },
  { ARM::D17, 273U },
  { ARM::D18, 274U },
  { ARM::D19, 275U },
  { ARM::D20, 276U },
  { ARM::D21, 277U },
  { ARM::D22, 278U },
  { ARM::D23, 279U },
  { ARM::D24, 280U },
  { ARM::D25, 281U },
  { ARM::D26, 282U },
  { ARM::D27, 283U },
  { ARM::D28, 284U },
  { ARM::D29, 285U },
  { ARM::D30, 286U },
  { ARM::D31, 287U },
  { ARM::LR, 14U },
  { ARM::PC, 15U },
  { ARM::R0, 0U },
  { ARM::R1, 1U },
  { ARM::R2, 2U },
  { ARM::R3, 3U },
  { ARM::R4, 4U },
  { ARM::R5, 5U },
  { ARM::R6, 6U },
  { ARM::R7, 7U },
  { ARM::R8, 8U },
  { ARM::R9, 9U },
  { ARM::R10, 10U },
  { ARM::R11, 11U },
  { ARM::R12, 12U },
  { ARM::SP, 13U },
};
extern const unsigned ARMDwarfFlavour0L2DwarfSize = sizeof(ARMDwarfFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair ARMEHFlavour0L2Dwarf[] = {
  { ARM::D0, 256U },
  { ARM::D1, 257U },
  { ARM::D2, 258U },
  { ARM::D3, 259U },
  { ARM::D4, 260U },
  { ARM::D5, 261U },
  { ARM::D6, 262U },
  { ARM::D7, 263U },
  { ARM::D8, 264U },
  { ARM::D9, 265U },
  { ARM::D10, 266U },
  { ARM::D11, 267U },
  { ARM::D12, 268U },
  { ARM::D13, 269U },
  { ARM::D14, 270U },
  { ARM::D15, 271U },
  { ARM::D16, 272U },
  { ARM::D17, 273U },
  { ARM::D18, 274U },
  { ARM::D19, 275U },
  { ARM::D20, 276U },
  { ARM::D21, 277U },
  { ARM::D22, 278U },
  { ARM::D23, 279U },
  { ARM::D24, 280U },
  { ARM::D25, 281U },
  { ARM::D26, 282U },
  { ARM::D27, 283U },
  { ARM::D28, 284U },
  { ARM::D29, 285U },
  { ARM::D30, 286U },
  { ARM::D31, 287U },
  { ARM::LR, 14U },
  { ARM::PC, 15U },
  { ARM::R0, 0U },
  { ARM::R1, 1U },
  { ARM::R2, 2U },
  { ARM::R3, 3U },
  { ARM::R4, 4U },
  { ARM::R5, 5U },
  { ARM::R6, 6U },
  { ARM::R7, 7U },
  { ARM::R8, 8U },
  { ARM::R9, 9U },
  { ARM::R10, 10U },
  { ARM::R11, 11U },
  { ARM::R12, 12U },
  { ARM::SP, 13U },
};
extern const unsigned ARMEHFlavour0L2DwarfSize = sizeof(ARMEHFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const uint16_t ARMRegEncodingTable[] = {
  0,
  1,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  8,
  3,
  3,
  0,
  4,
  14,
  7,
  6,
  15,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  13,
  2,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  1,
  3,
  5,
  7,
  9,
  11,
  13,
  15,
  17,
  19,
  21,
  23,
  25,
  27,
  29,
  1,
  3,
  5,
  7,
  9,
  11,
  13,
  15,
  17,
  19,
  21,
  23,
  25,
  27,
};
static inline void InitARMMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(ARMRegDesc, 285, RA, PC, ARMMCRegisterClasses, 101, ARMRegUnitRoots, 73, ARMRegDiffLists, ARMRegStrings, ARMSubRegIdxLists, 57,
  ARMRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(ARMDwarfFlavour0Dwarf2L, ARMDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(ARMEHFlavour0Dwarf2L, ARMEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(ARMDwarfFlavour0L2Dwarf, ARMDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(ARMEHFlavour0L2Dwarf, ARMEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Register Information Header Fragment                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

struct ARMGenRegisterInfo : public TargetRegisterInfo {
  explicit ARMGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  virtual unsigned composeSubRegIndicesImpl(unsigned, unsigned) const;
  virtual const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const;
  virtual const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const;
  virtual unsigned getRegUnitWeight(unsigned RegUnit) const;
  virtual unsigned getNumRegPressureSets() const;
  virtual const char *getRegPressureSetName(unsigned Idx) const;
  virtual unsigned getRegPressureSetLimit(unsigned Idx) const;
  virtual const int *getRegClassPressureSets(const TargetRegisterClass *RC) const;
  virtual const int *getRegUnitPressureSets(unsigned RegUnit) const;
};

namespace ARM { // Register classes
  extern const TargetRegisterClass SPRRegClass;
  extern const TargetRegisterClass GPRRegClass;
  extern const TargetRegisterClass SPR_8RegClass;
  extern const TargetRegisterClass GPRnopcRegClass;
  extern const TargetRegisterClass rGPRRegClass;
  extern const TargetRegisterClass hGPRRegClass;
  extern const TargetRegisterClass tGPRRegClass;
  extern const TargetRegisterClass GPRnopc_and_hGPRRegClass;
  extern const TargetRegisterClass hGPR_and_rGPRRegClass;
  extern const TargetRegisterClass tcGPRRegClass;
  extern const TargetRegisterClass tGPR_and_tcGPRRegClass;
  extern const TargetRegisterClass hGPR_and_tcGPRRegClass;
  extern const TargetRegisterClass CCRRegClass;
  extern const TargetRegisterClass GPRspRegClass;
  extern const TargetRegisterClass DPRRegClass;
  extern const TargetRegisterClass DPR_VFP2RegClass;
  extern const TargetRegisterClass DPR_8RegClass;
  extern const TargetRegisterClass GPRPairRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_1_in_rGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_0_in_tGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_0_in_hGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_0_in_tcGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_1_in_tcGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_0_in_tGPR_and_tcGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_1_in_GPRspRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_1_in_hGPR_and_tcGPRRegClass;
  extern const TargetRegisterClass DPairSpcRegClass;
  extern const TargetRegisterClass DPairSpc_with_ssub_0RegClass;
  extern const TargetRegisterClass DPairSpc_with_dsub_2_then_ssub_0RegClass;
  extern const TargetRegisterClass DPairSpc_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass DPairSpc_with_dsub_2_in_DPR_8RegClass;
  extern const TargetRegisterClass DPairRegClass;
  extern const TargetRegisterClass DPair_with_ssub_0RegClass;
  extern const TargetRegisterClass QPRRegClass;
  extern const TargetRegisterClass DPair_with_ssub_2RegClass;
  extern const TargetRegisterClass DPair_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass QPR_VFP2RegClass;
  extern const TargetRegisterClass DPair_with_dsub_1_in_DPR_8RegClass;
  extern const TargetRegisterClass QPR_8RegClass;
  extern const TargetRegisterClass DTripleRegClass;
  extern const TargetRegisterClass DTripleSpcRegClass;
  extern const TargetRegisterClass DTripleSpc_with_ssub_0RegClass;
  extern const TargetRegisterClass DTriple_with_ssub_0RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DTriple_with_qsub_0_in_QPRRegClass;
  extern const TargetRegisterClass DTriple_with_ssub_2RegClass;
  extern const TargetRegisterClass DTripleSpc_with_dsub_2_then_ssub_0RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_2_then_ssub_0RegClass;
  extern const TargetRegisterClass DTripleSpc_with_dsub_4_then_ssub_0RegClass;
  extern const TargetRegisterClass DTripleSpc_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_qsub_0_in_QPR_VFP2RegClass;
  extern const TargetRegisterClass DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_1_in_DPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClass;
  extern const TargetRegisterClass DTripleSpc_with_dsub_2_in_DPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_2_in_DPR_8RegClass;
  extern const TargetRegisterClass DTripleSpc_with_dsub_4_in_DPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DTriple_with_qsub_0_in_QPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_1_dsub_2_in_QPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRRegClass;
  extern const TargetRegisterClass DQuadSpcRegClass;
  extern const TargetRegisterClass DQuadSpc_with_ssub_0RegClass;
  extern const TargetRegisterClass DQuadSpc_with_dsub_2_then_ssub_0RegClass;
  extern const TargetRegisterClass DQuadSpc_with_dsub_4_then_ssub_0RegClass;
  extern const TargetRegisterClass DQuadSpc_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuadSpc_with_dsub_2_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuadSpc_with_dsub_4_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuadRegClass;
  extern const TargetRegisterClass DQuad_with_ssub_0RegClass;
  extern const TargetRegisterClass DQuad_with_ssub_2RegClass;
  extern const TargetRegisterClass QQPRRegClass;
  extern const TargetRegisterClass DQuad_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DQuad_with_dsub_2_then_ssub_0RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_3_then_ssub_0RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_qsub_0_in_QPR_VFP2RegClass;
  extern const TargetRegisterClass DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_1_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_qsub_1_in_QPR_VFP2RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_2_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DQuad_with_dsub_3_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DQuad_with_qsub_0_in_QPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_1_dsub_2_in_QPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_qsub_1_in_QPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass QQQQPRRegClass;
  extern const TargetRegisterClass QQQQPR_with_ssub_0RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_2_then_ssub_0RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_5_then_ssub_0RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_7_then_ssub_0RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_2_in_DPR_8RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_4_in_DPR_8RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_6_in_DPR_8RegClass;
} // end of namespace ARM

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register and Register Classes Information                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass ARMMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i32, MVT::Other,
  /* 2 */ MVT::f32, MVT::Other,
  /* 4 */ MVT::v2i64, MVT::Other,
  /* 6 */ MVT::v4i64, MVT::Other,
  /* 8 */ MVT::v8i64, MVT::Other,
  /* 10 */ MVT::f64, MVT::v8i8, MVT::v4i16, MVT::v2i32, MVT::v1i64, MVT::v2f32, MVT::Other,
  /* 17 */ MVT::v16i8, MVT::v8i16, MVT::v4i32, MVT::v2i64, MVT::v4f32, MVT::v2f64, MVT::Other,
  /* 24 */ MVT::Untyped, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "dsub_0", "dsub_1", "dsub_2", "dsub_3", "dsub_4", "dsub_5", "dsub_6", "dsub_7", "gsub_0", "gsub_1", "qqsub_0", "qqsub_1", "qsub_0", "qsub_1", "qsub_2", "qsub_3", "ssub_0", "ssub_1", "ssub_2", "ssub_3", "dsub_2_then_ssub_0", "dsub_2_then_ssub_1", "dsub_3_then_ssub_0", "dsub_3_then_ssub_1", "dsub_7_then_ssub_0", "dsub_7_then_ssub_1", "dsub_6_then_ssub_0", "dsub_6_then_ssub_1", "dsub_5_then_ssub_0", "dsub_5_then_ssub_1", "dsub_4_then_ssub_0", "dsub_4_then_ssub_1", "dsub_0_dsub_2", "dsub_0_dsub_1_dsub_2", "dsub_1_dsub_3", "dsub_1_dsub_2_dsub_3", "dsub_1_dsub_2", "dsub_0_dsub_2_dsub_4", "dsub_0_dsub_2_dsub_4_dsub_6", "dsub_1_dsub_3_dsub_5", "dsub_1_dsub_3_dsub_5_dsub_7", "dsub_1_dsub_2_dsub_3_dsub_4", "dsub_2_dsub_4", "dsub_2_dsub_3_dsub_4", "dsub_2_dsub_4_dsub_6", "dsub_3_dsub_5", "dsub_3_dsub_4_dsub_5", "dsub_3_dsub_5_dsub_7", "dsub_3_dsub_4", "dsub_3_dsub_4_dsub_5_dsub_6", "dsub_4_dsub_6", "dsub_4_dsub_5_dsub_6", "dsub_5_dsub_7", "dsub_5_dsub_6_dsub_7", "dsub_5_dsub_6", "qsub_1_qsub_2" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
  0x0000000c, // dsub_0
  0x00000030, // dsub_1
  0x000000c0, // dsub_2
  0x00000300, // dsub_3
  0x00030000, // dsub_4
  0x0000c000, // dsub_5
  0x00003000, // dsub_6
  0x00000c00, // dsub_7
  0x00000001, // gsub_0
  0x00000002, // gsub_1
  0x000003fc, // qqsub_0
  0x0003fc00, // qqsub_1
  0x0000003c, // qsub_0
  0x000003c0, // qsub_1
  0x0003c000, // qsub_2
  0x00003c00, // qsub_3
  0x00000004, // ssub_0
  0x00000008, // ssub_1
  0x00000010, // ssub_2
  0x00000020, // ssub_3
  0x00000040, // dsub_2_then_ssub_0
  0x00000080, // dsub_2_then_ssub_1
  0x00000100, // dsub_3_then_ssub_0
  0x00000200, // dsub_3_then_ssub_1
  0x00000400, // dsub_7_then_ssub_0
  0x00000800, // dsub_7_then_ssub_1
  0x00001000, // dsub_6_then_ssub_0
  0x00002000, // dsub_6_then_ssub_1
  0x00004000, // dsub_5_then_ssub_0
  0x00008000, // dsub_5_then_ssub_1
  0x00010000, // dsub_4_then_ssub_0
  0x00020000, // dsub_4_then_ssub_1
  0x000000cc, // dsub_0_dsub_2
  0x000000fc, // dsub_0_dsub_1_dsub_2
  0x00000330, // dsub_1_dsub_3
  0x000003f0, // dsub_1_dsub_2_dsub_3
  0x000000f0, // dsub_1_dsub_2
  0x000300cc, // dsub_0_dsub_2_dsub_4
  0x000330cc, // dsub_0_dsub_2_dsub_4_dsub_6
  0x0000c330, // dsub_1_dsub_3_dsub_5
  0x0000cf30, // dsub_1_dsub_3_dsub_5_dsub_7
  0x000303f0, // dsub_1_dsub_2_dsub_3_dsub_4
  0x000300c0, // dsub_2_dsub_4
  0x000303c0, // dsub_2_dsub_3_dsub_4
  0x000330c0, // dsub_2_dsub_4_dsub_6
  0x0000c300, // dsub_3_dsub_5
  0x0003c300, // dsub_3_dsub_4_dsub_5
  0x0000cf00, // dsub_3_dsub_5_dsub_7
  0x00030300, // dsub_3_dsub_4
  0x0003f300, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00033000, // dsub_4_dsub_6
  0x0003f000, // dsub_4_dsub_5_dsub_6
  0x0000cc00, // dsub_5_dsub_7
  0x0000fc00, // dsub_5_dsub_6_dsub_7
  0x0000f000, // dsub_5_dsub_6
  0x0003c3c0, // qsub_1_qsub_2
 };



static const TargetRegisterClass *const NullRegClasses[] = { NULL };

static const uint32_t SPRSubClassMask[] = {
  0x00000005, 0x00000000, 0x00000000, 0x00000000, 
  0xf0018000, 0xffffccfa, 0xeffff37e, 0x0000001f, // ssub_0
  0xf0018000, 0xffffccfa, 0xeffff37e, 0x0000001f, // ssub_1
  0x00000000, 0xf5d940f8, 0xeffef200, 0x0000001f, // ssub_2
  0x00000000, 0xf5d940f8, 0xeffef200, 0x0000001f, // ssub_3
  0xe0000000, 0xffcf8000, 0xcffe707c, 0x0000001f, // dsub_2_then_ssub_0
  0xe0000000, 0xffcf8000, 0xcffe707c, 0x0000001f, // dsub_2_then_ssub_1
  0x00000000, 0x00000000, 0xcffc6000, 0x0000001f, // dsub_3_then_ssub_0
  0x00000000, 0x00000000, 0xcffc6000, 0x0000001f, // dsub_3_then_ssub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_7_then_ssub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_7_then_ssub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_6_then_ssub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_6_then_ssub_1
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_5_then_ssub_0
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_5_then_ssub_1
  0x00000000, 0x0a060000, 0x80000078, 0x0000001f, // dsub_4_then_ssub_0
  0x00000000, 0x0a060000, 0x80000078, 0x0000001f, // dsub_4_then_ssub_1
};

static const uint32_t GPRSubClassMask[] = {
  0x00002ffa, 0x00000000, 0x00000000, 0x00000000, 
  0x07fe0000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x07fe0000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t SPR_8SubClassMask[] = {
  0x00000004, 0x00000000, 0x00000000, 0x00000000, 
  0xc0010000, 0xfe8c00d0, 0x0fd44070, 0x0000001e, // ssub_0
  0xc0010000, 0xfe8c00d0, 0x0fd44070, 0x0000001e, // ssub_1
  0x00000000, 0xe48000c0, 0x0f540000, 0x0000001e, // ssub_2
  0x00000000, 0xe48000c0, 0x0f540000, 0x0000001e, // ssub_3
  0x80000000, 0xce000000, 0x0e500060, 0x0000001c, // dsub_2_then_ssub_0
  0x80000000, 0xce000000, 0x0e500060, 0x0000001c, // dsub_2_then_ssub_1
  0x00000000, 0x00000000, 0x0c400000, 0x0000001c, // dsub_3_then_ssub_0
  0x00000000, 0x00000000, 0x0c400000, 0x0000001c, // dsub_3_then_ssub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_7_then_ssub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_7_then_ssub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_6_then_ssub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_6_then_ssub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_5_then_ssub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_5_then_ssub_1
  0x00000000, 0x08000000, 0x00000040, 0x00000018, // dsub_4_then_ssub_0
  0x00000000, 0x08000000, 0x00000040, 0x00000018, // dsub_4_then_ssub_1
};

static const uint32_t GPRnopcSubClassMask[] = {
  0x00002fd8, 0x00000000, 0x00000000, 0x00000000, 
  0x07fe0000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x07fe0000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t rGPRSubClassMask[] = {
  0x00000f50, 0x00000000, 0x00000000, 0x00000000, 
  0x07fe0000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x05cc0000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t hGPRSubClassMask[] = {
  0x000029a0, 0x00000000, 0x00000000, 0x00000000, 
  0x07100000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x07100000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t tGPRSubClassMask[] = {
  0x00000440, 0x00000000, 0x00000000, 0x00000000, 
  0x00880000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x00880000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t GPRnopc_and_hGPRSubClassMask[] = {
  0x00002980, 0x00000000, 0x00000000, 0x00000000, 
  0x07100000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x07100000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t hGPR_and_rGPRSubClassMask[] = {
  0x00000900, 0x00000000, 0x00000000, 0x00000000, 
  0x07100000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x05000000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t tcGPRSubClassMask[] = {
  0x00000e00, 0x00000000, 0x00000000, 0x00000000, 
  0x02a00000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x04c00000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t tGPR_and_tcGPRSubClassMask[] = {
  0x00000400, 0x00000000, 0x00000000, 0x00000000, 
  0x00800000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x00800000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t hGPR_and_tcGPRSubClassMask[] = {
  0x00000800, 0x00000000, 0x00000000, 0x00000000, 
  0x02000000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x04000000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t CCRSubClassMask[] = {
  0x00001000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRspSubClassMask[] = {
  0x00002000, 0x00000000, 0x00000000, 0x00000000, 
  0x02000000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t DPRSubClassMask[] = {
  0x0001c000, 0x00000000, 0x00000000, 0x00000000, 
  0xf8000000, 0xffffffff, 0xffffffff, 0x0000001f, // dsub_0
  0x00000000, 0xf5f979ff, 0xffffff80, 0x0000001f, // dsub_1
  0xf8000000, 0xffffff00, 0xffffffff, 0x0000001f, // dsub_2
  0x00000000, 0x00000000, 0xffffff80, 0x0000001f, // dsub_3
  0x00000000, 0x0a068600, 0xf000007f, 0x0000001f, // dsub_4
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_5
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_6
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_7
};

static const uint32_t DPR_VFP2SubClassMask[] = {
  0x00018000, 0x00000000, 0x00000000, 0x00000000, 
  0xf0000000, 0xffffccfa, 0xeffff37e, 0x0000001f, // dsub_0
  0x00000000, 0xf5d940f8, 0xeffef200, 0x0000001f, // dsub_1
  0xe0000000, 0xffcf8000, 0xcffe707c, 0x0000001f, // dsub_2
  0x00000000, 0x00000000, 0xcffc6000, 0x0000001f, // dsub_3
  0x00000000, 0x0a060000, 0x80000078, 0x0000001f, // dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_7
};

static const uint32_t DPR_8SubClassMask[] = {
  0x00010000, 0x00000000, 0x00000000, 0x00000000, 
  0xc0000000, 0xfe8c00d0, 0x0fd44070, 0x0000001e, // dsub_0
  0x00000000, 0xe48000c0, 0x0f540000, 0x0000001e, // dsub_1
  0x80000000, 0xce000000, 0x0e500060, 0x0000001c, // dsub_2
  0x00000000, 0x00000000, 0x0c400000, 0x0000001c, // dsub_3
  0x00000000, 0x08000000, 0x00000040, 0x00000018, // dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_7
};

static const uint32_t GPRPairSubClassMask[] = {
  0x07fe0000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_1_in_rGPRSubClassMask[] = {
  0x05cc0000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_0_in_tGPRSubClassMask[] = {
  0x00880000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_0_in_hGPRSubClassMask[] = {
  0x07100000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_0_in_tcGPRSubClassMask[] = {
  0x02a00000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_1_in_tcGPRSubClassMask[] = {
  0x04c00000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_0_in_tGPR_and_tcGPRSubClassMask[] = {
  0x00800000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_1_in_hGPR_and_rGPRSubClassMask[] = {
  0x05000000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_1_in_GPRspSubClassMask[] = {
  0x02000000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_1_in_hGPR_and_tcGPRSubClassMask[] = {
  0x04000000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t DPairSpcSubClassMask[] = {
  0xf8000000, 0x00000000, 0x00000000, 0x00000000, 
  0x00000000, 0xffffff00, 0xffffffff, 0x0000001f, // dsub_0_dsub_2
  0x00000000, 0x00000000, 0xffffff80, 0x0000001f, // dsub_1_dsub_3
  0x00000000, 0x0a068600, 0xf000007f, 0x0000001f, // dsub_2_dsub_4
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_3_dsub_5
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_4_dsub_6
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_5_dsub_7
};

static const uint32_t DPairSpc_with_ssub_0SubClassMask[] = {
  0xf0000000, 0x00000000, 0x00000000, 0x00000000, 
  0x00000000, 0xffffcc00, 0xeffff37e, 0x0000001f, // dsub_0_dsub_2
  0x00000000, 0x00000000, 0xeffef200, 0x0000001f, // dsub_1_dsub_3
  0x00000000, 0x0a068000, 0xc000007c, 0x0000001f, // dsub_2_dsub_4
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_3_dsub_5
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_4_dsub_6
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_5_dsub_7
};

static const uint32_t DPairSpc_with_dsub_2_then_ssub_0SubClassMask[] = {
  0xe0000000, 0x00000000, 0x00000000, 0x00000000, 
  0x00000000, 0xffcf8000, 0xcffe707c, 0x0000001f, // dsub_0_dsub_2
  0x00000000, 0x00000000, 0xcffc6000, 0x0000001f, // dsub_1_dsub_3
  0x00000000, 0x0a060000, 0x80000078, 0x0000001f, // dsub_2_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_5_dsub_7
};

static const uint32_t DPairSpc_with_dsub_0_in_DPR_8SubClassMask[] = {
  0xc0000000, 0x00000000, 0x00000000, 0x00000000, 
  0x00000000, 0xfe8c0000, 0x0fd44070, 0x0000001e, // dsub_0_dsub_2
  0x00000000, 0x00000000, 0x0f540000, 0x0000001e, // dsub_1_dsub_3
  0x00000000, 0x0a000000, 0x00000060, 0x0000001c, // dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_5_dsub_7
};

static const uint32_t DPairSpc_with_dsub_2_in_DPR_8SubClassMask[] = {
  0x80000000, 0x00000000, 0x00000000, 0x00000000, 
  0x00000000, 0xce000000, 0x0e500060, 0x0000001c, // dsub_0_dsub_2
  0x00000000, 0x00000000, 0x0c400000, 0x0000001c, // dsub_1_dsub_3
  0x00000000, 0x08000000, 0x00000040, 0x00000018, // dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_5_dsub_7
};

static const uint32_t DPairSubClassMask[] = {
  0x00000000, 0x000000ff, 0x00000000, 0x00000000, 
  0x00000000, 0xf5f97900, 0xffffff80, 0x0000001f, // qsub_0
  0x00000000, 0x00000000, 0xffffff80, 0x0000001f, // qsub_1
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // qsub_2
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // qsub_3
  0x00000000, 0xf5f97900, 0xffffff80, 0x0000001f, // dsub_1_dsub_2
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_3_dsub_4
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_5_dsub_6
};

static const uint32_t DPair_with_ssub_0SubClassMask[] = {
  0x00000000, 0x000000fa, 0x00000000, 0x00000000, 
  0x00000000, 0xf5f94800, 0xeffff300, 0x0000001f, // qsub_0
  0x00000000, 0x00000000, 0xcffe7000, 0x0000001f, // qsub_1
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // qsub_2
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // qsub_3
  0x00000000, 0xf5d94000, 0xeffef200, 0x0000001f, // dsub_1_dsub_2
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_3_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_5_dsub_6
};

static const uint32_t QPRSubClassMask[] = {
  0x00000000, 0x000000a4, 0x00000000, 0x00000000, 
  0x00000000, 0xa1102000, 0xf5088400, 0x0000001f, // qsub_0
  0x00000000, 0x00000000, 0xf5088400, 0x0000001f, // qsub_1
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // qsub_2
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // qsub_3
  0x00000000, 0x50601000, 0x0aa30800, 0x00000000, // dsub_1_dsub_2
};

static const uint32_t DPair_with_ssub_2SubClassMask[] = {
  0x00000000, 0x000000f8, 0x00000000, 0x00000000, 
  0x00000000, 0xf5d94000, 0xeffef200, 0x0000001f, // qsub_0
  0x00000000, 0x00000000, 0xcffc6000, 0x0000001f, // qsub_1
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // qsub_2
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // qsub_3
  0x00000000, 0xf5c90000, 0xcffe7000, 0x0000001f, // dsub_1_dsub_2
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_5_dsub_6
};

static const uint32_t DPair_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x00000000, 0x000000d0, 0x00000000, 0x00000000, 
  0x00000000, 0xf4880000, 0x0fd44000, 0x0000001e, // qsub_0
  0x00000000, 0x00000000, 0x0e500000, 0x0000001c, // qsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // qsub_2
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // qsub_3
  0x00000000, 0xe4800000, 0x0f540000, 0x0000001e, // dsub_1_dsub_2
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_5_dsub_6
};

static const uint32_t QPR_VFP2SubClassMask[] = {
  0x00000000, 0x000000a0, 0x00000000, 0x00000000, 
  0x00000000, 0xa1100000, 0xe5088000, 0x0000001f, // qsub_0
  0x00000000, 0x00000000, 0xc5080000, 0x0000001f, // qsub_1
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // qsub_2
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // qsub_3
  0x00000000, 0x50400000, 0x0aa20000, 0x00000000, // dsub_1_dsub_2
};

static const uint32_t DPair_with_dsub_1_in_DPR_8SubClassMask[] = {
  0x00000000, 0x000000c0, 0x00000000, 0x00000000, 
  0x00000000, 0xe4800000, 0x0f540000, 0x0000001e, // qsub_0
  0x00000000, 0x00000000, 0x0c400000, 0x0000001c, // qsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // qsub_2
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // qsub_3
  0x00000000, 0xc4000000, 0x0e500000, 0x0000001c, // dsub_1_dsub_2
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_5_dsub_6
};

static const uint32_t QPR_8SubClassMask[] = {
  0x00000000, 0x00000080, 0x00000000, 0x00000000, 
  0x00000000, 0xa0000000, 0x05000000, 0x0000001e, // qsub_0
  0x00000000, 0x00000000, 0x04000000, 0x0000001c, // qsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // qsub_2
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // qsub_3
  0x00000000, 0x40000000, 0x0a000000, 0x00000000, // dsub_1_dsub_2
};

static const uint32_t DTripleSubClassMask[] = {
  0x00000000, 0xf5f97900, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0xffffff80, 0x0000001f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0xffffff80, 0x0000001f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTripleSpcSubClassMask[] = {
  0x00000000, 0x0a068600, 0x0000007f, 0x00000000, 
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTripleSpc_with_ssub_0SubClassMask[] = {
  0x00000000, 0x0a068400, 0x0000007e, 0x00000000, 
  0x00000000, 0x00000000, 0xe0000000, 0x0000001f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0xe0000000, 0x0000001f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTriple_with_ssub_0SubClassMask[] = {
  0x00000000, 0xf5f94800, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0xeffff300, 0x0000001f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0xeffef200, 0x0000001f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x50601000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x0aa30800, 0x00000000, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0xf5088400, 0x0000001f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_qsub_0_in_QPRSubClassMask[] = {
  0x00000000, 0xa1102000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0xf5088400, 0x0000001f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x0aa30800, 0x00000000, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_4_dsub_5_dsub_6
};

static const uint32_t DTriple_with_ssub_2SubClassMask[] = {
  0x00000000, 0xf5d94000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0xeffef200, 0x0000001f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0xcffe7000, 0x0000001f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTripleSpc_with_dsub_2_then_ssub_0SubClassMask[] = {
  0x00000000, 0x0a068000, 0x0000007c, 0x00000000, 
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTriple_with_dsub_2_then_ssub_0SubClassMask[] = {
  0x00000000, 0xf5c90000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0xcffe7000, 0x0000001f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0xcffc6000, 0x0000001f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTripleSpc_with_dsub_4_then_ssub_0SubClassMask[] = {
  0x00000000, 0x0a060000, 0x00000078, 0x00000000, 
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTripleSpc_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x00000000, 0x0a040000, 0x00000070, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000001e, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000001e, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTriple_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x00000000, 0xf4880000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x0fd44000, 0x0000001e, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x0f540000, 0x0000001e, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_qsub_0_in_QPR_VFP2SubClassMask[] = {
  0x00000000, 0xa1100000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0xe5088000, 0x0000001f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x0aa20000, 0x00000000, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_4_dsub_5_dsub_6
};

static const uint32_t DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x50600000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x0aa30000, 0x00000000, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0xe5088000, 0x0000001f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_dsub_1_dsub_2_in_QPR_VFP2SubClassMask[] = {
  0x00000000, 0x50400000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x0aa20000, 0x00000000, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0xc5080000, 0x0000001f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_dsub_1_in_DPR_8SubClassMask[] = {
  0x00000000, 0xe4800000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x0f540000, 0x0000001e, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x0e500000, 0x0000001c, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRSubClassMask[] = {
  0x00000000, 0xa1000000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0xc5080000, 0x0000001f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x0aa00000, 0x00000000, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_4_dsub_5_dsub_6
};

static const uint32_t DTripleSpc_with_dsub_2_in_DPR_8SubClassMask[] = {
  0x00000000, 0x0a000000, 0x00000060, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTriple_with_dsub_2_in_DPR_8SubClassMask[] = {
  0x00000000, 0xc4000000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x0e500000, 0x0000001c, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x0c400000, 0x0000001c, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTripleSpc_with_dsub_4_in_DPR_8SubClassMask[] = {
  0x00000000, 0x08000000, 0x00000040, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x50000000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x0a800000, 0x00000000, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x05000000, 0x0000001e, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_qsub_0_in_QPR_8SubClassMask[] = {
  0x00000000, 0xa0000000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x05000000, 0x0000001e, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x0a000000, 0x00000000, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_4_dsub_5_dsub_6
};

static const uint32_t DTriple_with_dsub_1_dsub_2_in_QPR_8SubClassMask[] = {
  0x00000000, 0x40000000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x0a000000, 0x00000000, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x04000000, 0x0000001c, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRSubClassMask[] = {
  0x00000000, 0x80000000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x04000000, 0x0000001c, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x08000000, 0x00000000, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuadSpcSubClassMask[] = {
  0x00000000, 0x00000000, 0x0000007f, 0x00000000, 
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSpc_with_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x0000007e, 0x00000000, 
  0x00000000, 0x00000000, 0xe0000000, 0x0000001f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0xe0000000, 0x0000001f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSpc_with_dsub_2_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x0000007c, 0x00000000, 
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSpc_with_dsub_4_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000078, 0x00000000, 
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSpc_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000070, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000001e, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000001e, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSpc_with_dsub_2_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000060, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSpc_with_dsub_4_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000040, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSubClassMask[] = {
  0x00000000, 0x00000000, 0x0fffff80, 0x00000000, 
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // qqsub_0
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // qqsub_1
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x0ffff300, 0x00000000, 
  0x00000000, 0x00000000, 0xe0000000, 0x0000001f, // qqsub_0
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // qqsub_1
  0x00000000, 0x00000000, 0xe0000000, 0x0000001f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_ssub_2SubClassMask[] = {
  0x00000000, 0x00000000, 0x0ffef200, 0x00000000, 
  0x00000000, 0x00000000, 0xe0000000, 0x0000001f, // qqsub_0
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // qqsub_1
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // qsub_1_qsub_2
};

static const uint32_t QQPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x05088400, 0x00000000, 
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // qqsub_0
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // qqsub_1
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x0aa30800, 0x00000000, 
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuad_with_dsub_2_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x0ffe7000, 0x00000000, 
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // qqsub_1
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_3_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x0ffc6000, 0x00000000, 
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // qqsub_1
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x0fd44000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000001e, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000001e, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_qsub_0_in_QPR_VFP2SubClassMask[] = {
  0x00000000, 0x00000000, 0x05088000, 0x00000000, 
  0x00000000, 0x00000000, 0xe0000000, 0x0000001f, // qqsub_0
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // qqsub_1
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x0aa30000, 0x00000000, 
  0x00000000, 0x00000000, 0xe0000000, 0x0000001f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuad_with_dsub_1_dsub_2_in_QPR_VFP2SubClassMask[] = {
  0x00000000, 0x00000000, 0x0aa20000, 0x00000000, 
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuad_with_dsub_1_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x0f540000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000001e, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_qsub_1_in_QPR_VFP2SubClassMask[] = {
  0x00000000, 0x00000000, 0x05080000, 0x00000000, 
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // qqsub_1
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_2_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x0e500000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x0aa00000, 0x00000000, 
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuad_with_dsub_3_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x0c400000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x0a800000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000001e, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuad_with_qsub_0_in_QPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x05000000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000001e, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_1_dsub_2_in_QPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x0a000000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuad_with_qsub_1_in_QPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x04000000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x08000000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x00000018, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000010, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t QQQQPRSubClassMask[] = {
  0x00000000, 0x00000000, 0xf0000000, 0x0000001f, 
};

static const uint32_t QQQQPR_with_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0xe0000000, 0x0000001f, 
};

static const uint32_t QQQQPR_with_dsub_2_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0xc0000000, 0x0000001f, 
};

static const uint32_t QQQQPR_with_dsub_5_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x80000000, 0x0000001f, 
};

static const uint32_t QQQQPR_with_dsub_7_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000000, 0x0000001f, 
};

static const uint32_t QQQQPR_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000000, 0x0000001e, 
};

static const uint32_t QQQQPR_with_dsub_2_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000000, 0x0000001c, 
};

static const uint32_t QQQQPR_with_dsub_4_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000000, 0x00000018, 
};

static const uint32_t QQQQPR_with_dsub_6_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000000, 0x00000010, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 1, 2, 3, 4, 5, 6, 7, 8, 0,
  /* 9 */ 9, 10, 0,
  /* 12 */ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0,
  /* 29 */ 13, 14, 15, 16, 37, 0,
  /* 35 */ 38, 40, 45, 48, 0,
  /* 40 */ 42, 50, 0,
  /* 43 */ 34, 36, 44, 52, 0,
  /* 48 */ 33, 35, 43, 46, 51, 53, 0,
  /* 55 */ 34, 36, 47, 54, 0,
  /* 60 */ 34, 36, 44, 47, 52, 54, 0,
  /* 67 */ 13, 14, 15, 16, 37, 49, 55, 0,
  /* 75 */ 11, 12, 56, 0,
  /* 79 */ 11, 12, 42, 50, 56, 0,
};

static const TargetRegisterClass *const SPR_8Superclasses[] = {
  &ARM::SPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRnopcSuperclasses[] = {
  &ARM::GPRRegClass,
  NULL
};

static const TargetRegisterClass *const rGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRnopcRegClass,
  NULL
};

static const TargetRegisterClass *const hGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  NULL
};

static const TargetRegisterClass *const tGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::rGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRnopc_and_hGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::hGPRRegClass,
  NULL
};

static const TargetRegisterClass *const hGPR_and_rGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::rGPRRegClass,
  &ARM::hGPRRegClass,
  &ARM::GPRnopc_and_hGPRRegClass,
  NULL
};

static const TargetRegisterClass *const tcGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::rGPRRegClass,
  NULL
};

static const TargetRegisterClass *const tGPR_and_tcGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::rGPRRegClass,
  &ARM::tGPRRegClass,
  &ARM::tcGPRRegClass,
  NULL
};

static const TargetRegisterClass *const hGPR_and_tcGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::rGPRRegClass,
  &ARM::hGPRRegClass,
  &ARM::GPRnopc_and_hGPRRegClass,
  &ARM::hGPR_and_rGPRRegClass,
  &ARM::tcGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRspSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::hGPRRegClass,
  &ARM::GPRnopc_and_hGPRRegClass,
  NULL
};

static const TargetRegisterClass *const DPR_VFP2Superclasses[] = {
  &ARM::DPRRegClass,
  NULL
};

static const TargetRegisterClass *const DPR_8Superclasses[] = {
  &ARM::DPRRegClass,
  &ARM::DPR_VFP2RegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_1_in_rGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_0_in_tGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  &ARM::GPRPair_with_gsub_1_in_rGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_0_in_hGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_0_in_tcGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_1_in_tcGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  &ARM::GPRPair_with_gsub_1_in_rGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_0_in_tGPR_and_tcGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  &ARM::GPRPair_with_gsub_1_in_rGPRRegClass,
  &ARM::GPRPair_with_gsub_0_in_tGPRRegClass,
  &ARM::GPRPair_with_gsub_0_in_tcGPRRegClass,
  &ARM::GPRPair_with_gsub_1_in_tcGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_1_in_hGPR_and_rGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  &ARM::GPRPair_with_gsub_1_in_rGPRRegClass,
  &ARM::GPRPair_with_gsub_0_in_hGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_1_in_GPRspSuperclasses[] = {
  &ARM::GPRPairRegClass,
  &ARM::GPRPair_with_gsub_0_in_hGPRRegClass,
  &ARM::GPRPair_with_gsub_0_in_tcGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_1_in_hGPR_and_tcGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  &ARM::GPRPair_with_gsub_1_in_rGPRRegClass,
  &ARM::GPRPair_with_gsub_0_in_hGPRRegClass,
  &ARM::GPRPair_with_gsub_1_in_tcGPRRegClass,
  &ARM::GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClass,
  NULL
};

static const TargetRegisterClass *const DPairSpc_with_ssub_0Superclasses[] = {
  &ARM::DPairSpcRegClass,
  NULL
};

static const TargetRegisterClass *const DPairSpc_with_dsub_2_then_ssub_0Superclasses[] = {
  &ARM::DPairSpcRegClass,
  &ARM::DPairSpc_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DPairSpc_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::DPairSpcRegClass,
  &ARM::DPairSpc_with_ssub_0RegClass,
  &ARM::DPairSpc_with_dsub_2_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DPairSpc_with_dsub_2_in_DPR_8Superclasses[] = {
  &ARM::DPairSpcRegClass,
  &ARM::DPairSpc_with_ssub_0RegClass,
  &ARM::DPairSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DPairSpc_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DPair_with_ssub_0Superclasses[] = {
  &ARM::DPairRegClass,
  NULL
};

static const TargetRegisterClass *const QPRSuperclasses[] = {
  &ARM::DPairRegClass,
  NULL
};

static const TargetRegisterClass *const DPair_with_ssub_2Superclasses[] = {
  &ARM::DPairRegClass,
  &ARM::DPair_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DPair_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::DPairRegClass,
  &ARM::DPair_with_ssub_0RegClass,
  &ARM::DPair_with_ssub_2RegClass,
  NULL
};

static const TargetRegisterClass *const QPR_VFP2Superclasses[] = {
  &ARM::DPairRegClass,
  &ARM::DPair_with_ssub_0RegClass,
  &ARM::QPRRegClass,
  &ARM::DPair_with_ssub_2RegClass,
  NULL
};

static const TargetRegisterClass *const DPair_with_dsub_1_in_DPR_8Superclasses[] = {
  &ARM::DPairRegClass,
  &ARM::DPair_with_ssub_0RegClass,
  &ARM::DPair_with_ssub_2RegClass,
  &ARM::DPair_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const QPR_8Superclasses[] = {
  &ARM::DPairRegClass,
  &ARM::DPair_with_ssub_0RegClass,
  &ARM::QPRRegClass,
  &ARM::DPair_with_ssub_2RegClass,
  &ARM::DPair_with_dsub_0_in_DPR_8RegClass,
  &ARM::QPR_VFP2RegClass,
  &ARM::DPair_with_dsub_1_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DTripleSpc_with_ssub_0Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_ssub_0Superclasses[] = {
  &ARM::DTripleRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DTripleRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_qsub_0_in_QPRSuperclasses[] = {
  &ARM::DTripleRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_ssub_2Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DTripleSpc_with_dsub_2_then_ssub_0Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_2_then_ssub_0Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  NULL
};

static const TargetRegisterClass *const DTripleSpc_with_dsub_4_then_ssub_0Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DTripleSpc_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_qsub_0_in_QPR_VFP2Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_qsub_0_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_1_dsub_2_in_QPR_VFP2Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_1_in_DPR_8Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRSuperclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_qsub_0_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_qsub_0_in_QPR_VFP2RegClass,
  NULL
};

static const TargetRegisterClass *const DTripleSpc_with_dsub_2_in_DPR_8Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_2_in_DPR_8Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTriple_with_dsub_1_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DTripleSpc_with_dsub_4_in_DPR_8Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTripleSpc_with_dsub_2_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_qsub_0_in_QPR_8Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_qsub_0_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTriple_with_qsub_0_in_QPR_VFP2RegClass,
  &ARM::DTriple_with_dsub_1_in_DPR_8RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_1_dsub_2_in_QPR_8Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
  &ARM::DTriple_with_dsub_1_in_DPR_8RegClass,
  &ARM::DTriple_with_dsub_2_in_DPR_8RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRSuperclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_qsub_0_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTriple_with_qsub_0_in_QPR_VFP2RegClass,
  &ARM::DTriple_with_dsub_1_in_DPR_8RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClass,
  &ARM::DTriple_with_dsub_2_in_DPR_8RegClass,
  &ARM::DTriple_with_qsub_0_in_QPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpcSuperclasses[] = {
  &ARM::DTripleSpcRegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpc_with_ssub_0Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DQuadSpcRegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpc_with_dsub_2_then_ssub_0Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuadSpcRegClass,
  &ARM::DQuadSpc_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpc_with_dsub_4_then_ssub_0Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DQuadSpcRegClass,
  &ARM::DQuadSpc_with_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_2_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpc_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuadSpcRegClass,
  &ARM::DQuadSpc_with_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_4_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpc_with_dsub_2_in_DPR_8Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTripleSpc_with_dsub_2_in_DPR_8RegClass,
  &ARM::DQuadSpcRegClass,
  &ARM::DQuadSpc_with_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpc_with_dsub_4_in_DPR_8Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTripleSpc_with_dsub_2_in_DPR_8RegClass,
  &ARM::DTripleSpc_with_dsub_4_in_DPR_8RegClass,
  &ARM::DQuadSpcRegClass,
  &ARM::DQuadSpc_with_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuadSpc_with_dsub_2_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_ssub_0Superclasses[] = {
  &ARM::DQuadRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_ssub_2Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const QQPRSuperclasses[] = {
  &ARM::DQuadRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DQuadRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_2_then_ssub_0Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_3_then_ssub_0Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_qsub_0_in_QPR_VFP2Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::QQPRRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_1_dsub_2_in_QPR_VFP2Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_1_in_DPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_qsub_1_in_QPR_VFP2Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::QQPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_qsub_0_in_QPR_VFP2RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_2_in_DPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_3_in_DPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_2_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_qsub_0_in_QPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::QQPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_qsub_0_in_QPR_VFP2RegClass,
  &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
  &ARM::DQuad_with_qsub_1_in_QPR_VFP2RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_1_dsub_2_in_QPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
  &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_2_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_qsub_1_in_QPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::QQPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_qsub_0_in_QPR_VFP2RegClass,
  &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
  &ARM::DQuad_with_qsub_1_in_QPR_VFP2RegClass,
  &ARM::DQuad_with_dsub_2_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_3_in_DPR_8RegClass,
  &ARM::DQuad_with_qsub_0_in_QPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
  &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_2_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_3_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_ssub_0Superclasses[] = {
  &ARM::QQQQPRRegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_2_then_ssub_0Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_5_then_ssub_0Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_7_then_ssub_0Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_5_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_5_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_7_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_2_in_DPR_8Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_5_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_7_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_4_in_DPR_8Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_5_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_7_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_0_in_DPR_8RegClass,
  &ARM::QQQQPR_with_dsub_2_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_6_in_DPR_8Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_5_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_7_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_0_in_DPR_8RegClass,
  &ARM::QQQQPR_with_dsub_2_in_DPR_8RegClass,
  &ARM::QQQQPR_with_dsub_4_in_DPR_8RegClass,
  NULL
};


static inline unsigned GPRAltOrderSelect(const MachineFunction &MF) {
      return 1 + MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> GPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::LR, ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::PC };
  static const MCPhysReg AltOrder2[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::GPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = GPRAltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned GPRnopcAltOrderSelect(const MachineFunction &MF) {
      return 1 + MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> GPRnopcGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::LR, ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP };
  static const MCPhysReg AltOrder2[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::GPRnopcRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = GPRnopcAltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned rGPRAltOrderSelect(const MachineFunction &MF) {
      return 1 + MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> rGPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::LR, ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12 };
  static const MCPhysReg AltOrder2[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::rGPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = rGPRAltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned tcGPRAltOrderSelect(const MachineFunction &MF) {
      return MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> tcGPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::tcGPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = tcGPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned tGPR_and_tcGPRAltOrderSelect(const MachineFunction &MF) {
      return MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> tGPR_and_tcGPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::tGPR_and_tcGPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = tGPR_and_tcGPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned hGPR_and_tcGPRAltOrderSelect(const MachineFunction &MF) {
      return MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> hGPR_and_tcGPRGetRawAllocationOrder(const MachineFunction &MF) {
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::hGPR_and_tcGPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    ArrayRef<MCPhysReg>()
  };
  const unsigned Select = hGPR_and_tcGPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DPRAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::D16, ARM::D17, ARM::D18, ARM::D19, ARM::D20, ARM::D21, ARM::D22, ARM::D23, ARM::D24, ARM::D25, ARM::D26, ARM::D27, ARM::D28, ARM::D29, ARM::D30, ARM::D31, ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, ARM::D8, ARM::D9, ARM::D10, ARM::D11, ARM::D12, ARM::D13, ARM::D14, ARM::D15 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DPairAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DPairGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q8, ARM::Q9, ARM::Q10, ARM::Q11, ARM::Q12, ARM::Q13, ARM::Q14, ARM::Q15, ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, ARM::D17_D18, ARM::D19_D20, ARM::D21_D22, ARM::D23_D24, ARM::D25_D26, ARM::D27_D28, ARM::D29_D30, ARM::D1_D2, ARM::D3_D4, ARM::D5_D6, ARM::D7_D8, ARM::D9_D10, ARM::D11_D12, ARM::D13_D14, ARM::D15_D16 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPairRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPairAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DPair_with_ssub_0AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DPair_with_ssub_0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, ARM::D1_D2, ARM::D3_D4, ARM::D5_D6, ARM::D7_D8, ARM::D9_D10, ARM::D11_D12, ARM::D13_D14, ARM::D15_D16 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPair_with_ssub_0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPair_with_ssub_0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QPRAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q8, ARM::Q9, ARM::Q10, ARM::Q11, ARM::Q12, ARM::Q13, ARM::Q14, ARM::Q15, ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DPair_with_ssub_2AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DPair_with_ssub_2GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, ARM::D1_D2, ARM::D3_D4, ARM::D5_D6, ARM::D7_D8, ARM::D9_D10, ARM::D11_D12, ARM::D13_D14 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPair_with_ssub_2RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPair_with_ssub_2AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DPair_with_dsub_0_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DPair_with_dsub_0_in_DPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::D1_D2, ARM::D3_D4, ARM::D5_D6, ARM::D7_D8 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPair_with_dsub_0_in_DPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPair_with_dsub_0_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DPair_with_dsub_1_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DPair_with_dsub_1_in_DPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::D1_D2, ARM::D3_D4, ARM::D5_D6 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPair_with_dsub_1_in_DPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPair_with_dsub_1_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQPRAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q8_Q9, ARM::Q9_Q10, ARM::Q10_Q11, ARM::Q11_Q12, ARM::Q12_Q13, ARM::Q13_Q14, ARM::Q14_Q15, ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, ARM::Q4_Q5, ARM::Q5_Q6, ARM::Q6_Q7, ARM::Q7_Q8 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DQuad_with_qsub_0_in_QPR_VFP2AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DQuad_with_qsub_0_in_QPR_VFP2GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, ARM::Q4_Q5, ARM::Q5_Q6, ARM::Q6_Q7, ARM::Q7_Q8 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DQuad_with_qsub_0_in_QPR_VFP2RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DQuad_with_qsub_0_in_QPR_VFP2AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DQuad_with_qsub_1_in_QPR_VFP2AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DQuad_with_qsub_1_in_QPR_VFP2GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, ARM::Q4_Q5, ARM::Q5_Q6, ARM::Q6_Q7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DQuad_with_qsub_1_in_QPR_VFP2RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DQuad_with_qsub_1_in_QPR_VFP2AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DQuad_with_qsub_0_in_QPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DQuad_with_qsub_0_in_QPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DQuad_with_qsub_0_in_QPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DQuad_with_qsub_0_in_QPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DQuad_with_qsub_1_in_QPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DQuad_with_qsub_1_in_QPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DQuad_with_qsub_1_in_QPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DQuad_with_qsub_1_in_QPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPRAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q8_Q9_Q10_Q11, ARM::Q9_Q10_Q11_Q12, ARM::Q10_Q11_Q12_Q13, ARM::Q11_Q12_Q13_Q14, ARM::Q12_Q13_Q14_Q15, ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, ARM::Q6_Q7_Q8_Q9, ARM::Q7_Q8_Q9_Q10 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_ssub_0AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_ssub_0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, ARM::Q6_Q7_Q8_Q9, ARM::Q7_Q8_Q9_Q10 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_ssub_0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_ssub_0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_2_then_ssub_0AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_2_then_ssub_0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, ARM::Q6_Q7_Q8_Q9 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_2_then_ssub_0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_2_then_ssub_0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_5_then_ssub_0AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_5_then_ssub_0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_5_then_ssub_0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_5_then_ssub_0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_7_then_ssub_0AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_7_then_ssub_0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_7_then_ssub_0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_7_then_ssub_0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_0_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_0_in_DPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_0_in_DPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_0_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_2_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_2_in_DPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_2_in_DPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_2_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_4_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_4_in_DPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_4_in_DPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_4_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_6_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_6_in_DPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_6_in_DPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_6_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
namespace ARM {   // Register class instances
  extern const TargetRegisterClass SPRRegClass = {
    &ARMMCRegisterClasses[SPRRegClassID],
    VTLists + 2,
    SPRSubClassMask,
    SuperRegIdxSeqs + 12,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPRRegClass = {
    &ARMMCRegisterClasses[GPRRegClassID],
    VTLists + 0,
    GPRSubClassMask,
    SuperRegIdxSeqs + 9,
    NullRegClasses,
    GPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass SPR_8RegClass = {
    &ARMMCRegisterClasses[SPR_8RegClassID],
    VTLists + 2,
    SPR_8SubClassMask,
    SuperRegIdxSeqs + 12,
    SPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass GPRnopcRegClass = {
    &ARMMCRegisterClasses[GPRnopcRegClassID],
    VTLists + 0,
    GPRnopcSubClassMask,
    SuperRegIdxSeqs + 9,
    GPRnopcSuperclasses,
    GPRnopcGetRawAllocationOrder
  };

  extern const TargetRegisterClass rGPRRegClass = {
    &ARMMCRegisterClasses[rGPRRegClassID],
    VTLists + 0,
    rGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    rGPRSuperclasses,
    rGPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass hGPRRegClass = {
    &ARMMCRegisterClasses[hGPRRegClassID],
    VTLists + 0,
    hGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    hGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass tGPRRegClass = {
    &ARMMCRegisterClasses[tGPRRegClassID],
    VTLists + 0,
    tGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    tGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRnopc_and_hGPRRegClass = {
    &ARMMCRegisterClasses[GPRnopc_and_hGPRRegClassID],
    VTLists + 0,
    GPRnopc_and_hGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    GPRnopc_and_hGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass hGPR_and_rGPRRegClass = {
    &ARMMCRegisterClasses[hGPR_and_rGPRRegClassID],
    VTLists + 0,
    hGPR_and_rGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    hGPR_and_rGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass tcGPRRegClass = {
    &ARMMCRegisterClasses[tcGPRRegClassID],
    VTLists + 0,
    tcGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    tcGPRSuperclasses,
    tcGPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass tGPR_and_tcGPRRegClass = {
    &ARMMCRegisterClasses[tGPR_and_tcGPRRegClassID],
    VTLists + 0,
    tGPR_and_tcGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    tGPR_and_tcGPRSuperclasses,
    tGPR_and_tcGPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass hGPR_and_tcGPRRegClass = {
    &ARMMCRegisterClasses[hGPR_and_tcGPRRegClassID],
    VTLists + 0,
    hGPR_and_tcGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    hGPR_and_tcGPRSuperclasses,
    hGPR_and_tcGPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass CCRRegClass = {
    &ARMMCRegisterClasses[CCRRegClassID],
    VTLists + 0,
    CCRSubClassMask,
    SuperRegIdxSeqs + 8,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPRspRegClass = {
    &ARMMCRegisterClasses[GPRspRegClassID],
    VTLists + 0,
    GPRspSubClassMask,
    SuperRegIdxSeqs + 10,
    GPRspSuperclasses,
    0
  };

  extern const TargetRegisterClass DPRRegClass = {
    &ARMMCRegisterClasses[DPRRegClassID],
    VTLists + 10,
    DPRSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    DPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass DPR_VFP2RegClass = {
    &ARMMCRegisterClasses[DPR_VFP2RegClassID],
    VTLists + 10,
    DPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 0,
    DPR_VFP2Superclasses,
    0
  };

  extern const TargetRegisterClass DPR_8RegClass = {
    &ARMMCRegisterClasses[DPR_8RegClassID],
    VTLists + 10,
    DPR_8SubClassMask,
    SuperRegIdxSeqs + 0,
    DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass GPRPairRegClass = {
    &ARMMCRegisterClasses[GPRPairRegClassID],
    VTLists + 24,
    GPRPairSubClassMask,
    SuperRegIdxSeqs + 8,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_1_in_rGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_1_in_rGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_1_in_rGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_1_in_rGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_0_in_tGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_0_in_tGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_0_in_tGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_0_in_tGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_0_in_hGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_0_in_hGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_0_in_hGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_0_in_hGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_0_in_tcGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_0_in_tcGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_0_in_tcGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_0_in_tcGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_1_in_tcGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_1_in_tcGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_1_in_tcGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_1_in_tcGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_0_in_tGPR_and_tcGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_0_in_tGPR_and_tcGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_0_in_tGPR_and_tcGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_0_in_tGPR_and_tcGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_1_in_hGPR_and_rGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_1_in_hGPR_and_rGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_1_in_GPRspRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_1_in_GPRspRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_1_in_GPRspSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_1_in_GPRspSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_1_in_hGPR_and_tcGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_1_in_hGPR_and_tcGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_1_in_hGPR_and_tcGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_1_in_hGPR_and_tcGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DPairSpcRegClass = {
    &ARMMCRegisterClasses[DPairSpcRegClassID],
    VTLists + 4,
    DPairSpcSubClassMask,
    SuperRegIdxSeqs + 48,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass DPairSpc_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[DPairSpc_with_ssub_0RegClassID],
    VTLists + 4,
    DPairSpc_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 48,
    DPairSpc_with_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DPairSpc_with_dsub_2_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DPairSpc_with_dsub_2_then_ssub_0RegClassID],
    VTLists + 4,
    DPairSpc_with_dsub_2_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 48,
    DPairSpc_with_dsub_2_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DPairSpc_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DPairSpc_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 4,
    DPairSpc_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 48,
    DPairSpc_with_dsub_0_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DPairSpc_with_dsub_2_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DPairSpc_with_dsub_2_in_DPR_8RegClassID],
    VTLists + 4,
    DPairSpc_with_dsub_2_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 48,
    DPairSpc_with_dsub_2_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DPairRegClass = {
    &ARMMCRegisterClasses[DPairRegClassID],
    VTLists + 17,
    DPairSubClassMask,
    SuperRegIdxSeqs + 67,
    NullRegClasses,
    DPairGetRawAllocationOrder
  };

  extern const TargetRegisterClass DPair_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[DPair_with_ssub_0RegClassID],
    VTLists + 17,
    DPair_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 67,
    DPair_with_ssub_0Superclasses,
    DPair_with_ssub_0GetRawAllocationOrder
  };

  extern const TargetRegisterClass QPRRegClass = {
    &ARMMCRegisterClasses[QPRRegClassID],
    VTLists + 17,
    QPRSubClassMask,
    SuperRegIdxSeqs + 29,
    QPRSuperclasses,
    QPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass DPair_with_ssub_2RegClass = {
    &ARMMCRegisterClasses[DPair_with_ssub_2RegClassID],
    VTLists + 17,
    DPair_with_ssub_2SubClassMask,
    SuperRegIdxSeqs + 67,
    DPair_with_ssub_2Superclasses,
    DPair_with_ssub_2GetRawAllocationOrder
  };

  extern const TargetRegisterClass DPair_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DPair_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 17,
    DPair_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 67,
    DPair_with_dsub_0_in_DPR_8Superclasses,
    DPair_with_dsub_0_in_DPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass QPR_VFP2RegClass = {
    &ARMMCRegisterClasses[QPR_VFP2RegClassID],
    VTLists + 17,
    QPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 29,
    QPR_VFP2Superclasses,
    0
  };

  extern const TargetRegisterClass DPair_with_dsub_1_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DPair_with_dsub_1_in_DPR_8RegClassID],
    VTLists + 17,
    DPair_with_dsub_1_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 67,
    DPair_with_dsub_1_in_DPR_8Superclasses,
    DPair_with_dsub_1_in_DPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass QPR_8RegClass = {
    &ARMMCRegisterClasses[QPR_8RegClassID],
    VTLists + 17,
    QPR_8SubClassMask,
    SuperRegIdxSeqs + 29,
    QPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTripleRegClass = {
    &ARMMCRegisterClasses[DTripleRegClassID],
    VTLists + 24,
    DTripleSubClassMask,
    SuperRegIdxSeqs + 60,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass DTripleSpcRegClass = {
    &ARMMCRegisterClasses[DTripleSpcRegClassID],
    VTLists + 24,
    DTripleSpcSubClassMask,
    SuperRegIdxSeqs + 35,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass DTripleSpc_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[DTripleSpc_with_ssub_0RegClassID],
    VTLists + 24,
    DTripleSpc_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 35,
    DTripleSpc_with_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[DTriple_with_ssub_0RegClassID],
    VTLists + 24,
    DTriple_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 60,
    DTriple_with_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 24,
    DTriple_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 55,
    DTriple_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_qsub_0_in_QPRRegClass = {
    &ARMMCRegisterClasses[DTriple_with_qsub_0_in_QPRRegClassID],
    VTLists + 24,
    DTriple_with_qsub_0_in_QPRSubClassMask,
    SuperRegIdxSeqs + 43,
    DTriple_with_qsub_0_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_ssub_2RegClass = {
    &ARMMCRegisterClasses[DTriple_with_ssub_2RegClassID],
    VTLists + 24,
    DTriple_with_ssub_2SubClassMask,
    SuperRegIdxSeqs + 60,
    DTriple_with_ssub_2Superclasses,
    0
  };

  extern const TargetRegisterClass DTripleSpc_with_dsub_2_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DTripleSpc_with_dsub_2_then_ssub_0RegClassID],
    VTLists + 24,
    DTripleSpc_with_dsub_2_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 35,
    DTripleSpc_with_dsub_2_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_2_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_2_then_ssub_0RegClassID],
    VTLists + 24,
    DTriple_with_dsub_2_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 60,
    DTriple_with_dsub_2_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DTripleSpc_with_dsub_4_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DTripleSpc_with_dsub_4_then_ssub_0RegClassID],
    VTLists + 24,
    DTripleSpc_with_dsub_4_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 35,
    DTripleSpc_with_dsub_4_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DTripleSpc_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DTripleSpc_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 24,
    DTripleSpc_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 35,
    DTripleSpc_with_dsub_0_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 24,
    DTriple_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 60,
    DTriple_with_dsub_0_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_qsub_0_in_QPR_VFP2RegClass = {
    &ARMMCRegisterClasses[DTriple_with_qsub_0_in_QPR_VFP2RegClassID],
    VTLists + 24,
    DTriple_with_qsub_0_in_QPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 43,
    DTriple_with_qsub_0_in_QPR_VFP2Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 24,
    DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 55,
    DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClassID],
    VTLists + 24,
    DTriple_with_dsub_1_dsub_2_in_QPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 55,
    DTriple_with_dsub_1_dsub_2_in_QPR_VFP2Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_1_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_1_in_DPR_8RegClassID],
    VTLists + 24,
    DTriple_with_dsub_1_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 60,
    DTriple_with_dsub_1_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClassID],
    VTLists + 24,
    DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRSubClassMask,
    SuperRegIdxSeqs + 43,
    DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DTripleSpc_with_dsub_2_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DTripleSpc_with_dsub_2_in_DPR_8RegClassID],
    VTLists + 24,
    DTripleSpc_with_dsub_2_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 35,
    DTripleSpc_with_dsub_2_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_2_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_2_in_DPR_8RegClassID],
    VTLists + 24,
    DTriple_with_dsub_2_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 60,
    DTriple_with_dsub_2_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTripleSpc_with_dsub_4_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DTripleSpc_with_dsub_4_in_DPR_8RegClassID],
    VTLists + 24,
    DTripleSpc_with_dsub_4_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 35,
    DTripleSpc_with_dsub_4_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 24,
    DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 55,
    DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_qsub_0_in_QPR_8RegClass = {
    &ARMMCRegisterClasses[DTriple_with_qsub_0_in_QPR_8RegClassID],
    VTLists + 24,
    DTriple_with_qsub_0_in_QPR_8SubClassMask,
    SuperRegIdxSeqs + 43,
    DTriple_with_qsub_0_in_QPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_1_dsub_2_in_QPR_8RegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_1_dsub_2_in_QPR_8RegClassID],
    VTLists + 24,
    DTriple_with_dsub_1_dsub_2_in_QPR_8SubClassMask,
    SuperRegIdxSeqs + 55,
    DTriple_with_dsub_1_dsub_2_in_QPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRRegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRRegClassID],
    VTLists + 24,
    DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRSubClassMask,
    SuperRegIdxSeqs + 43,
    DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpcRegClass = {
    &ARMMCRegisterClasses[DQuadSpcRegClassID],
    VTLists + 6,
    DQuadSpcSubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpcSuperclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpc_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[DQuadSpc_with_ssub_0RegClassID],
    VTLists + 6,
    DQuadSpc_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpc_with_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpc_with_dsub_2_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DQuadSpc_with_dsub_2_then_ssub_0RegClassID],
    VTLists + 6,
    DQuadSpc_with_dsub_2_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpc_with_dsub_2_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpc_with_dsub_4_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DQuadSpc_with_dsub_4_then_ssub_0RegClassID],
    VTLists + 6,
    DQuadSpc_with_dsub_4_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpc_with_dsub_4_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpc_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuadSpc_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 6,
    DQuadSpc_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpc_with_dsub_0_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpc_with_dsub_2_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuadSpc_with_dsub_2_in_DPR_8RegClassID],
    VTLists + 6,
    DQuadSpc_with_dsub_2_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpc_with_dsub_2_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpc_with_dsub_4_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuadSpc_with_dsub_4_in_DPR_8RegClassID],
    VTLists + 6,
    DQuadSpc_with_dsub_4_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpc_with_dsub_4_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuadRegClass = {
    &ARMMCRegisterClasses[DQuadRegClassID],
    VTLists + 6,
    DQuadSubClassMask,
    SuperRegIdxSeqs + 79,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[DQuad_with_ssub_0RegClassID],
    VTLists + 6,
    DQuad_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_ssub_2RegClass = {
    &ARMMCRegisterClasses[DQuad_with_ssub_2RegClassID],
    VTLists + 6,
    DQuad_with_ssub_2SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_ssub_2Superclasses,
    0
  };

  extern const TargetRegisterClass QQPRRegClass = {
    &ARMMCRegisterClasses[QQPRRegClassID],
    VTLists + 6,
    QQPRSubClassMask,
    SuperRegIdxSeqs + 75,
    QQPRSuperclasses,
    QQPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass DQuad_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 6,
    DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_2_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_2_then_ssub_0RegClassID],
    VTLists + 6,
    DQuad_with_dsub_2_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_dsub_2_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_3_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_3_then_ssub_0RegClassID],
    VTLists + 6,
    DQuad_with_dsub_3_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_dsub_3_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 6,
    DQuad_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_dsub_0_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_qsub_0_in_QPR_VFP2RegClass = {
    &ARMMCRegisterClasses[DQuad_with_qsub_0_in_QPR_VFP2RegClassID],
    VTLists + 6,
    DQuad_with_qsub_0_in_QPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 75,
    DQuad_with_qsub_0_in_QPR_VFP2Superclasses,
    DQuad_with_qsub_0_in_QPR_VFP2GetRawAllocationOrder
  };

  extern const TargetRegisterClass DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 6,
    DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClassID],
    VTLists + 6,
    DQuad_with_dsub_1_dsub_2_in_QPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_dsub_1_dsub_2_in_QPR_VFP2Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_1_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_1_in_DPR_8RegClassID],
    VTLists + 6,
    DQuad_with_dsub_1_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_dsub_1_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_qsub_1_in_QPR_VFP2RegClass = {
    &ARMMCRegisterClasses[DQuad_with_qsub_1_in_QPR_VFP2RegClassID],
    VTLists + 6,
    DQuad_with_qsub_1_in_QPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 75,
    DQuad_with_qsub_1_in_QPR_VFP2Superclasses,
    DQuad_with_qsub_1_in_QPR_VFP2GetRawAllocationOrder
  };

  extern const TargetRegisterClass DQuad_with_dsub_2_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_2_in_DPR_8RegClassID],
    VTLists + 6,
    DQuad_with_dsub_2_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_dsub_2_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 6,
    DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_3_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_3_in_DPR_8RegClassID],
    VTLists + 6,
    DQuad_with_dsub_3_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_dsub_3_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 6,
    DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_qsub_0_in_QPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_qsub_0_in_QPR_8RegClassID],
    VTLists + 6,
    DQuad_with_qsub_0_in_QPR_8SubClassMask,
    SuperRegIdxSeqs + 75,
    DQuad_with_qsub_0_in_QPR_8Superclasses,
    DQuad_with_qsub_0_in_QPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass DQuad_with_dsub_1_dsub_2_in_QPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_1_dsub_2_in_QPR_8RegClassID],
    VTLists + 6,
    DQuad_with_dsub_1_dsub_2_in_QPR_8SubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_dsub_1_dsub_2_in_QPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_qsub_1_in_QPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_qsub_1_in_QPR_8RegClassID],
    VTLists + 6,
    DQuad_with_qsub_1_in_QPR_8SubClassMask,
    SuperRegIdxSeqs + 75,
    DQuad_with_qsub_1_in_QPR_8Superclasses,
    DQuad_with_qsub_1_in_QPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 6,
    DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQQPRRegClass = {
    &ARMMCRegisterClasses[QQQQPRRegClassID],
    VTLists + 8,
    QQQQPRSubClassMask,
    SuperRegIdxSeqs + 8,
    NullRegClasses,
    QQQQPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_ssub_0RegClassID],
    VTLists + 8,
    QQQQPR_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_ssub_0Superclasses,
    QQQQPR_with_ssub_0GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_2_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_2_then_ssub_0RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_2_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_2_then_ssub_0Superclasses,
    QQQQPR_with_dsub_2_then_ssub_0GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_5_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_5_then_ssub_0RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_5_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_5_then_ssub_0Superclasses,
    QQQQPR_with_dsub_5_then_ssub_0GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_7_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_7_then_ssub_0RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_7_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_7_then_ssub_0Superclasses,
    QQQQPR_with_dsub_7_then_ssub_0GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_0_in_DPR_8Superclasses,
    QQQQPR_with_dsub_0_in_DPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_2_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_2_in_DPR_8RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_2_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_2_in_DPR_8Superclasses,
    QQQQPR_with_dsub_2_in_DPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_4_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_4_in_DPR_8RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_4_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_4_in_DPR_8Superclasses,
    QQQQPR_with_dsub_4_in_DPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_6_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_6_in_DPR_8RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_6_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_6_in_DPR_8Superclasses,
    QQQQPR_with_dsub_6_in_DPR_8GetRawAllocationOrder
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &ARM::SPRRegClass,
    &ARM::GPRRegClass,
    &ARM::SPR_8RegClass,
    &ARM::GPRnopcRegClass,
    &ARM::rGPRRegClass,
    &ARM::hGPRRegClass,
    &ARM::tGPRRegClass,
    &ARM::GPRnopc_and_hGPRRegClass,
    &ARM::hGPR_and_rGPRRegClass,
    &ARM::tcGPRRegClass,
    &ARM::tGPR_and_tcGPRRegClass,
    &ARM::hGPR_and_tcGPRRegClass,
    &ARM::CCRRegClass,
    &ARM::GPRspRegClass,
    &ARM::DPRRegClass,
    &ARM::DPR_VFP2RegClass,
    &ARM::DPR_8RegClass,
    &ARM::GPRPairRegClass,
    &ARM::GPRPair_with_gsub_1_in_rGPRRegClass,
    &ARM::GPRPair_with_gsub_0_in_tGPRRegClass,
    &ARM::GPRPair_with_gsub_0_in_hGPRRegClass,
    &ARM::GPRPair_with_gsub_0_in_tcGPRRegClass,
    &ARM::GPRPair_with_gsub_1_in_tcGPRRegClass,
    &ARM::GPRPair_with_gsub_0_in_tGPR_and_tcGPRRegClass,
    &ARM::GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClass,
    &ARM::GPRPair_with_gsub_1_in_GPRspRegClass,
    &ARM::GPRPair_with_gsub_1_in_hGPR_and_tcGPRRegClass,
    &ARM::DPairSpcRegClass,
    &ARM::DPairSpc_with_ssub_0RegClass,
    &ARM::DPairSpc_with_dsub_2_then_ssub_0RegClass,
    &ARM::DPairSpc_with_dsub_0_in_DPR_8RegClass,
    &ARM::DPairSpc_with_dsub_2_in_DPR_8RegClass,
    &ARM::DPairRegClass,
    &ARM::DPair_with_ssub_0RegClass,
    &ARM::QPRRegClass,
    &ARM::DPair_with_ssub_2RegClass,
    &ARM::DPair_with_dsub_0_in_DPR_8RegClass,
    &ARM::QPR_VFP2RegClass,
    &ARM::DPair_with_dsub_1_in_DPR_8RegClass,
    &ARM::QPR_8RegClass,
    &ARM::DTripleRegClass,
    &ARM::DTripleSpcRegClass,
    &ARM::DTripleSpc_with_ssub_0RegClass,
    &ARM::DTriple_with_ssub_0RegClass,
    &ARM::DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DTriple_with_qsub_0_in_QPRRegClass,
    &ARM::DTriple_with_ssub_2RegClass,
    &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
    &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
    &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
    &ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClass,
    &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
    &ARM::DTriple_with_qsub_0_in_QPR_VFP2RegClass,
    &ARM::DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
    &ARM::DTriple_with_dsub_1_in_DPR_8RegClass,
    &ARM::DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClass,
    &ARM::DTripleSpc_with_dsub_2_in_DPR_8RegClass,
    &ARM::DTriple_with_dsub_2_in_DPR_8RegClass,
    &ARM::DTripleSpc_with_dsub_4_in_DPR_8RegClass,
    &ARM::DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DTriple_with_qsub_0_in_QPR_8RegClass,
    &ARM::DTriple_with_dsub_1_dsub_2_in_QPR_8RegClass,
    &ARM::DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRRegClass,
    &ARM::DQuadSpcRegClass,
    &ARM::DQuadSpc_with_ssub_0RegClass,
    &ARM::DQuadSpc_with_dsub_2_then_ssub_0RegClass,
    &ARM::DQuadSpc_with_dsub_4_then_ssub_0RegClass,
    &ARM::DQuadSpc_with_dsub_0_in_DPR_8RegClass,
    &ARM::DQuadSpc_with_dsub_2_in_DPR_8RegClass,
    &ARM::DQuadSpc_with_dsub_4_in_DPR_8RegClass,
    &ARM::DQuadRegClass,
    &ARM::DQuad_with_ssub_0RegClass,
    &ARM::DQuad_with_ssub_2RegClass,
    &ARM::QQPRRegClass,
    &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
    &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
    &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
    &ARM::DQuad_with_qsub_0_in_QPR_VFP2RegClass,
    &ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
    &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
    &ARM::DQuad_with_qsub_1_in_QPR_VFP2RegClass,
    &ARM::DQuad_with_dsub_2_in_DPR_8RegClass,
    &ARM::DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DQuad_with_dsub_3_in_DPR_8RegClass,
    &ARM::DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DQuad_with_qsub_0_in_QPR_8RegClass,
    &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_8RegClass,
    &ARM::DQuad_with_qsub_1_in_QPR_8RegClass,
    &ARM::DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::QQQQPRRegClass,
    &ARM::QQQQPR_with_ssub_0RegClass,
    &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
    &ARM::QQQQPR_with_dsub_5_then_ssub_0RegClass,
    &ARM::QQQQPR_with_dsub_7_then_ssub_0RegClass,
    &ARM::QQQQPR_with_dsub_0_in_DPR_8RegClass,
    &ARM::QQQQPR_with_dsub_2_in_DPR_8RegClass,
    &ARM::QQQQPR_with_dsub_4_in_DPR_8RegClass,
    &ARM::QQQQPR_with_dsub_6_in_DPR_8RegClass,
  };
}

static const TargetRegisterInfoDesc ARMRegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 1, 1 },
  { 0, 0 },
  { 0, 0 },
  { 1, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 1, 1 },
  { 1, 1 },
  { 1, 1 },
  { 1, 1 },
  { 1, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 1, 1 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 1, 1 },
  { 1, 1 },
  { 1, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
};
unsigned ARMGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t RowMap[56] = {
    0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 4, 0, 2, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 2, 
  };
  static const uint8_t Rows[8][56] = {
    { 1, 2, 3, 4, 5, 0, 7, 0, 0, 0, 0, 0, 13, 14, 0, 0, 17, 18, 19, 20, 21, 22, 23, 24, 0, 0, 27, 28, 0, 0, 31, 32, 33, 34, 35, 36, 37, 38, 0, 0, 0, 0, 43, 0, 45, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, },
    { 2, 3, 4, 5, 6, 0, 8, 0, 0, 0, 0, 0, 37, 49, 0, 0, 19, 20, 21, 22, 23, 24, 31, 32, 0, 0, 25, 26, 0, 0, 29, 30, 35, 36, 43, 44, 14, 40, 0, 0, 0, 0, 46, 0, 48, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, },
    { 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 21, 22, 23, 24, 31, 32, 29, 30, 0, 0, 0, 0, 0, 0, 27, 28, 43, 44, 46, 47, 49, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 49, 55, 0, 0, 23, 24, 31, 32, 29, 30, 27, 28, 0, 0, 0, 0, 0, 0, 25, 26, 46, 47, 51, 52, 15, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 15, 16, 0, 0, 31, 32, 29, 30, 27, 28, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 51, 52, 53, 54, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 29, 30, 27, 28, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
  };

  --IdxA; assert(IdxA < 56);
  --IdxB; assert(IdxB < 56);
  return Rows[RowMap[IdxA]][IdxB];
}

const TargetRegisterClass *ARMGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[101][56] = {
    {	// SPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// SPR_8
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRnopc
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// rGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// hGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// tGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRnopc_and_hGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// hGPR_and_rGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// tGPR_and_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// hGPR_and_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// CCR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRsp
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      16,	// ssub_0 -> DPR_VFP2
      16,	// ssub_1 -> DPR_VFP2
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPR_VFP2
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      16,	// ssub_0 -> DPR_VFP2
      16,	// ssub_1 -> DPR_VFP2
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPR_8
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      17,	// ssub_0 -> DPR_8
      17,	// ssub_1 -> DPR_8
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      18,	// gsub_0 -> GPRPair
      18,	// gsub_1 -> GPRPair
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_1_in_rGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      19,	// gsub_0 -> GPRPair_with_gsub_1_in_rGPR
      19,	// gsub_1 -> GPRPair_with_gsub_1_in_rGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_0_in_tGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      20,	// gsub_0 -> GPRPair_with_gsub_0_in_tGPR
      20,	// gsub_1 -> GPRPair_with_gsub_0_in_tGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_0_in_hGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      21,	// gsub_0 -> GPRPair_with_gsub_0_in_hGPR
      21,	// gsub_1 -> GPRPair_with_gsub_0_in_hGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_0_in_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      22,	// gsub_0 -> GPRPair_with_gsub_0_in_tcGPR
      22,	// gsub_1 -> GPRPair_with_gsub_0_in_tcGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_1_in_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      23,	// gsub_0 -> GPRPair_with_gsub_1_in_tcGPR
      23,	// gsub_1 -> GPRPair_with_gsub_1_in_tcGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_0_in_tGPR_and_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      24,	// gsub_0 -> GPRPair_with_gsub_0_in_tGPR_and_tcGPR
      24,	// gsub_1 -> GPRPair_with_gsub_0_in_tGPR_and_tcGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_1_in_hGPR_and_rGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      25,	// gsub_0 -> GPRPair_with_gsub_1_in_hGPR_and_rGPR
      25,	// gsub_1 -> GPRPair_with_gsub_1_in_hGPR_and_rGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_1_in_GPRsp
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      26,	// gsub_0 -> GPRPair_with_gsub_1_in_GPRsp
      26,	// gsub_1 -> GPRPair_with_gsub_1_in_GPRsp
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_1_in_hGPR_and_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      27,	// gsub_0 -> GPRPair_with_gsub_1_in_hGPR_and_tcGPR
      27,	// gsub_1 -> GPRPair_with_gsub_1_in_hGPR_and_tcGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPairSpc
      28,	// dsub_0 -> DPairSpc
      0,	// dsub_1
      28,	// dsub_2 -> DPairSpc
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      29,	// ssub_0 -> DPairSpc_with_ssub_0
      29,	// ssub_1 -> DPairSpc_with_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      30,	// dsub_2_then_ssub_0 -> DPairSpc_with_dsub_2_then_ssub_0
      30,	// dsub_2_then_ssub_1 -> DPairSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPairSpc_with_ssub_0
      29,	// dsub_0 -> DPairSpc_with_ssub_0
      0,	// dsub_1
      29,	// dsub_2 -> DPairSpc_with_ssub_0
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      29,	// ssub_0 -> DPairSpc_with_ssub_0
      29,	// ssub_1 -> DPairSpc_with_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      30,	// dsub_2_then_ssub_0 -> DPairSpc_with_dsub_2_then_ssub_0
      30,	// dsub_2_then_ssub_1 -> DPairSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPairSpc_with_dsub_2_then_ssub_0
      30,	// dsub_0 -> DPairSpc_with_dsub_2_then_ssub_0
      0,	// dsub_1
      30,	// dsub_2 -> DPairSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      30,	// ssub_0 -> DPairSpc_with_dsub_2_then_ssub_0
      30,	// ssub_1 -> DPairSpc_with_dsub_2_then_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      30,	// dsub_2_then_ssub_0 -> DPairSpc_with_dsub_2_then_ssub_0
      30,	// dsub_2_then_ssub_1 -> DPairSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPairSpc_with_dsub_0_in_DPR_8
      31,	// dsub_0 -> DPairSpc_with_dsub_0_in_DPR_8
      0,	// dsub_1
      31,	// dsub_2 -> DPairSpc_with_dsub_0_in_DPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      31,	// ssub_0 -> DPairSpc_with_dsub_0_in_DPR_8
      31,	// ssub_1 -> DPairSpc_with_dsub_0_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      31,	// dsub_2_then_ssub_0 -> DPairSpc_with_dsub_0_in_DPR_8
      31,	// dsub_2_then_ssub_1 -> DPairSpc_with_dsub_0_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPairSpc_with_dsub_2_in_DPR_8
      32,	// dsub_0 -> DPairSpc_with_dsub_2_in_DPR_8
      0,	// dsub_1
      32,	// dsub_2 -> DPairSpc_with_dsub_2_in_DPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      32,	// ssub_0 -> DPairSpc_with_dsub_2_in_DPR_8
      32,	// ssub_1 -> DPairSpc_with_dsub_2_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      32,	// dsub_2_then_ssub_0 -> DPairSpc_with_dsub_2_in_DPR_8
      32,	// dsub_2_then_ssub_1 -> DPairSpc_with_dsub_2_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPair
      33,	// dsub_0 -> DPair
      33,	// dsub_1 -> DPair
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      34,	// ssub_0 -> DPair_with_ssub_0
      34,	// ssub_1 -> DPair_with_ssub_0
      36,	// ssub_2 -> DPair_with_ssub_2
      36,	// ssub_3 -> DPair_with_ssub_2
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPair_with_ssub_0
      34,	// dsub_0 -> DPair_with_ssub_0
      34,	// dsub_1 -> DPair_with_ssub_0
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      34,	// ssub_0 -> DPair_with_ssub_0
      34,	// ssub_1 -> DPair_with_ssub_0
      36,	// ssub_2 -> DPair_with_ssub_2
      36,	// ssub_3 -> DPair_with_ssub_2
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// QPR
      35,	// dsub_0 -> QPR
      35,	// dsub_1 -> QPR
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      38,	// ssub_0 -> QPR_VFP2
      38,	// ssub_1 -> QPR_VFP2
      38,	// ssub_2 -> QPR_VFP2
      38,	// ssub_3 -> QPR_VFP2
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPair_with_ssub_2
      36,	// dsub_0 -> DPair_with_ssub_2
      36,	// dsub_1 -> DPair_with_ssub_2
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      36,	// ssub_0 -> DPair_with_ssub_2
      36,	// ssub_1 -> DPair_with_ssub_2
      36,	// ssub_2 -> DPair_with_ssub_2
      36,	// ssub_3 -> DPair_with_ssub_2
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPair_with_dsub_0_in_DPR_8
      37,	// dsub_0 -> DPair_with_dsub_0_in_DPR_8
      37,	// dsub_1 -> DPair_with_dsub_0_in_DPR_8
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      37,	// ssub_0 -> DPair_with_dsub_0_in_DPR_8
      37,	// ssub_1 -> DPair_with_dsub_0_in_DPR_8
      37,	// ssub_2 -> DPair_with_dsub_0_in_DPR_8
      37,	// ssub_3 -> DPair_with_dsub_0_in_DPR_8
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// QPR_VFP2
      38,	// dsub_0 -> QPR_VFP2
      38,	// dsub_1 -> QPR_VFP2
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      38,	// ssub_0 -> QPR_VFP2
      38,	// ssub_1 -> QPR_VFP2
      38,	// ssub_2 -> QPR_VFP2
      38,	// ssub_3 -> QPR_VFP2
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPair_with_dsub_1_in_DPR_8
      39,	// dsub_0 -> DPair_with_dsub_1_in_DPR_8
      39,	// dsub_1 -> DPair_with_dsub_1_in_DPR_8
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      39,	// ssub_0 -> DPair_with_dsub_1_in_DPR_8
      39,	// ssub_1 -> DPair_with_dsub_1_in_DPR_8
      39,	// ssub_2 -> DPair_with_dsub_1_in_DPR_8
      39,	// ssub_3 -> DPair_with_dsub_1_in_DPR_8
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// QPR_8
      40,	// dsub_0 -> QPR_8
      40,	// dsub_1 -> QPR_8
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      40,	// ssub_0 -> QPR_8
      40,	// ssub_1 -> QPR_8
      40,	// ssub_2 -> QPR_8
      40,	// ssub_3 -> QPR_8
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple
      41,	// dsub_0 -> DTriple
      41,	// dsub_1 -> DTriple
      41,	// dsub_2 -> DTriple
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      41,	// qsub_0 -> DTriple
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      44,	// ssub_0 -> DTriple_with_ssub_0
      44,	// ssub_1 -> DTriple_with_ssub_0
      47,	// ssub_2 -> DTriple_with_ssub_2
      47,	// ssub_3 -> DTriple_with_ssub_2
      49,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0
      49,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      41,	// dsub_0_dsub_2 -> DTriple
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      41,	// dsub_1_dsub_2 -> DTriple
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc
      42,	// dsub_0 -> DTripleSpc
      0,	// dsub_1
      42,	// dsub_2 -> DTripleSpc
      0,	// dsub_3
      42,	// dsub_4 -> DTripleSpc
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      43,	// ssub_0 -> DTripleSpc_with_ssub_0
      43,	// ssub_1 -> DTripleSpc_with_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      48,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_2_then_ssub_0
      48,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      50,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      50,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_4_then_ssub_0
      42,	// dsub_0_dsub_2 -> DTripleSpc
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      42,	// dsub_2_dsub_4 -> DTripleSpc
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc_with_ssub_0
      43,	// dsub_0 -> DTripleSpc_with_ssub_0
      0,	// dsub_1
      43,	// dsub_2 -> DTripleSpc_with_ssub_0
      0,	// dsub_3
      43,	// dsub_4 -> DTripleSpc_with_ssub_0
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      43,	// ssub_0 -> DTripleSpc_with_ssub_0
      43,	// ssub_1 -> DTripleSpc_with_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      48,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_2_then_ssub_0
      48,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      50,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      50,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_4_then_ssub_0
      43,	// dsub_0_dsub_2 -> DTripleSpc_with_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      43,	// dsub_2_dsub_4 -> DTripleSpc_with_ssub_0
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_ssub_0
      44,	// dsub_0 -> DTriple_with_ssub_0
      44,	// dsub_1 -> DTriple_with_ssub_0
      44,	// dsub_2 -> DTriple_with_ssub_0
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      44,	// qsub_0 -> DTriple_with_ssub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      44,	// ssub_0 -> DTriple_with_ssub_0
      44,	// ssub_1 -> DTriple_with_ssub_0
      47,	// ssub_2 -> DTriple_with_ssub_2
      47,	// ssub_3 -> DTriple_with_ssub_2
      49,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0
      49,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      44,	// dsub_0_dsub_2 -> DTriple_with_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      44,	// dsub_1_dsub_2 -> DTriple_with_ssub_0
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_1_dsub_2_in_QPR
      45,	// dsub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR
      45,	// dsub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR
      45,	// dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      45,	// qsub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      54,	// ssub_0 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      54,	// ssub_1 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      55,	// ssub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// ssub_3 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      45,	// dsub_0_dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      45,	// dsub_1_dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_qsub_0_in_QPR
      46,	// dsub_0 -> DTriple_with_qsub_0_in_QPR
      46,	// dsub_1 -> DTriple_with_qsub_0_in_QPR
      46,	// dsub_2 -> DTriple_with_qsub_0_in_QPR
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      46,	// qsub_0 -> DTriple_with_qsub_0_in_QPR
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      53,	// ssub_0 -> DTriple_with_qsub_0_in_QPR_VFP2
      53,	// ssub_1 -> DTriple_with_qsub_0_in_QPR_VFP2
      53,	// ssub_2 -> DTriple_with_qsub_0_in_QPR_VFP2
      53,	// ssub_3 -> DTriple_with_qsub_0_in_QPR_VFP2
      57,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      57,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      46,	// dsub_0_dsub_2 -> DTriple_with_qsub_0_in_QPR
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      46,	// dsub_1_dsub_2 -> DTriple_with_qsub_0_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_ssub_2
      47,	// dsub_0 -> DTriple_with_ssub_2
      47,	// dsub_1 -> DTriple_with_ssub_2
      47,	// dsub_2 -> DTriple_with_ssub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      47,	// qsub_0 -> DTriple_with_ssub_2
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      47,	// ssub_0 -> DTriple_with_ssub_2
      47,	// ssub_1 -> DTriple_with_ssub_2
      47,	// ssub_2 -> DTriple_with_ssub_2
      47,	// ssub_3 -> DTriple_with_ssub_2
      49,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0
      49,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      47,	// dsub_0_dsub_2 -> DTriple_with_ssub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      47,	// dsub_1_dsub_2 -> DTriple_with_ssub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc_with_dsub_2_then_ssub_0
      48,	// dsub_0 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_1
      48,	// dsub_2 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3
      48,	// dsub_4 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      48,	// ssub_0 -> DTripleSpc_with_dsub_2_then_ssub_0
      48,	// ssub_1 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      48,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_2_then_ssub_0
      48,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      50,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      50,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_4_then_ssub_0
      48,	// dsub_0_dsub_2 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      48,	// dsub_2_dsub_4 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_2_then_ssub_0
      49,	// dsub_0 -> DTriple_with_dsub_2_then_ssub_0
      49,	// dsub_1 -> DTriple_with_dsub_2_then_ssub_0
      49,	// dsub_2 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      49,	// qsub_0 -> DTriple_with_dsub_2_then_ssub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      49,	// ssub_0 -> DTriple_with_dsub_2_then_ssub_0
      49,	// ssub_1 -> DTriple_with_dsub_2_then_ssub_0
      49,	// ssub_2 -> DTriple_with_dsub_2_then_ssub_0
      49,	// ssub_3 -> DTriple_with_dsub_2_then_ssub_0
      49,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0
      49,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      49,	// dsub_0_dsub_2 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      49,	// dsub_1_dsub_2 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc_with_dsub_4_then_ssub_0
      50,	// dsub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// dsub_1
      50,	// dsub_2 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// dsub_3
      50,	// dsub_4 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      50,	// ssub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      50,	// ssub_1 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      50,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      50,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      50,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      50,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_4_then_ssub_0
      50,	// dsub_0_dsub_2 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      50,	// dsub_2_dsub_4 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc_with_dsub_0_in_DPR_8
      51,	// dsub_0 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// dsub_1
      51,	// dsub_2 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// dsub_3
      51,	// dsub_4 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      51,	// ssub_0 -> DTripleSpc_with_dsub_0_in_DPR_8
      51,	// ssub_1 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      51,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_0_in_DPR_8
      51,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      51,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_0_in_DPR_8
      51,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_0_in_DPR_8
      51,	// dsub_0_dsub_2 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      51,	// dsub_2_dsub_4 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_0_in_DPR_8
      52,	// dsub_0 -> DTriple_with_dsub_0_in_DPR_8
      52,	// dsub_1 -> DTriple_with_dsub_0_in_DPR_8
      52,	// dsub_2 -> DTriple_with_dsub_0_in_DPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      52,	// qsub_0 -> DTriple_with_dsub_0_in_DPR_8
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      52,	// ssub_0 -> DTriple_with_dsub_0_in_DPR_8
      52,	// ssub_1 -> DTriple_with_dsub_0_in_DPR_8
      52,	// ssub_2 -> DTriple_with_dsub_0_in_DPR_8
      52,	// ssub_3 -> DTriple_with_dsub_0_in_DPR_8
      52,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_0_in_DPR_8
      52,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_0_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      52,	// dsub_0_dsub_2 -> DTriple_with_dsub_0_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      52,	// dsub_1_dsub_2 -> DTriple_with_dsub_0_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_qsub_0_in_QPR_VFP2
      53,	// dsub_0 -> DTriple_with_qsub_0_in_QPR_VFP2
      53,	// dsub_1 -> DTriple_with_qsub_0_in_QPR_VFP2
      53,	// dsub_2 -> DTriple_with_qsub_0_in_QPR_VFP2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      53,	// qsub_0 -> DTriple_with_qsub_0_in_QPR_VFP2
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      53,	// ssub_0 -> DTriple_with_qsub_0_in_QPR_VFP2
      53,	// ssub_1 -> DTriple_with_qsub_0_in_QPR_VFP2
      53,	// ssub_2 -> DTriple_with_qsub_0_in_QPR_VFP2
      53,	// ssub_3 -> DTriple_with_qsub_0_in_QPR_VFP2
      57,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      57,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      53,	// dsub_0_dsub_2 -> DTriple_with_qsub_0_in_QPR_VFP2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      53,	// dsub_1_dsub_2 -> DTriple_with_qsub_0_in_QPR_VFP2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      54,	// dsub_0 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      54,	// dsub_1 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      54,	// dsub_2 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      54,	// qsub_0 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      54,	// ssub_0 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      54,	// ssub_1 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      55,	// ssub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// ssub_3 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      54,	// dsub_0_dsub_2 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      54,	// dsub_1_dsub_2 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// dsub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// dsub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      55,	// qsub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      55,	// ssub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// ssub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// ssub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// ssub_3 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      55,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      55,	// dsub_0_dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      55,	// dsub_1_dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_1_in_DPR_8
      56,	// dsub_0 -> DTriple_with_dsub_1_in_DPR_8
      56,	// dsub_1 -> DTriple_with_dsub_1_in_DPR_8
      56,	// dsub_2 -> DTriple_with_dsub_1_in_DPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      56,	// qsub_0 -> DTriple_with_dsub_1_in_DPR_8
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      56,	// ssub_0 -> DTriple_with_dsub_1_in_DPR_8
      56,	// ssub_1 -> DTriple_with_dsub_1_in_DPR_8
      56,	// ssub_2 -> DTriple_with_dsub_1_in_DPR_8
      56,	// ssub_3 -> DTriple_with_dsub_1_in_DPR_8
      56,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_1_in_DPR_8
      56,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_1_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      56,	// dsub_0_dsub_2 -> DTriple_with_dsub_1_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      56,	// dsub_1_dsub_2 -> DTriple_with_dsub_1_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      57,	// dsub_0 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      57,	// dsub_1 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      57,	// dsub_2 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      57,	// qsub_0 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      57,	// ssub_0 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      57,	// ssub_1 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      57,	// ssub_2 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      57,	// ssub_3 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      57,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      57,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      57,	// dsub_0_dsub_2 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      57,	// dsub_1_dsub_2 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc_with_dsub_2_in_DPR_8
      58,	// dsub_0 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// dsub_1
      58,	// dsub_2 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// dsub_3
      58,	// dsub_4 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      58,	// ssub_0 -> DTripleSpc_with_dsub_2_in_DPR_8
      58,	// ssub_1 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      58,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_2_in_DPR_8
      58,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      58,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_2_in_DPR_8
      58,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_2_in_DPR_8
      58,	// dsub_0_dsub_2 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      58,	// dsub_2_dsub_4 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_2_in_DPR_8
      59,	// dsub_0 -> DTriple_with_dsub_2_in_DPR_8
      59,	// dsub_1 -> DTriple_with_dsub_2_in_DPR_8
      59,	// dsub_2 -> DTriple_with_dsub_2_in_DPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      59,	// qsub_0 -> DTriple_with_dsub_2_in_DPR_8
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      59,	// ssub_0 -> DTriple_with_dsub_2_in_DPR_8
      59,	// ssub_1 -> DTriple_with_dsub_2_in_DPR_8
      59,	// ssub_2 -> DTriple_with_dsub_2_in_DPR_8
      59,	// ssub_3 -> DTriple_with_dsub_2_in_DPR_8
      59,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_in_DPR_8
      59,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      59,	// dsub_0_dsub_2 -> DTriple_with_dsub_2_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      59,	// dsub_1_dsub_2 -> DTriple_with_dsub_2_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc_with_dsub_4_in_DPR_8
      60,	// dsub_0 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// dsub_1
      60,	// dsub_2 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// dsub_3
      60,	// dsub_4 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      60,	// ssub_0 -> DTripleSpc_with_dsub_4_in_DPR_8
      60,	// ssub_1 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      60,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_4_in_DPR_8
      60,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      60,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_4_in_DPR_8
      60,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_4_in_DPR_8
      60,	// dsub_0_dsub_2 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      60,	// dsub_2_dsub_4 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      61,	// dsub_0 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      61,	// dsub_1 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      61,	// dsub_2 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      61,	// qsub_0 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      61,	// ssub_0 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      61,	// ssub_1 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      61,	// ssub_2 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      61,	// ssub_3 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      61,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      61,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      61,	// dsub_0_dsub_2 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      61,	// dsub_1_dsub_2 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_qsub_0_in_QPR_8
      62,	// dsub_0 -> DTriple_with_qsub_0_in_QPR_8
      62,	// dsub_1 -> DTriple_with_qsub_0_in_QPR_8
      62,	// dsub_2 -> DTriple_with_qsub_0_in_QPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      62,	// qsub_0 -> DTriple_with_qsub_0_in_QPR_8
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      62,	// ssub_0 -> DTriple_with_qsub_0_in_QPR_8
      62,	// ssub_1 -> DTriple_with_qsub_0_in_QPR_8
      62,	// ssub_2 -> DTriple_with_qsub_0_in_QPR_8
      62,	// ssub_3 -> DTriple_with_qsub_0_in_QPR_8
      62,	// dsub_2_then_ssub_0 -> DTriple_with_qsub_0_in_QPR_8
      62,	// dsub_2_then_ssub_1 -> DTriple_with_qsub_0_in_QPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      62,	// dsub_0_dsub_2 -> DTriple_with_qsub_0_in_QPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      62,	// dsub_1_dsub_2 -> DTriple_with_qsub_0_in_QPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_1_dsub_2_in_QPR_8
      63,	// dsub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      63,	// dsub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      63,	// dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      63,	// qsub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      63,	// ssub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      63,	// ssub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      63,	// ssub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      63,	// ssub_3 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      63,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      63,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      63,	// dsub_0_dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      63,	// dsub_1_dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      64,	// dsub_0 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      64,	// dsub_1 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      64,	// dsub_2 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      64,	// qsub_0 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      64,	// ssub_0 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      64,	// ssub_1 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      64,	// ssub_2 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      64,	// ssub_3 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      64,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      64,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      64,	// dsub_0_dsub_2 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      64,	// dsub_1_dsub_2 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc
      65,	// dsub_0 -> DQuadSpc
      0,	// dsub_1
      65,	// dsub_2 -> DQuadSpc
      0,	// dsub_3
      65,	// dsub_4 -> DQuadSpc
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      66,	// ssub_0 -> DQuadSpc_with_ssub_0
      66,	// ssub_1 -> DQuadSpc_with_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      67,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_2_then_ssub_0
      67,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      68,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      68,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_4_then_ssub_0
      65,	// dsub_0_dsub_2 -> DQuadSpc
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      65,	// dsub_2_dsub_4 -> DQuadSpc
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc_with_ssub_0
      66,	// dsub_0 -> DQuadSpc_with_ssub_0
      0,	// dsub_1
      66,	// dsub_2 -> DQuadSpc_with_ssub_0
      0,	// dsub_3
      66,	// dsub_4 -> DQuadSpc_with_ssub_0
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      66,	// ssub_0 -> DQuadSpc_with_ssub_0
      66,	// ssub_1 -> DQuadSpc_with_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      67,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_2_then_ssub_0
      67,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      68,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      68,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_4_then_ssub_0
      66,	// dsub_0_dsub_2 -> DQuadSpc_with_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      66,	// dsub_2_dsub_4 -> DQuadSpc_with_ssub_0
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc_with_dsub_2_then_ssub_0
      67,	// dsub_0 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_1
      67,	// dsub_2 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3
      67,	// dsub_4 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      67,	// ssub_0 -> DQuadSpc_with_dsub_2_then_ssub_0
      67,	// ssub_1 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      67,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_2_then_ssub_0
      67,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      68,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      68,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_4_then_ssub_0
      67,	// dsub_0_dsub_2 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      67,	// dsub_2_dsub_4 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc_with_dsub_4_then_ssub_0
      68,	// dsub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// dsub_1
      68,	// dsub_2 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// dsub_3
      68,	// dsub_4 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      68,	// ssub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      68,	// ssub_1 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      68,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      68,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      68,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      68,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_4_then_ssub_0
      68,	// dsub_0_dsub_2 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      68,	// dsub_2_dsub_4 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc_with_dsub_0_in_DPR_8
      69,	// dsub_0 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// dsub_1
      69,	// dsub_2 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// dsub_3
      69,	// dsub_4 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      69,	// ssub_0 -> DQuadSpc_with_dsub_0_in_DPR_8
      69,	// ssub_1 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      69,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_0_in_DPR_8
      69,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      69,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_0_in_DPR_8
      69,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_0_in_DPR_8
      69,	// dsub_0_dsub_2 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      69,	// dsub_2_dsub_4 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc_with_dsub_2_in_DPR_8
      70,	// dsub_0 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// dsub_1
      70,	// dsub_2 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// dsub_3
      70,	// dsub_4 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      70,	// ssub_0 -> DQuadSpc_with_dsub_2_in_DPR_8
      70,	// ssub_1 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      70,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_2_in_DPR_8
      70,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      70,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_2_in_DPR_8
      70,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_2_in_DPR_8
      70,	// dsub_0_dsub_2 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      70,	// dsub_2_dsub_4 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc_with_dsub_4_in_DPR_8
      71,	// dsub_0 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// dsub_1
      71,	// dsub_2 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// dsub_3
      71,	// dsub_4 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      71,	// ssub_0 -> DQuadSpc_with_dsub_4_in_DPR_8
      71,	// ssub_1 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      71,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_4_in_DPR_8
      71,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      71,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_4_in_DPR_8
      71,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_4_in_DPR_8
      71,	// dsub_0_dsub_2 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      71,	// dsub_2_dsub_4 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad
      72,	// dsub_0 -> DQuad
      72,	// dsub_1 -> DQuad
      72,	// dsub_2 -> DQuad
      72,	// dsub_3 -> DQuad
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      72,	// qsub_0 -> DQuad
      72,	// qsub_1 -> DQuad
      0,	// qsub_2
      0,	// qsub_3
      73,	// ssub_0 -> DQuad_with_ssub_0
      73,	// ssub_1 -> DQuad_with_ssub_0
      74,	// ssub_2 -> DQuad_with_ssub_2
      74,	// ssub_3 -> DQuad_with_ssub_2
      77,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      72,	// dsub_0_dsub_2 -> DQuad
      72,	// dsub_0_dsub_1_dsub_2 -> DQuad
      72,	// dsub_1_dsub_3 -> DQuad
      72,	// dsub_1_dsub_2_dsub_3 -> DQuad
      72,	// dsub_1_dsub_2 -> DQuad
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_ssub_0
      73,	// dsub_0 -> DQuad_with_ssub_0
      73,	// dsub_1 -> DQuad_with_ssub_0
      73,	// dsub_2 -> DQuad_with_ssub_0
      73,	// dsub_3 -> DQuad_with_ssub_0
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      73,	// qsub_0 -> DQuad_with_ssub_0
      73,	// qsub_1 -> DQuad_with_ssub_0
      0,	// qsub_2
      0,	// qsub_3
      73,	// ssub_0 -> DQuad_with_ssub_0
      73,	// ssub_1 -> DQuad_with_ssub_0
      74,	// ssub_2 -> DQuad_with_ssub_2
      74,	// ssub_3 -> DQuad_with_ssub_2
      77,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      73,	// dsub_0_dsub_2 -> DQuad_with_ssub_0
      73,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_ssub_0
      73,	// dsub_1_dsub_3 -> DQuad_with_ssub_0
      73,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_ssub_0
      73,	// dsub_1_dsub_2 -> DQuad_with_ssub_0
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_ssub_2
      74,	// dsub_0 -> DQuad_with_ssub_2
      74,	// dsub_1 -> DQuad_with_ssub_2
      74,	// dsub_2 -> DQuad_with_ssub_2
      74,	// dsub_3 -> DQuad_with_ssub_2
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      74,	// qsub_0 -> DQuad_with_ssub_2
      74,	// qsub_1 -> DQuad_with_ssub_2
      0,	// qsub_2
      0,	// qsub_3
      74,	// ssub_0 -> DQuad_with_ssub_2
      74,	// ssub_1 -> DQuad_with_ssub_2
      74,	// ssub_2 -> DQuad_with_ssub_2
      74,	// ssub_3 -> DQuad_with_ssub_2
      77,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      74,	// dsub_0_dsub_2 -> DQuad_with_ssub_2
      74,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_ssub_2
      74,	// dsub_1_dsub_3 -> DQuad_with_ssub_2
      74,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_ssub_2
      74,	// dsub_1_dsub_2 -> DQuad_with_ssub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// QQPR
      75,	// dsub_0 -> QQPR
      75,	// dsub_1 -> QQPR
      75,	// dsub_2 -> QQPR
      75,	// dsub_3 -> QQPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      75,	// qsub_0 -> QQPR
      75,	// qsub_1 -> QQPR
      0,	// qsub_2
      0,	// qsub_3
      80,	// ssub_0 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// ssub_1 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// ssub_2 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// ssub_3 -> DQuad_with_qsub_0_in_QPR_VFP2
      84,	// dsub_2_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_2_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_3_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_3_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      75,	// dsub_0_dsub_2 -> QQPR
      75,	// dsub_0_dsub_1_dsub_2 -> QQPR
      75,	// dsub_1_dsub_3 -> QQPR
      75,	// dsub_1_dsub_2_dsub_3 -> QQPR
      75,	// dsub_1_dsub_2 -> QQPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_1_dsub_2_in_QPR
      76,	// dsub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR
      76,	// dsub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR
      76,	// dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR
      76,	// dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      76,	// qsub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR
      76,	// qsub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_2
      0,	// qsub_3
      81,	// ssub_0 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      81,	// ssub_1 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// ssub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// ssub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      86,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      76,	// dsub_0_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR
      76,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR
      76,	// dsub_1_dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR
      76,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR
      76,	// dsub_1_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_0 -> DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_1 -> DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_2 -> DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_3 -> DQuad_with_dsub_2_then_ssub_0
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      77,	// qsub_0 -> DQuad_with_dsub_2_then_ssub_0
      77,	// qsub_1 -> DQuad_with_dsub_2_then_ssub_0
      0,	// qsub_2
      0,	// qsub_3
      77,	// ssub_0 -> DQuad_with_dsub_2_then_ssub_0
      77,	// ssub_1 -> DQuad_with_dsub_2_then_ssub_0
      77,	// ssub_2 -> DQuad_with_dsub_2_then_ssub_0
      77,	// ssub_3 -> DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      77,	// dsub_0_dsub_2 -> DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_1_dsub_3 -> DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_2_then_ssub_0
      77,	// dsub_1_dsub_2 -> DQuad_with_dsub_2_then_ssub_0
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_0 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_1 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_2 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_3 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      78,	// qsub_0 -> DQuad_with_dsub_3_then_ssub_0
      78,	// qsub_1 -> DQuad_with_dsub_3_then_ssub_0
      0,	// qsub_2
      0,	// qsub_3
      78,	// ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      78,	// ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      78,	// ssub_2 -> DQuad_with_dsub_3_then_ssub_0
      78,	// ssub_3 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      78,	// dsub_0_dsub_2 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_1_dsub_3 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_3_then_ssub_0
      78,	// dsub_1_dsub_2 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_0_in_DPR_8
      79,	// dsub_0 -> DQuad_with_dsub_0_in_DPR_8
      79,	// dsub_1 -> DQuad_with_dsub_0_in_DPR_8
      79,	// dsub_2 -> DQuad_with_dsub_0_in_DPR_8
      79,	// dsub_3 -> DQuad_with_dsub_0_in_DPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      79,	// qsub_0 -> DQuad_with_dsub_0_in_DPR_8
      79,	// qsub_1 -> DQuad_with_dsub_0_in_DPR_8
      0,	// qsub_2
      0,	// qsub_3
      79,	// ssub_0 -> DQuad_with_dsub_0_in_DPR_8
      79,	// ssub_1 -> DQuad_with_dsub_0_in_DPR_8
      79,	// ssub_2 -> DQuad_with_dsub_0_in_DPR_8
      79,	// ssub_3 -> DQuad_with_dsub_0_in_DPR_8
      79,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_0_in_DPR_8
      79,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_0_in_DPR_8
      79,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_0_in_DPR_8
      79,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_0_in_DPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      79,	// dsub_0_dsub_2 -> DQuad_with_dsub_0_in_DPR_8
      79,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_0_in_DPR_8
      79,	// dsub_1_dsub_3 -> DQuad_with_dsub_0_in_DPR_8
      79,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_0_in_DPR_8
      79,	// dsub_1_dsub_2 -> DQuad_with_dsub_0_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_qsub_0_in_QPR_VFP2
      80,	// dsub_0 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// dsub_1 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// dsub_2 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// dsub_3 -> DQuad_with_qsub_0_in_QPR_VFP2
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      80,	// qsub_0 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// qsub_1 -> DQuad_with_qsub_0_in_QPR_VFP2
      0,	// qsub_2
      0,	// qsub_3
      80,	// ssub_0 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// ssub_1 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// ssub_2 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// ssub_3 -> DQuad_with_qsub_0_in_QPR_VFP2
      84,	// dsub_2_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_2_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_3_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_3_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      80,	// dsub_0_dsub_2 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// dsub_1_dsub_3 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_qsub_0_in_QPR_VFP2
      80,	// dsub_1_dsub_2 -> DQuad_with_qsub_0_in_QPR_VFP2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      81,	// dsub_0 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      81,	// dsub_1 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      81,	// dsub_2 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      81,	// dsub_3 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      81,	// qsub_0 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      81,	// qsub_1 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_2
      0,	// qsub_3
      81,	// ssub_0 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      81,	// ssub_1 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// ssub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// ssub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      86,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      81,	// dsub_0_dsub_2 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      81,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      81,	// dsub_1_dsub_3 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      81,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      81,	// dsub_1_dsub_2 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      82,	// qsub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// qsub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// qsub_2
      0,	// qsub_3
      82,	// ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// ssub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// ssub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      86,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      82,	// dsub_0_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_1_dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      82,	// dsub_1_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_1_in_DPR_8
      83,	// dsub_0 -> DQuad_with_dsub_1_in_DPR_8
      83,	// dsub_1 -> DQuad_with_dsub_1_in_DPR_8
      83,	// dsub_2 -> DQuad_with_dsub_1_in_DPR_8
      83,	// dsub_3 -> DQuad_with_dsub_1_in_DPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      83,	// qsub_0 -> DQuad_with_dsub_1_in_DPR_8
      83,	// qsub_1 -> DQuad_with_dsub_1_in_DPR_8
      0,	// qsub_2
      0,	// qsub_3
      83,	// ssub_0 -> DQuad_with_dsub_1_in_DPR_8
      83,	// ssub_1 -> DQuad_with_dsub_1_in_DPR_8
      83,	// ssub_2 -> DQuad_with_dsub_1_in_DPR_8
      83,	// ssub_3 -> DQuad_with_dsub_1_in_DPR_8
      83,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_1_in_DPR_8
      83,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_1_in_DPR_8
      83,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_1_in_DPR_8
      83,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_1_in_DPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      83,	// dsub_0_dsub_2 -> DQuad_with_dsub_1_in_DPR_8
      83,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_1_in_DPR_8
      83,	// dsub_1_dsub_3 -> DQuad_with_dsub_1_in_DPR_8
      83,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_1_in_DPR_8
      83,	// dsub_1_dsub_2 -> DQuad_with_dsub_1_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_2 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_3 -> DQuad_with_qsub_1_in_QPR_VFP2
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      84,	// qsub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// qsub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      0,	// qsub_2
      0,	// qsub_3
      84,	// ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// ssub_2 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// ssub_3 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_2_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_2_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_3_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_3_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      84,	// dsub_0_dsub_2 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_1_dsub_3 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_qsub_1_in_QPR_VFP2
      84,	// dsub_1_dsub_2 -> DQuad_with_qsub_1_in_QPR_VFP2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_2_in_DPR_8
      85,	// dsub_0 -> DQuad_with_dsub_2_in_DPR_8
      85,	// dsub_1 -> DQuad_with_dsub_2_in_DPR_8
      85,	// dsub_2 -> DQuad_with_dsub_2_in_DPR_8
      85,	// dsub_3 -> DQuad_with_dsub_2_in_DPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      85,	// qsub_0 -> DQuad_with_dsub_2_in_DPR_8
      85,	// qsub_1 -> DQuad_with_dsub_2_in_DPR_8
      0,	// qsub_2
      0,	// qsub_3
      85,	// ssub_0 -> DQuad_with_dsub_2_in_DPR_8
      85,	// ssub_1 -> DQuad_with_dsub_2_in_DPR_8
      85,	// ssub_2 -> DQuad_with_dsub_2_in_DPR_8
      85,	// ssub_3 -> DQuad_with_dsub_2_in_DPR_8
      85,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_2_in_DPR_8
      85,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_2_in_DPR_8
      85,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_2_in_DPR_8
      85,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_2_in_DPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      85,	// dsub_0_dsub_2 -> DQuad_with_dsub_2_in_DPR_8
      85,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_2_in_DPR_8
      85,	// dsub_1_dsub_3 -> DQuad_with_dsub_2_in_DPR_8
      85,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_2_in_DPR_8
      85,	// dsub_1_dsub_2 -> DQuad_with_dsub_2_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_2 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_3 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      86,	// qsub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// qsub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_2
      0,	// qsub_3
      86,	// ssub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// ssub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// ssub_2 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// ssub_3 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      86,	// dsub_0_dsub_2 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_1_dsub_3 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      86,	// dsub_1_dsub_2 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_3_in_DPR_8
      87,	// dsub_0 -> DQuad_with_dsub_3_in_DPR_8
      87,	// dsub_1 -> DQuad_with_dsub_3_in_DPR_8
      87,	// dsub_2 -> DQuad_with_dsub_3_in_DPR_8
      87,	// dsub_3 -> DQuad_with_dsub_3_in_DPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      87,	// qsub_0 -> DQuad_with_dsub_3_in_DPR_8
      87,	// qsub_1 -> DQuad_with_dsub_3_in_DPR_8
      0,	// qsub_2
      0,	// qsub_3
      87,	// ssub_0 -> DQuad_with_dsub_3_in_DPR_8
      87,	// ssub_1 -> DQuad_with_dsub_3_in_DPR_8
      87,	// ssub_2 -> DQuad_with_dsub_3_in_DPR_8
      87,	// ssub_3 -> DQuad_with_dsub_3_in_DPR_8
      87,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_3_in_DPR_8
      87,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_3_in_DPR_8
      87,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_in_DPR_8
      87,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_in_DPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      87,	// dsub_0_dsub_2 -> DQuad_with_dsub_3_in_DPR_8
      87,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_3_in_DPR_8
      87,	// dsub_1_dsub_3 -> DQuad_with_dsub_3_in_DPR_8
      87,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_3_in_DPR_8
      87,	// dsub_1_dsub_2 -> DQuad_with_dsub_3_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// dsub_0 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// dsub_1 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// dsub_2 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// dsub_3 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      88,	// qsub_0 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// qsub_1 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_2
      0,	// qsub_3
      88,	// ssub_0 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// ssub_1 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// ssub_2 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// ssub_3 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      88,	// dsub_0_dsub_2 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// dsub_1_dsub_3 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      88,	// dsub_1_dsub_2 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_qsub_0_in_QPR_8
      89,	// dsub_0 -> DQuad_with_qsub_0_in_QPR_8
      89,	// dsub_1 -> DQuad_with_qsub_0_in_QPR_8
      89,	// dsub_2 -> DQuad_with_qsub_0_in_QPR_8
      89,	// dsub_3 -> DQuad_with_qsub_0_in_QPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      89,	// qsub_0 -> DQuad_with_qsub_0_in_QPR_8
      89,	// qsub_1 -> DQuad_with_qsub_0_in_QPR_8
      0,	// qsub_2
      0,	// qsub_3
      89,	// ssub_0 -> DQuad_with_qsub_0_in_QPR_8
      89,	// ssub_1 -> DQuad_with_qsub_0_in_QPR_8
      89,	// ssub_2 -> DQuad_with_qsub_0_in_QPR_8
      89,	// ssub_3 -> DQuad_with_qsub_0_in_QPR_8
      89,	// dsub_2_then_ssub_0 -> DQuad_with_qsub_0_in_QPR_8
      89,	// dsub_2_then_ssub_1 -> DQuad_with_qsub_0_in_QPR_8
      89,	// dsub_3_then_ssub_0 -> DQuad_with_qsub_0_in_QPR_8
      89,	// dsub_3_then_ssub_1 -> DQuad_with_qsub_0_in_QPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      89,	// dsub_0_dsub_2 -> DQuad_with_qsub_0_in_QPR_8
      89,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_qsub_0_in_QPR_8
      89,	// dsub_1_dsub_3 -> DQuad_with_qsub_0_in_QPR_8
      89,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_qsub_0_in_QPR_8
      89,	// dsub_1_dsub_2 -> DQuad_with_qsub_0_in_QPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// dsub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// dsub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      90,	// qsub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// qsub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      0,	// qsub_2
      0,	// qsub_3
      90,	// ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// ssub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// ssub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      90,	// dsub_0_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// dsub_1_dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      90,	// dsub_1_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_qsub_1_in_QPR_8
      91,	// dsub_0 -> DQuad_with_qsub_1_in_QPR_8
      91,	// dsub_1 -> DQuad_with_qsub_1_in_QPR_8
      91,	// dsub_2 -> DQuad_with_qsub_1_in_QPR_8
      91,	// dsub_3 -> DQuad_with_qsub_1_in_QPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      91,	// qsub_0 -> DQuad_with_qsub_1_in_QPR_8
      91,	// qsub_1 -> DQuad_with_qsub_1_in_QPR_8
      0,	// qsub_2
      0,	// qsub_3
      91,	// ssub_0 -> DQuad_with_qsub_1_in_QPR_8
      91,	// ssub_1 -> DQuad_with_qsub_1_in_QPR_8
      91,	// ssub_2 -> DQuad_with_qsub_1_in_QPR_8
      91,	// ssub_3 -> DQuad_with_qsub_1_in_QPR_8
      91,	// dsub_2_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_8
      91,	// dsub_2_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_8
      91,	// dsub_3_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_8
      91,	// dsub_3_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      91,	// dsub_0_dsub_2 -> DQuad_with_qsub_1_in_QPR_8
      91,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_qsub_1_in_QPR_8
      91,	// dsub_1_dsub_3 -> DQuad_with_qsub_1_in_QPR_8
      91,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_qsub_1_in_QPR_8
      91,	// dsub_1_dsub_2 -> DQuad_with_qsub_1_in_QPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// dsub_0 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// dsub_1 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// dsub_2 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// dsub_3 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      92,	// qsub_0 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// qsub_1 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_2
      0,	// qsub_3
      92,	// ssub_0 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// ssub_1 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// ssub_2 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// ssub_3 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      92,	// dsub_0_dsub_2 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// dsub_1_dsub_3 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      92,	// dsub_1_dsub_2 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// QQQQPR
      93,	// dsub_0 -> QQQQPR
      93,	// dsub_1 -> QQQQPR
      93,	// dsub_2 -> QQQQPR
      93,	// dsub_3 -> QQQQPR
      93,	// dsub_4 -> QQQQPR
      93,	// dsub_5 -> QQQQPR
      93,	// dsub_6 -> QQQQPR
      93,	// dsub_7 -> QQQQPR
      0,	// gsub_0
      0,	// gsub_1
      93,	// qqsub_0 -> QQQQPR
      93,	// qqsub_1 -> QQQQPR
      93,	// qsub_0 -> QQQQPR
      93,	// qsub_1 -> QQQQPR
      93,	// qsub_2 -> QQQQPR
      93,	// qsub_3 -> QQQQPR
      94,	// ssub_0 -> QQQQPR_with_ssub_0
      94,	// ssub_1 -> QQQQPR_with_ssub_0
      94,	// ssub_2 -> QQQQPR_with_ssub_0
      94,	// ssub_3 -> QQQQPR_with_ssub_0
      95,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      97,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      96,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      93,	// dsub_0_dsub_2 -> QQQQPR
      93,	// dsub_0_dsub_1_dsub_2 -> QQQQPR
      93,	// dsub_1_dsub_3 -> QQQQPR
      93,	// dsub_1_dsub_2_dsub_3 -> QQQQPR
      93,	// dsub_1_dsub_2 -> QQQQPR
      93,	// dsub_0_dsub_2_dsub_4 -> QQQQPR
      93,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR
      93,	// dsub_1_dsub_3_dsub_5 -> QQQQPR
      93,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR
      93,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR
      93,	// dsub_2_dsub_4 -> QQQQPR
      93,	// dsub_2_dsub_3_dsub_4 -> QQQQPR
      93,	// dsub_2_dsub_4_dsub_6 -> QQQQPR
      93,	// dsub_3_dsub_5 -> QQQQPR
      93,	// dsub_3_dsub_4_dsub_5 -> QQQQPR
      93,	// dsub_3_dsub_5_dsub_7 -> QQQQPR
      93,	// dsub_3_dsub_4 -> QQQQPR
      93,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR
      93,	// dsub_4_dsub_6 -> QQQQPR
      93,	// dsub_4_dsub_5_dsub_6 -> QQQQPR
      93,	// dsub_5_dsub_7 -> QQQQPR
      93,	// dsub_5_dsub_6_dsub_7 -> QQQQPR
      93,	// dsub_5_dsub_6 -> QQQQPR
      93,	// qsub_1_qsub_2 -> QQQQPR
    },
    {	// QQQQPR_with_ssub_0
      94,	// dsub_0 -> QQQQPR_with_ssub_0
      94,	// dsub_1 -> QQQQPR_with_ssub_0
      94,	// dsub_2 -> QQQQPR_with_ssub_0
      94,	// dsub_3 -> QQQQPR_with_ssub_0
      94,	// dsub_4 -> QQQQPR_with_ssub_0
      94,	// dsub_5 -> QQQQPR_with_ssub_0
      94,	// dsub_6 -> QQQQPR_with_ssub_0
      94,	// dsub_7 -> QQQQPR_with_ssub_0
      0,	// gsub_0
      0,	// gsub_1
      94,	// qqsub_0 -> QQQQPR_with_ssub_0
      94,	// qqsub_1 -> QQQQPR_with_ssub_0
      94,	// qsub_0 -> QQQQPR_with_ssub_0
      94,	// qsub_1 -> QQQQPR_with_ssub_0
      94,	// qsub_2 -> QQQQPR_with_ssub_0
      94,	// qsub_3 -> QQQQPR_with_ssub_0
      94,	// ssub_0 -> QQQQPR_with_ssub_0
      94,	// ssub_1 -> QQQQPR_with_ssub_0
      94,	// ssub_2 -> QQQQPR_with_ssub_0
      94,	// ssub_3 -> QQQQPR_with_ssub_0
      95,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      97,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      96,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      94,	// dsub_0_dsub_2 -> QQQQPR_with_ssub_0
      94,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_ssub_0
      94,	// dsub_1_dsub_3 -> QQQQPR_with_ssub_0
      94,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_ssub_0
      94,	// dsub_1_dsub_2 -> QQQQPR_with_ssub_0
      94,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_ssub_0
      94,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_ssub_0
      94,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_ssub_0
      94,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_ssub_0
      94,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_ssub_0
      94,	// dsub_2_dsub_4 -> QQQQPR_with_ssub_0
      94,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_ssub_0
      94,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_ssub_0
      94,	// dsub_3_dsub_5 -> QQQQPR_with_ssub_0
      94,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_ssub_0
      94,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_ssub_0
      94,	// dsub_3_dsub_4 -> QQQQPR_with_ssub_0
      94,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_ssub_0
      94,	// dsub_4_dsub_6 -> QQQQPR_with_ssub_0
      94,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_ssub_0
      94,	// dsub_5_dsub_7 -> QQQQPR_with_ssub_0
      94,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_ssub_0
      94,	// dsub_5_dsub_6 -> QQQQPR_with_ssub_0
      94,	// qsub_1_qsub_2 -> QQQQPR_with_ssub_0
    },
    {	// QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_2 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_3 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_4 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_5 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_7 -> QQQQPR_with_dsub_2_then_ssub_0
      0,	// gsub_0
      0,	// gsub_1
      95,	// qqsub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// qqsub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// qsub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// qsub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// qsub_2 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// qsub_3 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// ssub_2 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// ssub_3 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      97,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      96,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      95,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      95,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_2_then_ssub_0
    },
    {	// QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_2 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_3 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_4 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_5 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_7 -> QQQQPR_with_dsub_5_then_ssub_0
      0,	// gsub_0
      0,	// gsub_1
      96,	// qqsub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// qqsub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// qsub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// qsub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// qsub_2 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// qsub_3 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// ssub_2 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// ssub_3 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      96,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_5_then_ssub_0
    },
    {	// QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_2 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_3 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_4 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_5 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_7 -> QQQQPR_with_dsub_7_then_ssub_0
      0,	// gsub_0
      0,	// gsub_1
      97,	// qqsub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// qqsub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// qsub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// qsub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// qsub_2 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// qsub_3 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// ssub_2 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// ssub_3 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_7_then_ssub_0
    },
    {	// QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_5 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_7 -> QQQQPR_with_dsub_0_in_DPR_8
      0,	// gsub_0
      0,	// gsub_1
      98,	// qqsub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// qqsub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// qsub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// qsub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// qsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// qsub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// ssub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// ssub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      98,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
    },
    {	// QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_2 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_3 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_4 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_5 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_7 -> QQQQPR_with_dsub_2_in_DPR_8
      0,	// gsub_0
      0,	// gsub_1
      99,	// qqsub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// qqsub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// qsub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// qsub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// qsub_2 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// qsub_3 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// ssub_2 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// ssub_3 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      99,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_2_in_DPR_8
    },
    {	// QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_2 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_3 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_4 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_5 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_7 -> QQQQPR_with_dsub_4_in_DPR_8
      0,	// gsub_0
      0,	// gsub_1
      100,	// qqsub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// qqsub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// qsub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// qsub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// qsub_2 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// qsub_3 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// ssub_2 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// ssub_3 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      100,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_4_in_DPR_8
    },
    {	// QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_2 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_3 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_4 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_5 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_7 -> QQQQPR_with_dsub_6_in_DPR_8
      0,	// gsub_0
      0,	// gsub_1
      101,	// qqsub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// qqsub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// qsub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// qsub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// qsub_2 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// qsub_3 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// ssub_2 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// ssub_3 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      101,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_6_in_DPR_8
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 56 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : 0;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &ARMGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 32},  	// SPR
    {1, 16},  	// GPR
    {1, 16},  	// SPR_8
    {1, 15},  	// GPRnopc
    {1, 14},  	// rGPR
    {1, 8},  	// hGPR
    {1, 8},  	// tGPR
    {1, 7},  	// GPRnopc_and_hGPR
    {1, 6},  	// hGPR_and_rGPR
    {1, 6},  	// tcGPR
    {1, 4},  	// tGPR_and_tcGPR
    {1, 2},  	// hGPR_and_tcGPR
    {0, 0},  	// CCR
    {1, 1},  	// GPRsp
    {2, 64},  	// DPR
    {2, 32},  	// DPR_VFP2
    {2, 16},  	// DPR_8
    {2, 14},  	// GPRPair
    {2, 12},  	// GPRPair_with_gsub_1_in_rGPR
    {2, 8},  	// GPRPair_with_gsub_0_in_tGPR
    {2, 6},  	// GPRPair_with_gsub_0_in_hGPR
    {2, 6},  	// GPRPair_with_gsub_0_in_tcGPR
    {2, 6},  	// GPRPair_with_gsub_1_in_tcGPR
    {2, 4},  	// GPRPair_with_gsub_0_in_tGPR_and_tcGPR
    {2, 4},  	// GPRPair_with_gsub_1_in_hGPR_and_rGPR
    {2, 2},  	// GPRPair_with_gsub_1_in_GPRsp
    {2, 2},  	// GPRPair_with_gsub_1_in_hGPR_and_tcGPR
    {4, 64},  	// DPairSpc
    {4, 36},  	// DPairSpc_with_ssub_0
    {4, 32},  	// DPairSpc_with_dsub_2_then_ssub_0
    {4, 20},  	// DPairSpc_with_dsub_0_in_DPR_8
    {4, 16},  	// DPairSpc_with_dsub_2_in_DPR_8
    {4, 64},  	// DPair
    {4, 34},  	// DPair_with_ssub_0
    {4, 64},  	// QPR
    {4, 32},  	// DPair_with_ssub_2
    {4, 18},  	// DPair_with_dsub_0_in_DPR_8
    {4, 32},  	// QPR_VFP2
    {4, 16},  	// DPair_with_dsub_1_in_DPR_8
    {4, 16},  	// QPR_8
    {6, 64},  	// DTriple
    {6, 64},  	// DTripleSpc
    {6, 40},  	// DTripleSpc_with_ssub_0
    {6, 36},  	// DTriple_with_ssub_0
    {6, 62},  	// DTriple_with_dsub_1_dsub_2_in_QPR
    {6, 62},  	// DTriple_with_qsub_0_in_QPR
    {6, 34},  	// DTriple_with_ssub_2
    {6, 36},  	// DTripleSpc_with_dsub_2_then_ssub_0
    {6, 32},  	// DTriple_with_dsub_2_then_ssub_0
    {6, 32},  	// DTripleSpc_with_dsub_4_then_ssub_0
    {6, 24},  	// DTripleSpc_with_dsub_0_in_DPR_8
    {6, 20},  	// DTriple_with_dsub_0_in_DPR_8
    {6, 34},  	// DTriple_with_qsub_0_in_QPR_VFP2
    {6, 34},  	// DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
    {6, 30},  	// DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
    {6, 18},  	// DTriple_with_dsub_1_in_DPR_8
    {6, 30},  	// DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
    {6, 20},  	// DTripleSpc_with_dsub_2_in_DPR_8
    {6, 16},  	// DTriple_with_dsub_2_in_DPR_8
    {6, 16},  	// DTripleSpc_with_dsub_4_in_DPR_8
    {6, 18},  	// DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
    {6, 18},  	// DTriple_with_qsub_0_in_QPR_8
    {6, 14},  	// DTriple_with_dsub_1_dsub_2_in_QPR_8
    {6, 14},  	// DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
    {6, 64},  	// DQuadSpc
    {6, 40},  	// DQuadSpc_with_ssub_0
    {6, 36},  	// DQuadSpc_with_dsub_2_then_ssub_0
    {6, 32},  	// DQuadSpc_with_dsub_4_then_ssub_0
    {6, 24},  	// DQuadSpc_with_dsub_0_in_DPR_8
    {6, 20},  	// DQuadSpc_with_dsub_2_in_DPR_8
    {6, 16},  	// DQuadSpc_with_dsub_4_in_DPR_8
    {8, 64},  	// DQuad
    {8, 38},  	// DQuad_with_ssub_0
    {8, 36},  	// DQuad_with_ssub_2
    {8, 64},  	// QQPR
    {8, 60},  	// DQuad_with_dsub_1_dsub_2_in_QPR
    {8, 34},  	// DQuad_with_dsub_2_then_ssub_0
    {8, 32},  	// DQuad_with_dsub_3_then_ssub_0
    {8, 22},  	// DQuad_with_dsub_0_in_DPR_8
    {8, 36},  	// DQuad_with_qsub_0_in_QPR_VFP2
    {8, 36},  	// DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
    {8, 32},  	// DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
    {8, 20},  	// DQuad_with_dsub_1_in_DPR_8
    {8, 32},  	// DQuad_with_qsub_1_in_QPR_VFP2
    {8, 18},  	// DQuad_with_dsub_2_in_DPR_8
    {8, 28},  	// DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
    {8, 16},  	// DQuad_with_dsub_3_in_DPR_8
    {8, 20},  	// DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
    {8, 20},  	// DQuad_with_qsub_0_in_QPR_8
    {8, 16},  	// DQuad_with_dsub_1_dsub_2_in_QPR_8
    {8, 16},  	// DQuad_with_qsub_1_in_QPR_8
    {8, 12},  	// DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
    {16, 64},  	// QQQQPR
    {16, 44},  	// QQQQPR_with_ssub_0
    {16, 40},  	// QQQQPR_with_dsub_2_then_ssub_0
    {16, 36},  	// QQQQPR_with_dsub_5_then_ssub_0
    {16, 32},  	// QQQQPR_with_dsub_7_then_ssub_0
    {16, 28},  	// QQQQPR_with_dsub_0_in_DPR_8
    {16, 24},  	// QQQQPR_with_dsub_2_in_DPR_8
    {16, 20},  	// QQQQPR_with_dsub_4_in_DPR_8
    {16, 16},  	// QQQQPR_with_dsub_6_in_DPR_8
    {0, 0} };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned ARMGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 73 && "invalid register unit");
  static const uint8_t RUWeightTable[] = {
    0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 };
  return RUWeightTable[RegUnit];
}


// Get the number of dimensions of register pressure.
unsigned ARMGenRegisterInfo::getNumRegPressureSets() const {
  return 11;
}

// Get the name of this register unit pressure set.
const char *ARMGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "GPR",
    "hGPR",
    "DPR",
    "DTripleSpc_with_dsub_0_in_DPR_8",
    "QQQQPR_with_ssub_0",
    "hGPR+tcGPR",
    "tGPR+tcGPR",
    "tGPR+GPRPair_with_gsub_0_in_tcGPR",
    "tGPR+GPRPair_with_gsub_1_in_tcGPR",
    "hGPR_and_tcGPR+GPRPair_with_gsub_1_in_GPRsp",
    "GPRPair_with_gsub_0_in_tcGPR+GPRPair_with_gsub_1_in_tcGPR",
    0 };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned ARMGenRegisterInfo::
getRegPressureSetLimit(unsigned Idx) const {
  static const unsigned PressureLimitTable[] = {
    16,  	// 0: GPR
    8,  	// 1: hGPR
    64,  	// 2: DPR
    24,  	// 3: DTripleSpc_with_dsub_0_in_DPR_8
    44,  	// 4: QQQQPR_with_ssub_0
    12,  	// 5: hGPR+tcGPR
    10,  	// 6: tGPR+tcGPR
    10,  	// 7: tGPR+GPRPair_with_gsub_0_in_tcGPR
    10,  	// 8: tGPR+GPRPair_with_gsub_1_in_tcGPR
    3,  	// 9: hGPR_and_tcGPR+GPRPair_with_gsub_1_in_GPRsp
    8,  	// 10: GPRPair_with_gsub_0_in_tcGPR+GPRPair_with_gsub_1_in_tcGPR
    0 };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
    2,  4,  -1,  	// #0 SPR
    0,  -1,  	// #3 GPR
    2,  3,  4,  -1,  	// #5 SPR_8
    0,  -1,  	// #9 GPRnopc
    0,  -1,  	// #11 rGPR
    0,  1,  5,  -1,  	// #13 hGPR
    0,  6,  7,  8,  -1,  	// #17 tGPR
    0,  1,  5,  -1,  	// #22 GPRnopc_and_hGPR
    0,  1,  5,  -1,  	// #26 hGPR_and_rGPR
    0,  5,  6,  10,  -1,  	// #30 tcGPR
    0,  5,  6,  7,  8,  10,  -1,  	// #35 tGPR_and_tcGPR
    0,  1,  5,  6,  9,  10,  -1,  	// #42 hGPR_and_tcGPR
    -1,  	// #49 CCR
    0,  1,  5,  7,  9,  10,  -1,  	// #50 GPRsp
    2,  -1,  	// #57 DPR
    2,  4,  -1,  	// #59 DPR_VFP2
    2,  3,  4,  -1,  	// #62 DPR_8
    0,  -1,  	// #66 GPRPair
    0,  -1,  	// #68 GPRPair_with_gsub_1_in_rGPR
    0,  6,  7,  8,  -1,  	// #70 GPRPair_with_gsub_0_in_tGPR
    0,  1,  5,  -1,  	// #75 GPRPair_with_gsub_0_in_hGPR
    0,  5,  7,  10,  -1,  	// #79 GPRPair_with_gsub_0_in_tcGPR
    0,  5,  8,  10,  -1,  	// #84 GPRPair_with_gsub_1_in_tcGPR
    0,  5,  6,  7,  8,  10,  -1,  	// #89 GPRPair_with_gsub_0_in_tGPR_and_tcGPR
    0,  1,  5,  -1,  	// #96 GPRPair_with_gsub_1_in_hGPR_and_rGPR
    0,  1,  5,  7,  9,  10,  -1,  	// #100 GPRPair_with_gsub_1_in_GPRsp
    0,  1,  5,  8,  10,  -1,  	// #107 GPRPair_with_gsub_1_in_hGPR_and_tcGPR
    2,  -1,  	// #113 DPairSpc
    2,  4,  -1,  	// #115 DPairSpc_with_ssub_0
    2,  4,  -1,  	// #118 DPairSpc_with_dsub_2_then_ssub_0
    2,  3,  4,  -1,  	// #121 DPairSpc_with_dsub_0_in_DPR_8
    2,  3,  4,  -1,  	// #125 DPairSpc_with_dsub_2_in_DPR_8
    2,  -1,  	// #129 DPair
    2,  4,  -1,  	// #131 DPair_with_ssub_0
    2,  -1,  	// #134 QPR
    2,  4,  -1,  	// #136 DPair_with_ssub_2
    2,  3,  4,  -1,  	// #139 DPair_with_dsub_0_in_DPR_8
    2,  4,  -1,  	// #143 QPR_VFP2
    2,  3,  4,  -1,  	// #146 DPair_with_dsub_1_in_DPR_8
    2,  3,  4,  -1,  	// #150 QPR_8
    2,  -1,  	// #154 DTriple
    2,  -1,  	// #156 DTripleSpc
    2,  4,  -1,  	// #158 DTripleSpc_with_ssub_0
    2,  4,  -1,  	// #161 DTriple_with_ssub_0
    2,  -1,  	// #164 DTriple_with_dsub_1_dsub_2_in_QPR
    2,  -1,  	// #166 DTriple_with_qsub_0_in_QPR
    2,  4,  -1,  	// #168 DTriple_with_ssub_2
    2,  4,  -1,  	// #171 DTripleSpc_with_dsub_2_then_ssub_0
    2,  4,  -1,  	// #174 DTriple_with_dsub_2_then_ssub_0
    2,  4,  -1,  	// #177 DTripleSpc_with_dsub_4_then_ssub_0
    2,  3,  4,  -1,  	// #180 DTripleSpc_with_dsub_0_in_DPR_8
    2,  3,  4,  -1,  	// #184 DTriple_with_dsub_0_in_DPR_8
    2,  4,  -1,  	// #188 DTriple_with_qsub_0_in_QPR_VFP2
    2,  4,  -1,  	// #191 DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
    2,  4,  -1,  	// #194 DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
    2,  3,  4,  -1,  	// #197 DTriple_with_dsub_1_in_DPR_8
    2,  4,  -1,  	// #201 DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
    2,  3,  4,  -1,  	// #204 DTripleSpc_with_dsub_2_in_DPR_8
    2,  3,  4,  -1,  	// #208 DTriple_with_dsub_2_in_DPR_8
    2,  3,  4,  -1,  	// #212 DTripleSpc_with_dsub_4_in_DPR_8
    2,  3,  4,  -1,  	// #216 DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
    2,  3,  4,  -1,  	// #220 DTriple_with_qsub_0_in_QPR_8
    2,  3,  4,  -1,  	// #224 DTriple_with_dsub_1_dsub_2_in_QPR_8
    2,  3,  4,  -1,  	// #228 DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
    2,  -1,  	// #232 DQuadSpc
    2,  4,  -1,  	// #234 DQuadSpc_with_ssub_0
    2,  4,  -1,  	// #237 DQuadSpc_with_dsub_2_then_ssub_0
    2,  4,  -1,  	// #240 DQuadSpc_with_dsub_4_then_ssub_0
    2,  3,  4,  -1,  	// #243 DQuadSpc_with_dsub_0_in_DPR_8
    2,  3,  4,  -1,  	// #247 DQuadSpc_with_dsub_2_in_DPR_8
    2,  3,  4,  -1,  	// #251 DQuadSpc_with_dsub_4_in_DPR_8
    2,  -1,  	// #255 DQuad
    2,  4,  -1,  	// #257 DQuad_with_ssub_0
    2,  4,  -1,  	// #260 DQuad_with_ssub_2
    2,  -1,  	// #263 QQPR
    2,  -1,  	// #265 DQuad_with_dsub_1_dsub_2_in_QPR
    2,  4,  -1,  	// #267 DQuad_with_dsub_2_then_ssub_0
    2,  4,  -1,  	// #270 DQuad_with_dsub_3_then_ssub_0
    2,  3,  4,  -1,  	// #273 DQuad_with_dsub_0_in_DPR_8
    2,  4,  -1,  	// #277 DQuad_with_qsub_0_in_QPR_VFP2
    2,  4,  -1,  	// #280 DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
    2,  4,  -1,  	// #283 DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
    2,  3,  4,  -1,  	// #286 DQuad_with_dsub_1_in_DPR_8
    2,  4,  -1,  	// #290 DQuad_with_qsub_1_in_QPR_VFP2
    2,  3,  4,  -1,  	// #293 DQuad_with_dsub_2_in_DPR_8
    2,  4,  -1,  	// #297 DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
    2,  3,  4,  -1,  	// #300 DQuad_with_dsub_3_in_DPR_8
    2,  3,  4,  -1,  	// #304 DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
    2,  3,  4,  -1,  	// #308 DQuad_with_qsub_0_in_QPR_8
    2,  3,  4,  -1,  	// #312 DQuad_with_dsub_1_dsub_2_in_QPR_8
    2,  3,  4,  -1,  	// #316 DQuad_with_qsub_1_in_QPR_8
    2,  3,  4,  -1,  	// #320 DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
    2,  -1,  	// #324 QQQQPR
    2,  4,  -1,  	// #326 QQQQPR_with_ssub_0
    2,  4,  -1,  	// #329 QQQQPR_with_dsub_2_then_ssub_0
    2,  4,  -1,  	// #332 QQQQPR_with_dsub_5_then_ssub_0
    2,  4,  -1,  	// #335 QQQQPR_with_dsub_7_then_ssub_0
    2,  4,  -1,  	// #338 QQQQPR_with_dsub_0_in_DPR_8
    2,  3,  4,  -1,  	// #341 QQQQPR_with_dsub_2_in_DPR_8
    2,  3,  4,  -1,  	// #345 QQQQPR_with_dsub_4_in_DPR_8
    2,  3,  4,  -1,  	// #349 QQQQPR_with_dsub_6_in_DPR_8
    0,  1,  5,  6,  8,  9,  10,  -1,  	// #353 inferred~GPR~hGPR~hGPR+tcGPR~tGPR+tcGPR~tGPR+GPRPair_with_gsub_1_in_tcGPR~hGPR_and_tcGPR+GPRPair_with_gsub_1_in_GPRsp~GPRPair_with_gsub_0_in_tcGPR+GPRPair_with_gsub_1_in_tcGPR
    0,  1,  5,  6,  7,  9,  10,  -1,  	// #361 inferred~GPR~hGPR~hGPR+tcGPR~tGPR+tcGPR~tGPR+GPRPair_with_gsub_0_in_tcGPR~hGPR_and_tcGPR+GPRPair_with_gsub_1_in_GPRsp~GPRPair_with_gsub_0_in_tcGPR+GPRPair_with_gsub_1_in_tcGPR
    -1 };

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* ARMGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const unsigned RCSetStartTable[] = {
    0,3,5,9,11,13,17,22,26,30,35,42,49,50,57,59,62,66,68,70,75,79,84,89,96,100,107,113,115,118,121,125,129,131,134,136,139,143,146,150,154,156,158,161,164,166,168,171,174,177,180,184,188,191,194,197,201,204,208,212,216,220,224,228,232,234,237,240,243,247,251,255,257,260,263,265,267,270,273,277,280,283,286,290,293,297,300,304,308,312,316,320,324,326,329,332,335,338,341,345,349,0 };
  unsigned SetListStart = RCSetStartTable[RC->getID()];
  return &RCSetsTable[SetListStart];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* ARMGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 73 && "invalid register unit");
  static const unsigned RUSetStartTable[] = {
    49,49,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,57,57,57,57,57,57,57,57,57,49,49,49,49,13,49,49,13,35,35,35,35,17,17,17,17,107,353,13,13,361,50,49,0 };
  unsigned SetListStart = RUSetStartTable[RegUnit];
  return &RCSetsTable[SetListStart];
}

extern const MCRegisterDesc ARMRegDesc[];
extern const MCPhysReg ARMRegDiffLists[];
extern const char ARMRegStrings[];
extern const uint16_t ARMRegUnitRoots[][2];
extern const uint16_t ARMSubRegIdxLists[];
extern const uint16_t ARMRegEncodingTable[];
// ARM Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair ARMDwarfFlavour0Dwarf2L[];
extern const unsigned ARMDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair ARMEHFlavour0Dwarf2L[];
extern const unsigned ARMEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair ARMDwarfFlavour0L2Dwarf[];
extern const unsigned ARMDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair ARMEHFlavour0L2Dwarf[];
extern const unsigned ARMEHFlavour0L2DwarfSize;

ARMGenRegisterInfo::
ARMGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(ARMRegInfoDesc, RegisterClasses, RegisterClasses+101,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable) {
  InitMCRegisterInfo(ARMRegDesc, 285, RA, PC,
                     ARMMCRegisterClasses, 101,
                     ARMRegUnitRoots,
                     73,
                     ARMRegDiffLists,
                     ARMRegStrings,
                     ARMSubRegIdxLists,
                     57,
                     ARMRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(ARMDwarfFlavour0Dwarf2L, ARMDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(ARMEHFlavour0Dwarf2L, ARMEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(ARMDwarfFlavour0L2Dwarf, ARMDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(ARMEHFlavour0L2Dwarf, ARMEHFlavour0L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg CSR_AAPCS_SaveList[] = { ARM::LR, ARM::R11, ARM::R10, ARM::R9, ARM::R8, ARM::R7, ARM::R6, ARM::R5, ARM::R4, ARM::D15, ARM::D14, ARM::D13, ARM::D12, ARM::D11, ARM::D10, ARM::D9, ARM::D8, 0 };
static const uint32_t CSR_AAPCS_RegMask[] = { 0x0007f800, 0x000f0100, 0xfe0000ff, 0x01f801ff, 0x1000e000, 0x03f00780, 0x003c0000, 0x0000c000, 0x00180070, };
static const MCPhysReg CSR_GHC_SaveList[] = { 0 };
static const uint32_t CSR_GHC_RegMask[] = { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_NoRegs_SaveList[] = { 0 };
static const uint32_t CSR_NoRegs_RegMask[] = { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_iOS_SaveList[] = { ARM::LR, ARM::R7, ARM::R6, ARM::R5, ARM::R4, ARM::R11, ARM::R10, ARM::R8, ARM::D15, ARM::D14, ARM::D13, ARM::D12, ARM::D11, ARM::D10, ARM::D9, ARM::D8, 0 };
static const uint32_t CSR_iOS_RegMask[] = { 0x0007f800, 0x000f0100, 0xfe0000df, 0x01f801ff, 0x1000e000, 0x03f00580, 0x003c0000, 0x0000c000, 0x00180070, };


} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

