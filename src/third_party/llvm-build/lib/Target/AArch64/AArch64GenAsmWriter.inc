/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AArch64InstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1266U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1259U,	// BUNDLE
    1276U,	// LIFETIME_START
    1246U,	// LIFETIME_END
    2932U,	// ADCSwww
    2932U,	// ADCSxxx
    2269U,	// ADCwww
    2269U,	// ADCxxx
    536873856U,	// ADDSwww_asr
    536873856U,	// ADDSwww_lsl
    536873856U,	// ADDSwww_lsr
    536873856U,	// ADDSwww_sxtb
    536873856U,	// ADDSwww_sxth
    536873856U,	// ADDSwww_sxtw
    536873856U,	// ADDSwww_sxtx
    536873856U,	// ADDSwww_uxtb
    536873856U,	// ADDSwww_uxth
    536873856U,	// ADDSwww_uxtw
    536873856U,	// ADDSwww_uxtx
    536873856U,	// ADDSxxw_sxtb
    536873856U,	// ADDSxxw_sxth
    536873856U,	// ADDSxxw_sxtw
    536873856U,	// ADDSxxw_uxtb
    536873856U,	// ADDSxxw_uxth
    536873856U,	// ADDSxxw_uxtw
    536873856U,	// ADDSxxx_asr
    536873856U,	// ADDSxxx_lsl
    536873856U,	// ADDSxxx_lsr
    536873856U,	// ADDSxxx_sxtx
    536873856U,	// ADDSxxx_uxtx
    16780160U,	// ADDwwi_lsl0_S
    134353U,	// ADDwwi_lsl0_cmp
    16779518U,	// ADDwwi_lsl0_s
    33557376U,	// ADDwwi_lsl12_S
    265425U,	// ADDwwi_lsl12_cmp
    33556734U,	// ADDwwi_lsl12_s
    536873214U,	// ADDwww_asr
    536873214U,	// ADDwww_lsl
    536873214U,	// ADDwww_lsr
    536873214U,	// ADDwww_sxtb
    536873214U,	// ADDwww_sxth
    536873214U,	// ADDwww_sxtw
    536873214U,	// ADDwww_sxtx
    536873214U,	// ADDwww_uxtb
    536873214U,	// ADDwww_uxth
    536873214U,	// ADDwww_uxtw
    536873214U,	// ADDwww_uxtx
    16780160U,	// ADDxxi_lsl0_S
    134353U,	// ADDxxi_lsl0_cmp
    16779518U,	// ADDxxi_lsl0_s
    33557376U,	// ADDxxi_lsl12_S
    265425U,	// ADDxxi_lsl12_cmp
    33556734U,	// ADDxxi_lsl12_s
    536873214U,	// ADDxxw_sxtb
    536873214U,	// ADDxxw_sxth
    536873214U,	// ADDxxw_sxtw
    536873214U,	// ADDxxw_uxtb
    536873214U,	// ADDxxw_uxth
    536873214U,	// ADDxxw_uxtw
    536873214U,	// ADDxxx_asr
    536873214U,	// ADDxxx_lsl
    536873214U,	// ADDxxx_lsr
    536873214U,	// ADDxxx_sxtx
    536873214U,	// ADDxxx_uxtx
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    395955U,	// ADRPxi
    527082U,	// ADRxi
    50334598U,	// ANDSwwi
    536873862U,	// ANDSwww_asr
    536873862U,	// ANDSwww_lsl
    536873862U,	// ANDSwww_lsr
    536873862U,	// ANDSwww_ror
    67111814U,	// ANDSxxi
    536873862U,	// ANDSxxx_asr
    536873862U,	// ANDSxxx_lsl
    536873862U,	// ANDSxxx_lsr
    536873862U,	// ANDSxxx_ror
    50333970U,	// ANDwwi
    536873234U,	// ANDwww_asr
    536873234U,	// ANDwww_lsl
    536873234U,	// ANDwww_lsr
    536873234U,	// ANDwww_ror
    67111186U,	// ANDxxi
    536873234U,	// ANDxxx_asr
    536873234U,	// ANDxxx_lsl
    536873234U,	// ANDxxx_lsr
    536873234U,	// ANDxxx_ror
    2830U,	// ASRVwww
    2830U,	// ASRVxxx
    2830U,	// ASRwwi
    2830U,	// ASRxxi
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    5051U,	// ATix
    84543965U,	// BFIwwii
    101321181U,	// BFIxxii
    654969404U,	// BFMwwii
    654969404U,	// BFMxxii
    654969372U,	// BFXILwwii
    654969372U,	// BFXILxxii
    536873850U,	// BICSwww_asr
    536873850U,	// BICSwww_lsl
    536873850U,	// BICSwww_lsr
    536873850U,	// BICSwww_ror
    536873850U,	// BICSxxx_asr
    536873850U,	// BICSxxx_lsl
    536873850U,	// BICSxxx_lsr
    536873850U,	// BICSxxx_ror
    536873186U,	// BICwww_asr
    536873186U,	// BICwww_lsl
    536873186U,	// BICwww_lsr
    536873186U,	// BICwww_ror
    536873186U,	// BICxxx_asr
    536873186U,	// BICxxx_lsl
    536873186U,	// BICxxx_lsr
    536873186U,	// BICxxx_ror
    35572U,	// BLRx
    6649U,	// BLimm
    35306U,	// BRKi
    35558U,	// BRx
    9435U,	// Bcc
    6193U,	// Bimm
    789687U,	// CBNZw
    789687U,	// CBNZx
    789658U,	// CBZw
    789658U,	// CBZx
    536873586U,	// CCMNwi
    536873586U,	// CCMNww
    536873586U,	// CCMNxi
    536873586U,	// CCMNxx
    536873627U,	// CCMPwi
    536873627U,	// CCMPww
    536873627U,	// CCMPxi
    536873627U,	// CCMPxx
    35967U,	// CLREXi
    2100108U,	// CLSww
    2100108U,	// CLSxx
    2100402U,	// CLZww
    2100402U,	// CLZxx
    134220403U,	// CMNww_asr
    150997619U,	// CMNww_lsl
    167774835U,	// CMNww_lsr
    184552051U,	// CMNww_sxtb
    201329267U,	// CMNww_sxth
    218106483U,	// CMNww_sxtw
    234883699U,	// CMNww_sxtx
    251660915U,	// CMNww_uxtb
    268438131U,	// CMNww_uxth
    285215347U,	// CMNww_uxtw
    301992563U,	// CMNww_uxtx
    184552051U,	// CMNxw_sxtb
    201329267U,	// CMNxw_sxth
    218106483U,	// CMNxw_sxtw
    251660915U,	// CMNxw_uxtb
    268438131U,	// CMNxw_uxth
    285215347U,	// CMNxw_uxtw
    134220403U,	// CMNxx_asr
    150997619U,	// CMNxx_lsl
    167774835U,	// CMNxx_lsr
    234883699U,	// CMNxx_sxtx
    301992563U,	// CMNxx_uxtx
    134220444U,	// CMPww_asr
    150997660U,	// CMPww_lsl
    167774876U,	// CMPww_lsr
    184552092U,	// CMPww_sxtb
    201329308U,	// CMPww_sxth
    218106524U,	// CMPww_sxtw
    234883740U,	// CMPww_sxtx
    251660956U,	// CMPww_uxtb
    268438172U,	// CMPww_uxth
    285215388U,	// CMPww_uxtw
    301992604U,	// CMPww_uxtx
    184552092U,	// CMPxw_sxtb
    201329308U,	// CMPxw_sxth
    218106524U,	// CMPxw_sxtw
    251660956U,	// CMPxw_uxtb
    268438172U,	// CMPxw_uxth
    285215388U,	// CMPxw_uxtw
    134220444U,	// CMPxx_asr
    150997660U,	// CMPxx_lsl
    167774876U,	// CMPxx_lsr
    234883740U,	// CMPxx_sxtx
    301992604U,	// CMPxx_uxtx
    0U,	// CONSTPOOL_ENTRY
    2092U,	// CRC32B_www
    2100U,	// CRC32CB_www
    2377U,	// CRC32CH_www
    3131U,	// CRC32CW_www
    3190U,	// CRC32CX_wwx
    2369U,	// CRC32H_www
    3123U,	// CRC32W_www
    3176U,	// CRC32X_wwx
    536873494U,	// CSELwwwc
    536873494U,	// CSELxxxc
    536873196U,	// CSINCwwwc
    536873196U,	// CSINCxxxc
    536874022U,	// CSINVwwwc
    536874022U,	// CSINVxxxc
    536873274U,	// CSNEGwwwc
    536873274U,	// CSNEGxxxc
    34817U,	// DCPS1i
    34831U,	// DCPS2i
    34838U,	// DCPS3i
    10462U,	// DCix
    12349U,	// DMBi
    1291U,	// DRPS
    12438U,	// DSBi
    536873592U,	// EONwww_asr
    536873592U,	// EONwww_lsl
    536873592U,	// EONwww_lsr
    536873592U,	// EONwww_ror
    536873592U,	// EONxxx_asr
    536873592U,	// EONxxx_lsl
    536873592U,	// EONxxx_lsr
    536873592U,	// EONxxx_ror
    50334463U,	// EORwwi
    536873727U,	// EORwww_asr
    536873727U,	// EORwww_lsl
    536873727U,	// EORwww_lsr
    536873727U,	// EORwww_ror
    67111679U,	// EORxxi
    536873727U,	// EORxxx_asr
    536873727U,	// EORxxx_lsl
    536873727U,	// EORxxx_lsr
    536873727U,	// EORxxx_ror
    1296U,	// ERET
    536873774U,	// EXTRwwwi
    536873774U,	// EXTRxxxi
    0U,	// F128CSEL
    2100066U,	// FABSdd
    2100066U,	// FABSss
    2301U,	// FADDddd
    2301U,	// FADDsss
    536873239U,	// FCCMPEdd
    536873239U,	// FCCMPEss
    536873626U,	// FCCMPdd
    536873626U,	// FCCMPss
    2099873U,	// FCMPdd_quiet
    2099487U,	// FCMPdd_sig
    920225U,	// FCMPdi_quiet
    919839U,	// FCMPdi_sig
    920225U,	// FCMPsi_quiet
    919839U,	// FCMPsi_sig
    2099873U,	// FCMPss_quiet
    2099487U,	// FCMPss_sig
    536873493U,	// FCSELdddc
    536873493U,	// FCSELsssc
    2100058U,	// FCVTASwd
    2100058U,	// FCVTASws
    2100058U,	// FCVTASxd
    2100058U,	// FCVTASxs
    2100199U,	// FCVTAUwd
    2100199U,	// FCVTAUws
    2100199U,	// FCVTAUxd
    2100199U,	// FCVTAUxs
    2100113U,	// FCVTMSwd
    2100113U,	// FCVTMSws
    2100113U,	// FCVTMSxd
    2100113U,	// FCVTMSxs
    2100207U,	// FCVTMUwd
    2100207U,	// FCVTMUws
    2100207U,	// FCVTMUxd
    2100207U,	// FCVTMUxs
    2100121U,	// FCVTNSwd
    2100121U,	// FCVTNSws
    2100121U,	// FCVTNSxd
    2100121U,	// FCVTNSxs
    2100215U,	// FCVTNUwd
    2100215U,	// FCVTNUws
    2100215U,	// FCVTNUxd
    2100215U,	// FCVTNUxs
    2100129U,	// FCVTPSwd
    2100129U,	// FCVTPSws
    2100129U,	// FCVTPSxd
    2100129U,	// FCVTPSxs
    2100223U,	// FCVTPUwd
    2100223U,	// FCVTPUws
    2100223U,	// FCVTPUxd
    2100223U,	// FCVTPUxs
    2100147U,	// FCVTZSwd
    318770099U,	// FCVTZSwdi
    2100147U,	// FCVTZSws
    318770099U,	// FCVTZSwsi
    2100147U,	// FCVTZSxd
    318770099U,	// FCVTZSxdi
    2100147U,	// FCVTZSxs
    318770099U,	// FCVTZSxsi
    2100231U,	// FCVTZUwd
    318770183U,	// FCVTZUwdi
    2100231U,	// FCVTZUws
    318770183U,	// FCVTZUwsi
    2100231U,	// FCVTZUxd
    318770183U,	// FCVTZUxdi
    2100231U,	// FCVTZUxs
    318770183U,	// FCVTZUxsi
    2100193U,	// FCVTdh
    2100193U,	// FCVTds
    2100193U,	// FCVThd
    2100193U,	// FCVThs
    2100193U,	// FCVTsd
    2100193U,	// FCVTsh
    3092U,	// FDIVddd
    3092U,	// FDIVsss
    536873219U,	// FMADDdddd
    536873219U,	// FMADDssss
    2645U,	// FMAXNMddd
    2645U,	// FMAXNMsss
    3184U,	// FMAXddd
    3184U,	// FMAXsss
    2637U,	// FMINNMddd
    2637U,	// FMINNMsss
    2668U,	// FMINddd
    2668U,	// FMINsss
    2100269U,	// FMOVdd
    1051693U,	// FMOVdi
    2100269U,	// FMOVdx
    1051693U,	// FMOVsi
    2100269U,	// FMOVss
    2100269U,	// FMOVsw
    68653U,	// FMOVvx
    2100269U,	// FMOVws
    2100269U,	// FMOVxd
    4197421U,	// FMOVxv
    536873161U,	// FMSUBdddd
    536873161U,	// FMSUBssss
    2606U,	// FMULddd
    2606U,	// FMULsss
    2099508U,	// FNEGdd
    2099508U,	// FNEGss
    536873226U,	// FNMADDdddd
    536873226U,	// FNMADDssss
    536873168U,	// FNMSUBdddd
    536873168U,	// FNMSUBssss
    2612U,	// FNMULddd
    2612U,	// FNMULsss
    2099236U,	// FRINTAdd
    2099236U,	// FRINTAss
    2099682U,	// FRINTIdd
    2099682U,	// FRINTIss
    2099805U,	// FRINTMdd
    2099805U,	// FRINTMss
    2099842U,	// FRINTNdd
    2099842U,	// FRINTNss
    2099897U,	// FRINTPdd
    2099897U,	// FRINTPss
    2100370U,	// FRINTXdd
    2100370U,	// FRINTXss
    2100419U,	// FRINTZdd
    2100419U,	// FRINTZss
    2100181U,	// FSQRTdd
    2100181U,	// FSQRTss
    2243U,	// FSUBddd
    2243U,	// FSUBsss
    35791U,	// HINTi
    35786U,	// HLTi
    35059U,	// HVCi
    47331U,	// ICi
    2111715U,	// ICix
    16539U,	// ISBi
    6391874U,	// LDAR_byte
    6392544U,	// LDAR_dword
    6392160U,	// LDAR_hword
    6392544U,	// LDAR_word
    1082133190U,	// LDAXP_dword
    1082133190U,	// LDAXP_word
    6391928U,	// LDAXR_byte
    6392640U,	// LDAXR_dword
    6392214U,	// LDAXR_hword
    6392640U,	// LDAXR_word
    545262660U,	// LDPSWx
    1736444996U,	// LDPSWx_PostInd
    662703172U,	// LDPSWx_PreInd
    335644832U,	// LDRSBw
    11241632U,	// LDRSBw_PostInd
    353077408U,	// LDRSBw_PreInd
    369199279U,	// LDRSBw_U
    536971424U,	// LDRSBw_Wm_RegOffset
    536971424U,	// LDRSBw_Xm_RegOffset
    335644832U,	// LDRSBx
    11241632U,	// LDRSBx_PostInd
    353077408U,	// LDRSBx_PreInd
    369199279U,	// LDRSBx_U
    536971424U,	// LDRSBx_Wm_RegOffset
    536971424U,	// LDRSBx_Xm_RegOffset
    385976756U,	// LDRSHw
    11241908U,	// LDRSHw_PostInd
    353077684U,	// LDRSHw_PreInd
    369199555U,	// LDRSHw_U
    536971700U,	// LDRSHw_Wm_RegOffset
    536971700U,	// LDRSHw_Xm_RegOffset
    385976756U,	// LDRSHx
    11241908U,	// LDRSHx_PostInd
    353077684U,	// LDRSHx_PreInd
    369199555U,	// LDRSHx_U
    536971700U,	// LDRSHx_Wm_RegOffset
    536971700U,	// LDRSHx_Xm_RegOffset
    402754635U,	// LDRSWx
    11242571U,	// LDRSWx_PostInd
    353078347U,	// LDRSWx_PreInd
    536972363U,	// LDRSWx_Wm_RegOffset
    536972363U,	// LDRSWx_Xm_RegOffset
    789579U,	// LDRSWx_lit
    789231U,	// LDRd_lit
    789231U,	// LDRq_lit
    789231U,	// LDRs_lit
    789231U,	// LDRw_lit
    789231U,	// LDRx_lit
    369199271U,	// LDTRSBw
    369199271U,	// LDTRSBx
    369199547U,	// LDTRSHw
    369199547U,	// LDTRSHx
    369200210U,	// LDTRSWx
    369200218U,	// LDURSWx
    1082133197U,	// LDXP_dword
    1082133197U,	// LDXP_word
    6391936U,	// LDXR_byte
    6392647U,	// LDXR_dword
    6392222U,	// LDXR_hword
    6392647U,	// LDXR_word
    385976679U,	// LS16_LDR
    369199496U,	// LS16_LDUR
    11241831U,	// LS16_PostInd_LDR
    11258235U,	// LS16_PostInd_STR
    353077607U,	// LS16_PreInd_LDR
    353094011U,	// LS16_PreInd_STR
    385976699U,	// LS16_STR
    369199503U,	// LS16_STUR
    369199476U,	// LS16_UnPriv_LDR
    369199489U,	// LS16_UnPriv_STR
    536971623U,	// LS16_Wm_RegOffset_LDR
    536971643U,	// LS16_Wm_RegOffset_STR
    536971623U,	// LS16_Xm_RegOffset_LDR
    536971643U,	// LS16_Xm_RegOffset_STR
    402754287U,	// LS32_LDR
    369199924U,	// LS32_LDUR
    11242223U,	// LS32_PostInd_LDR
    11258659U,	// LS32_PostInd_STR
    353077999U,	// LS32_PreInd_LDR
    353094435U,	// LS32_PreInd_STR
    402754339U,	// LS32_STR
    369199930U,	// LS32_STUR
    369199901U,	// LS32_UnPriv_LDR
    369199912U,	// LS32_UnPriv_STR
    536972015U,	// LS32_Wm_RegOffset_LDR
    536972067U,	// LS32_Wm_RegOffset_STR
    536972015U,	// LS32_Xm_RegOffset_LDR
    536972067U,	// LS32_Xm_RegOffset_STR
    419531503U,	// LS64_LDR
    369199924U,	// LS64_LDUR
    11242223U,	// LS64_PostInd_LDR
    11258659U,	// LS64_PostInd_STR
    353077999U,	// LS64_PreInd_LDR
    353094435U,	// LS64_PreInd_STR
    419531555U,	// LS64_STR
    369199930U,	// LS64_STUR
    369199901U,	// LS64_UnPriv_LDR
    369199912U,	// LS64_UnPriv_STR
    536972015U,	// LS64_Wm_RegOffset_LDR
    536972067U,	// LS64_Wm_RegOffset_STR
    536972015U,	// LS64_Xm_RegOffset_LDR
    536972067U,	// LS64_Xm_RegOffset_STR
    335644745U,	// LS8_LDR
    369199210U,	// LS8_LDUR
    11241545U,	// LS8_PostInd_LDR
    11257949U,	// LS8_PostInd_STR
    353077321U,	// LS8_PreInd_LDR
    353093725U,	// LS8_PreInd_STR
    335644765U,	// LS8_STR
    369199217U,	// LS8_STUR
    369199190U,	// LS8_UnPriv_LDR
    369199203U,	// LS8_UnPriv_STR
    536971337U,	// LS8_Wm_RegOffset_LDR
    536971357U,	// LS8_Wm_RegOffset_STR
    536971337U,	// LS8_Xm_RegOffset_LDR
    536971357U,	// LS8_Xm_RegOffset_STR
    436308719U,	// LSFP128_LDR
    369199924U,	// LSFP128_LDUR
    11242223U,	// LSFP128_PostInd_LDR
    11258659U,	// LSFP128_PostInd_STR
    353077999U,	// LSFP128_PreInd_LDR
    353094435U,	// LSFP128_PreInd_STR
    436308771U,	// LSFP128_STR
    369199930U,	// LSFP128_STUR
    536972015U,	// LSFP128_Wm_RegOffset_LDR
    536972067U,	// LSFP128_Wm_RegOffset_STR
    536972015U,	// LSFP128_Xm_RegOffset_LDR
    536972067U,	// LSFP128_Xm_RegOffset_STR
    385977071U,	// LSFP16_LDR
    369199924U,	// LSFP16_LDUR
    11242223U,	// LSFP16_PostInd_LDR
    11258659U,	// LSFP16_PostInd_STR
    353077999U,	// LSFP16_PreInd_LDR
    353094435U,	// LSFP16_PreInd_STR
    385977123U,	// LSFP16_STR
    369199930U,	// LSFP16_STUR
    536972015U,	// LSFP16_Wm_RegOffset_LDR
    536972067U,	// LSFP16_Wm_RegOffset_STR
    536972015U,	// LSFP16_Xm_RegOffset_LDR
    536972067U,	// LSFP16_Xm_RegOffset_STR
    402754287U,	// LSFP32_LDR
    369199924U,	// LSFP32_LDUR
    11242223U,	// LSFP32_PostInd_LDR
    11258659U,	// LSFP32_PostInd_STR
    353077999U,	// LSFP32_PreInd_LDR
    353094435U,	// LSFP32_PreInd_STR
    402754339U,	// LSFP32_STR
    369199930U,	// LSFP32_STUR
    536972015U,	// LSFP32_Wm_RegOffset_LDR
    536972067U,	// LSFP32_Wm_RegOffset_STR
    536972015U,	// LSFP32_Xm_RegOffset_LDR
    536972067U,	// LSFP32_Xm_RegOffset_STR
    419531503U,	// LSFP64_LDR
    369199924U,	// LSFP64_LDUR
    11242223U,	// LSFP64_PostInd_LDR
    11258659U,	// LSFP64_PostInd_STR
    353077999U,	// LSFP64_PreInd_LDR
    353094435U,	// LSFP64_PreInd_STR
    419531555U,	// LSFP64_STR
    369199930U,	// LSFP64_STUR
    536972015U,	// LSFP64_Wm_RegOffset_LDR
    536972067U,	// LSFP64_Wm_RegOffset_STR
    536972015U,	// LSFP64_Xm_RegOffset_LDR
    536972067U,	// LSFP64_Xm_RegOffset_STR
    335645423U,	// LSFP8_LDR
    369199924U,	// LSFP8_LDUR
    11242223U,	// LSFP8_PostInd_LDR
    11258659U,	// LSFP8_PostInd_STR
    353077999U,	// LSFP8_PreInd_LDR
    353094435U,	// LSFP8_PreInd_STR
    335645475U,	// LSFP8_STR
    369199930U,	// LSFP8_STUR
    536972015U,	// LSFP8_Wm_RegOffset_LDR
    536972067U,	// LSFP8_Wm_RegOffset_STR
    536972015U,	// LSFP8_Xm_RegOffset_LDR
    536972067U,	// LSFP8_Xm_RegOffset_STR
    545262229U,	// LSFPPair128_LDR
    545262247U,	// LSFPPair128_NonTemp_LDR
    545262253U,	// LSFPPair128_NonTemp_STR
    1736444565U,	// LSFPPair128_PostInd_LDR
    1737116353U,	// LSFPPair128_PostInd_STR
    662702741U,	// LSFPPair128_PreInd_LDR
    663374529U,	// LSFPPair128_PreInd_STR
    545262273U,	// LSFPPair128_STR
    545262229U,	// LSFPPair32_LDR
    545262247U,	// LSFPPair32_NonTemp_LDR
    545262253U,	// LSFPPair32_NonTemp_STR
    1736444565U,	// LSFPPair32_PostInd_LDR
    1737116353U,	// LSFPPair32_PostInd_STR
    662702741U,	// LSFPPair32_PreInd_LDR
    663374529U,	// LSFPPair32_PreInd_STR
    545262273U,	// LSFPPair32_STR
    545262229U,	// LSFPPair64_LDR
    545262247U,	// LSFPPair64_NonTemp_LDR
    545262253U,	// LSFPPair64_NonTemp_STR
    1736444565U,	// LSFPPair64_PostInd_LDR
    1737116353U,	// LSFPPair64_PostInd_STR
    662702741U,	// LSFPPair64_PreInd_LDR
    663374529U,	// LSFPPair64_PreInd_STR
    545262273U,	// LSFPPair64_STR
    2595U,	// LSLVwww
    2595U,	// LSLVxxx
    2595U,	// LSLwwi
    2595U,	// LSLxxi
    545262229U,	// LSPair32_LDR
    545262247U,	// LSPair32_NonTemp_LDR
    545262253U,	// LSPair32_NonTemp_STR
    1736444565U,	// LSPair32_PostInd_LDR
    1737116353U,	// LSPair32_PostInd_STR
    662702741U,	// LSPair32_PreInd_LDR
    663374529U,	// LSPair32_PreInd_STR
    545262273U,	// LSPair32_STR
    545262229U,	// LSPair64_LDR
    545262247U,	// LSPair64_NonTemp_LDR
    545262253U,	// LSPair64_NonTemp_STR
    1736444565U,	// LSPair64_PostInd_LDR
    1737116353U,	// LSPair64_PostInd_STR
    662702741U,	// LSPair64_PreInd_LDR
    663374529U,	// LSPair64_PreInd_STR
    545262273U,	// LSPair64_STR
    2835U,	// LSRVwww
    2835U,	// LSRVxxx
    2835U,	// LSRwwi
    2835U,	// LSRxxi
    536873220U,	// MADDwwww
    536873220U,	// MADDxxxx
    1182191U,	// MOVKwii
    1182191U,	// MOVKxii
    1313423U,	// MOVNwii
    1313423U,	// MOVNxii
    1313995U,	// MOVZwii
    1313995U,	// MOVZxii
    1444777U,	// MRSxi
    21272U,	// MSRii
    23320U,	// MSRix
    536873162U,	// MSUBwwww
    536873162U,	// MSUBxxxx
    134220426U,	// MVNww_asr
    150997642U,	// MVNww_lsl
    167774858U,	// MVNww_lsr
    452987530U,	// MVNww_ror
    134220426U,	// MVNxx_asr
    150997642U,	// MVNxx_lsl
    167774858U,	// MVNxx_lsr
    452987530U,	// MVNxx_ror
    536873597U,	// ORNwww_asr
    536873597U,	// ORNwww_lsl
    536873597U,	// ORNwww_lsr
    536873597U,	// ORNwww_ror
    536873597U,	// ORNxxx_asr
    536873597U,	// ORNxxx_lsl
    536873597U,	// ORNxxx_lsr
    536873597U,	// ORNxxx_ror
    50334473U,	// ORRwwi
    536873737U,	// ORRwww_asr
    536873737U,	// ORRwww_lsl
    536873737U,	// ORRwww_lsr
    536873737U,	// ORRwww_ror
    67111689U,	// ORRxxi
    536873737U,	// ORRxxx_asr
    536873737U,	// ORRxxx_lsl
    536873737U,	// ORRxxx_lsr
    536873737U,	// ORRxxx_ror
    419553863U,	// PRFM
    536994375U,	// PRFM_Wm_RegOffset
    536994375U,	// PRFM_Xm_RegOffset
    811591U,	// PRFM_lit
    369222245U,	// PRFUM
    2100164U,	// RBITww
    2100164U,	// RBITxx
    0U,	// RET
    35775U,	// RETx
    2099229U,	// REV16ww
    2099229U,	// REV16xx
    2099208U,	// REV32xx
    2100239U,	// REVww
    2100239U,	// REVxx
    2820U,	// RORVwww
    2820U,	// RORVxxx
    2926U,	// SBCSwww
    2926U,	// SBCSxxx
    2264U,	// SBCwww
    2264U,	// SBCxxx
    469765284U,	// SBFIZwwii
    486542500U,	// SBFIZxxii
    536873531U,	// SBFMwwii
    536873531U,	// SBFMxxii
    536874118U,	// SBFXwwii
    536874118U,	// SBFXxxii
    2099494U,	// SCVTFdw
    318769446U,	// SCVTFdwi
    2099494U,	// SCVTFdx
    318769446U,	// SCVTFdxi
    2099494U,	// SCVTFsw
    318769446U,	// SCVTFswi
    2099494U,	// SCVTFsx
    318769446U,	// SCVTFsxi
    3098U,	// SDIVwww
    3098U,	// SDIVxxx
    536873477U,	// SMADDLxwwx
    35047U,	// SMCi
    536873461U,	// SMSUBLxwwx
    2386U,	// SMULHxxx
    6391887U,	// STLR_byte
    6392569U,	// STLR_dword
    6392173U,	// STLR_hword
    6392569U,	// STLR_word
    2147486419U,	// STLXP_dword
    2147486419U,	// STLXP_word
    1082132615U,	// STLXR_byte
    1082133325U,	// STLXR_dword
    1082132901U,	// STLXR_hword
    1082133325U,	// STLXR_word
    2147486426U,	// STXP_dword
    2147486426U,	// STXP_word
    1082132623U,	// STXR_byte
    1082133332U,	// STXR_dword
    1082132909U,	// STXR_hword
    1082133332U,	// STXR_word
    536873832U,	// SUBSwww_asr
    536873832U,	// SUBSwww_lsl
    536873832U,	// SUBSwww_lsr
    536873832U,	// SUBSwww_sxtb
    536873832U,	// SUBSwww_sxth
    536873832U,	// SUBSwww_sxtw
    536873832U,	// SUBSwww_sxtx
    536873832U,	// SUBSwww_uxtb
    536873832U,	// SUBSwww_uxth
    536873832U,	// SUBSwww_uxtw
    536873832U,	// SUBSwww_uxtx
    536873832U,	// SUBSxxw_sxtb
    536873832U,	// SUBSxxw_sxth
    536873832U,	// SUBSxxw_sxtw
    536873832U,	// SUBSxxw_uxtb
    536873832U,	// SUBSxxw_uxth
    536873832U,	// SUBSxxw_uxtw
    536873832U,	// SUBSxxx_asr
    536873832U,	// SUBSxxx_lsl
    536873832U,	// SUBSxxx_lsr
    536873832U,	// SUBSxxx_sxtx
    536873832U,	// SUBSxxx_uxtx
    16780136U,	// SUBwwi_lsl0_S
    134358U,	// SUBwwi_lsl0_cmp
    16779460U,	// SUBwwi_lsl0_s
    33557352U,	// SUBwwi_lsl12_S
    265430U,	// SUBwwi_lsl12_cmp
    33556676U,	// SUBwwi_lsl12_s
    536873156U,	// SUBwww_asr
    536873156U,	// SUBwww_lsl
    536873156U,	// SUBwww_lsr
    536873156U,	// SUBwww_sxtb
    536873156U,	// SUBwww_sxth
    536873156U,	// SUBwww_sxtw
    536873156U,	// SUBwww_sxtx
    536873156U,	// SUBwww_uxtb
    536873156U,	// SUBwww_uxth
    536873156U,	// SUBwww_uxtw
    536873156U,	// SUBwww_uxtx
    16780136U,	// SUBxxi_lsl0_S
    134358U,	// SUBxxi_lsl0_cmp
    16779460U,	// SUBxxi_lsl0_s
    33557352U,	// SUBxxi_lsl12_S
    265430U,	// SUBxxi_lsl12_cmp
    33556676U,	// SUBxxi_lsl12_s
    536873156U,	// SUBxxw_sxtb
    536873156U,	// SUBxxw_sxth
    536873156U,	// SUBxxw_sxtw
    536873156U,	// SUBxxw_uxtb
    536873156U,	// SUBxxw_uxth
    536873156U,	// SUBxxw_uxtw
    536873156U,	// SUBxxx_asr
    536873156U,	// SUBxxx_lsl
    536873156U,	// SUBxxx_lsr
    536873156U,	// SUBxxx_sxtx
    536873156U,	// SUBxxx_uxtx
    35064U,	// SVCi
    2099383U,	// SXTBww
    2099383U,	// SXTBxw
    2099659U,	// SXTHww
    2099659U,	// SXTHxw
    2100322U,	// SXTWxw
    503319080U,	// SYSLxicci
    1575854U,	// SYSiccix
    0U,	// TAIL_BRx
    0U,	// TAIL_Bimm
    520096957U,	// TBNZwii
    520096957U,	// TBNZxii
    520096927U,	// TBZwii
    520096927U,	// TBZxii
    0U,	// TC_RETURNdi
    0U,	// TC_RETURNxi
    59863U,	// TLBIi
    2124247U,	// TLBIix
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_BLRx
    134220764U,	// TSTww_asr
    150997980U,	// TSTww_lsl
    167775196U,	// TSTww_lsr
    452987868U,	// TSTww_ror
    134220764U,	// TSTxx_asr
    150997980U,	// TSTxx_lsl
    167775196U,	// TSTxx_lsr
    452987868U,	// TSTxx_ror
    469765291U,	// UBFIZwwii
    486542507U,	// UBFIZxxii
    536873537U,	// UBFMwwii
    536873537U,	// UBFMxxii
    536874124U,	// UBFXwwii
    536874124U,	// UBFXxxii
    2099501U,	// UCVTFdw
    318769453U,	// UCVTFdwi
    2099501U,	// UCVTFdx
    318769453U,	// UCVTFdxi
    2099501U,	// UCVTFsw
    318769453U,	// UCVTFswi
    2099501U,	// UCVTFsx
    318769453U,	// UCVTFsxi
    3104U,	// UDIVwww
    3104U,	// UDIVxxx
    536873485U,	// UMADDLxwwx
    536873469U,	// UMSUBLxwwx
    2393U,	// UMULHxxx
    2099389U,	// UXTBww
    2099389U,	// UXTBxw
    2099665U,	// UXTHww
    2099665U,	// UXTHxw
    0U
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// ADCSwww
    0U,	// ADCSxxx
    0U,	// ADCwww
    0U,	// ADCxxx
    0U,	// ADDSwww_asr
    1U,	// ADDSwww_lsl
    2U,	// ADDSwww_lsr
    3U,	// ADDSwww_sxtb
    4U,	// ADDSwww_sxth
    5U,	// ADDSwww_sxtw
    6U,	// ADDSwww_sxtx
    7U,	// ADDSwww_uxtb
    8U,	// ADDSwww_uxth
    9U,	// ADDSwww_uxtw
    10U,	// ADDSwww_uxtx
    3U,	// ADDSxxw_sxtb
    4U,	// ADDSxxw_sxth
    5U,	// ADDSxxw_sxtw
    7U,	// ADDSxxw_uxtb
    8U,	// ADDSxxw_uxth
    9U,	// ADDSxxw_uxtw
    0U,	// ADDSxxx_asr
    1U,	// ADDSxxx_lsl
    2U,	// ADDSxxx_lsr
    6U,	// ADDSxxx_sxtx
    10U,	// ADDSxxx_uxtx
    0U,	// ADDwwi_lsl0_S
    0U,	// ADDwwi_lsl0_cmp
    0U,	// ADDwwi_lsl0_s
    0U,	// ADDwwi_lsl12_S
    0U,	// ADDwwi_lsl12_cmp
    0U,	// ADDwwi_lsl12_s
    0U,	// ADDwww_asr
    1U,	// ADDwww_lsl
    2U,	// ADDwww_lsr
    3U,	// ADDwww_sxtb
    4U,	// ADDwww_sxth
    5U,	// ADDwww_sxtw
    6U,	// ADDwww_sxtx
    7U,	// ADDwww_uxtb
    8U,	// ADDwww_uxth
    9U,	// ADDwww_uxtw
    10U,	// ADDwww_uxtx
    0U,	// ADDxxi_lsl0_S
    0U,	// ADDxxi_lsl0_cmp
    0U,	// ADDxxi_lsl0_s
    0U,	// ADDxxi_lsl12_S
    0U,	// ADDxxi_lsl12_cmp
    0U,	// ADDxxi_lsl12_s
    3U,	// ADDxxw_sxtb
    4U,	// ADDxxw_sxth
    5U,	// ADDxxw_sxtw
    7U,	// ADDxxw_uxtb
    8U,	// ADDxxw_uxth
    9U,	// ADDxxw_uxtw
    0U,	// ADDxxx_asr
    1U,	// ADDxxx_lsl
    2U,	// ADDxxx_lsr
    6U,	// ADDxxx_sxtx
    10U,	// ADDxxx_uxtx
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADRPxi
    0U,	// ADRxi
    0U,	// ANDSwwi
    0U,	// ANDSwww_asr
    1U,	// ANDSwww_lsl
    2U,	// ANDSwww_lsr
    11U,	// ANDSwww_ror
    0U,	// ANDSxxi
    0U,	// ANDSxxx_asr
    1U,	// ANDSxxx_lsl
    2U,	// ANDSxxx_lsr
    11U,	// ANDSxxx_ror
    0U,	// ANDwwi
    0U,	// ANDwww_asr
    1U,	// ANDwww_lsl
    2U,	// ANDwww_lsr
    11U,	// ANDwww_ror
    0U,	// ANDxxi
    0U,	// ANDxxx_asr
    1U,	// ANDxxx_lsl
    2U,	// ANDxxx_lsr
    11U,	// ANDxxx_ror
    0U,	// ASRVwww
    0U,	// ASRVxxx
    0U,	// ASRwwi
    0U,	// ASRxxi
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATix
    0U,	// BFIwwii
    0U,	// BFIxxii
    12U,	// BFMwwii
    12U,	// BFMxxii
    13U,	// BFXILwwii
    13U,	// BFXILxxii
    0U,	// BICSwww_asr
    1U,	// BICSwww_lsl
    2U,	// BICSwww_lsr
    11U,	// BICSwww_ror
    0U,	// BICSxxx_asr
    1U,	// BICSxxx_lsl
    2U,	// BICSxxx_lsr
    11U,	// BICSxxx_ror
    0U,	// BICwww_asr
    1U,	// BICwww_lsl
    2U,	// BICwww_lsr
    11U,	// BICwww_ror
    0U,	// BICxxx_asr
    1U,	// BICxxx_lsl
    2U,	// BICxxx_lsr
    11U,	// BICxxx_ror
    0U,	// BLRx
    0U,	// BLimm
    0U,	// BRKi
    0U,	// BRx
    0U,	// Bcc
    0U,	// Bimm
    0U,	// CBNZw
    0U,	// CBNZx
    0U,	// CBZw
    0U,	// CBZx
    14U,	// CCMNwi
    14U,	// CCMNww
    14U,	// CCMNxi
    14U,	// CCMNxx
    14U,	// CCMPwi
    14U,	// CCMPww
    14U,	// CCMPxi
    14U,	// CCMPxx
    0U,	// CLREXi
    0U,	// CLSww
    0U,	// CLSxx
    0U,	// CLZww
    0U,	// CLZxx
    0U,	// CMNww_asr
    0U,	// CMNww_lsl
    0U,	// CMNww_lsr
    0U,	// CMNww_sxtb
    0U,	// CMNww_sxth
    0U,	// CMNww_sxtw
    0U,	// CMNww_sxtx
    0U,	// CMNww_uxtb
    0U,	// CMNww_uxth
    0U,	// CMNww_uxtw
    0U,	// CMNww_uxtx
    0U,	// CMNxw_sxtb
    0U,	// CMNxw_sxth
    0U,	// CMNxw_sxtw
    0U,	// CMNxw_uxtb
    0U,	// CMNxw_uxth
    0U,	// CMNxw_uxtw
    0U,	// CMNxx_asr
    0U,	// CMNxx_lsl
    0U,	// CMNxx_lsr
    0U,	// CMNxx_sxtx
    0U,	// CMNxx_uxtx
    0U,	// CMPww_asr
    0U,	// CMPww_lsl
    0U,	// CMPww_lsr
    0U,	// CMPww_sxtb
    0U,	// CMPww_sxth
    0U,	// CMPww_sxtw
    0U,	// CMPww_sxtx
    0U,	// CMPww_uxtb
    0U,	// CMPww_uxth
    0U,	// CMPww_uxtw
    0U,	// CMPww_uxtx
    0U,	// CMPxw_sxtb
    0U,	// CMPxw_sxth
    0U,	// CMPxw_sxtw
    0U,	// CMPxw_uxtb
    0U,	// CMPxw_uxth
    0U,	// CMPxw_uxtw
    0U,	// CMPxx_asr
    0U,	// CMPxx_lsl
    0U,	// CMPxx_lsr
    0U,	// CMPxx_sxtx
    0U,	// CMPxx_uxtx
    0U,	// CONSTPOOL_ENTRY
    0U,	// CRC32B_www
    0U,	// CRC32CB_www
    0U,	// CRC32CH_www
    0U,	// CRC32CW_www
    0U,	// CRC32CX_wwx
    0U,	// CRC32H_www
    0U,	// CRC32W_www
    0U,	// CRC32X_wwx
    14U,	// CSELwwwc
    14U,	// CSELxxxc
    14U,	// CSINCwwwc
    14U,	// CSINCxxxc
    14U,	// CSINVwwwc
    14U,	// CSINVxxxc
    14U,	// CSNEGwwwc
    14U,	// CSNEGxxxc
    0U,	// DCPS1i
    0U,	// DCPS2i
    0U,	// DCPS3i
    0U,	// DCix
    0U,	// DMBi
    0U,	// DRPS
    0U,	// DSBi
    0U,	// EONwww_asr
    1U,	// EONwww_lsl
    2U,	// EONwww_lsr
    11U,	// EONwww_ror
    0U,	// EONxxx_asr
    1U,	// EONxxx_lsl
    2U,	// EONxxx_lsr
    11U,	// EONxxx_ror
    0U,	// EORwwi
    0U,	// EORwww_asr
    1U,	// EORwww_lsl
    2U,	// EORwww_lsr
    11U,	// EORwww_ror
    0U,	// EORxxi
    0U,	// EORxxx_asr
    1U,	// EORxxx_lsl
    2U,	// EORxxx_lsr
    11U,	// EORxxx_ror
    0U,	// ERET
    15U,	// EXTRwwwi
    15U,	// EXTRxxxi
    0U,	// F128CSEL
    0U,	// FABSdd
    0U,	// FABSss
    0U,	// FADDddd
    0U,	// FADDsss
    14U,	// FCCMPEdd
    14U,	// FCCMPEss
    14U,	// FCCMPdd
    14U,	// FCCMPss
    0U,	// FCMPdd_quiet
    0U,	// FCMPdd_sig
    0U,	// FCMPdi_quiet
    0U,	// FCMPdi_sig
    0U,	// FCMPsi_quiet
    0U,	// FCMPsi_sig
    0U,	// FCMPss_quiet
    0U,	// FCMPss_sig
    14U,	// FCSELdddc
    14U,	// FCSELsssc
    0U,	// FCVTASwd
    0U,	// FCVTASws
    0U,	// FCVTASxd
    0U,	// FCVTASxs
    0U,	// FCVTAUwd
    0U,	// FCVTAUws
    0U,	// FCVTAUxd
    0U,	// FCVTAUxs
    0U,	// FCVTMSwd
    0U,	// FCVTMSws
    0U,	// FCVTMSxd
    0U,	// FCVTMSxs
    0U,	// FCVTMUwd
    0U,	// FCVTMUws
    0U,	// FCVTMUxd
    0U,	// FCVTMUxs
    0U,	// FCVTNSwd
    0U,	// FCVTNSws
    0U,	// FCVTNSxd
    0U,	// FCVTNSxs
    0U,	// FCVTNUwd
    0U,	// FCVTNUws
    0U,	// FCVTNUxd
    0U,	// FCVTNUxs
    0U,	// FCVTPSwd
    0U,	// FCVTPSws
    0U,	// FCVTPSxd
    0U,	// FCVTPSxs
    0U,	// FCVTPUwd
    0U,	// FCVTPUws
    0U,	// FCVTPUxd
    0U,	// FCVTPUxs
    0U,	// FCVTZSwd
    0U,	// FCVTZSwdi
    0U,	// FCVTZSws
    0U,	// FCVTZSwsi
    0U,	// FCVTZSxd
    0U,	// FCVTZSxdi
    0U,	// FCVTZSxs
    0U,	// FCVTZSxsi
    0U,	// FCVTZUwd
    0U,	// FCVTZUwdi
    0U,	// FCVTZUws
    0U,	// FCVTZUwsi
    0U,	// FCVTZUxd
    0U,	// FCVTZUxdi
    0U,	// FCVTZUxs
    0U,	// FCVTZUxsi
    0U,	// FCVTdh
    0U,	// FCVTds
    0U,	// FCVThd
    0U,	// FCVThs
    0U,	// FCVTsd
    0U,	// FCVTsh
    0U,	// FDIVddd
    0U,	// FDIVsss
    15U,	// FMADDdddd
    15U,	// FMADDssss
    0U,	// FMAXNMddd
    0U,	// FMAXNMsss
    0U,	// FMAXddd
    0U,	// FMAXsss
    0U,	// FMINNMddd
    0U,	// FMINNMsss
    0U,	// FMINddd
    0U,	// FMINsss
    0U,	// FMOVdd
    0U,	// FMOVdi
    0U,	// FMOVdx
    0U,	// FMOVsi
    0U,	// FMOVss
    0U,	// FMOVsw
    0U,	// FMOVvx
    0U,	// FMOVws
    0U,	// FMOVxd
    0U,	// FMOVxv
    15U,	// FMSUBdddd
    15U,	// FMSUBssss
    0U,	// FMULddd
    0U,	// FMULsss
    0U,	// FNEGdd
    0U,	// FNEGss
    15U,	// FNMADDdddd
    15U,	// FNMADDssss
    15U,	// FNMSUBdddd
    15U,	// FNMSUBssss
    0U,	// FNMULddd
    0U,	// FNMULsss
    0U,	// FRINTAdd
    0U,	// FRINTAss
    0U,	// FRINTIdd
    0U,	// FRINTIss
    0U,	// FRINTMdd
    0U,	// FRINTMss
    0U,	// FRINTNdd
    0U,	// FRINTNss
    0U,	// FRINTPdd
    0U,	// FRINTPss
    0U,	// FRINTXdd
    0U,	// FRINTXss
    0U,	// FRINTZdd
    0U,	// FRINTZss
    0U,	// FSQRTdd
    0U,	// FSQRTss
    0U,	// FSUBddd
    0U,	// FSUBsss
    0U,	// HINTi
    0U,	// HLTi
    0U,	// HVCi
    0U,	// ICi
    0U,	// ICix
    0U,	// ISBi
    0U,	// LDAR_byte
    0U,	// LDAR_dword
    0U,	// LDAR_hword
    0U,	// LDAR_word
    0U,	// LDAXP_dword
    0U,	// LDAXP_word
    0U,	// LDAXR_byte
    0U,	// LDAXR_dword
    0U,	// LDAXR_hword
    0U,	// LDAXR_word
    16U,	// LDPSWx
    17U,	// LDPSWx_PostInd
    81U,	// LDPSWx_PreInd
    0U,	// LDRSBw
    0U,	// LDRSBw_PostInd
    0U,	// LDRSBw_PreInd
    0U,	// LDRSBw_U
    18U,	// LDRSBw_Wm_RegOffset
    19U,	// LDRSBw_Xm_RegOffset
    0U,	// LDRSBx
    0U,	// LDRSBx_PostInd
    0U,	// LDRSBx_PreInd
    0U,	// LDRSBx_U
    18U,	// LDRSBx_Wm_RegOffset
    19U,	// LDRSBx_Xm_RegOffset
    0U,	// LDRSHw
    0U,	// LDRSHw_PostInd
    0U,	// LDRSHw_PreInd
    0U,	// LDRSHw_U
    20U,	// LDRSHw_Wm_RegOffset
    21U,	// LDRSHw_Xm_RegOffset
    0U,	// LDRSHx
    0U,	// LDRSHx_PostInd
    0U,	// LDRSHx_PreInd
    0U,	// LDRSHx_U
    20U,	// LDRSHx_Wm_RegOffset
    21U,	// LDRSHx_Xm_RegOffset
    0U,	// LDRSWx
    0U,	// LDRSWx_PostInd
    0U,	// LDRSWx_PreInd
    22U,	// LDRSWx_Wm_RegOffset
    23U,	// LDRSWx_Xm_RegOffset
    0U,	// LDRSWx_lit
    0U,	// LDRd_lit
    0U,	// LDRq_lit
    0U,	// LDRs_lit
    0U,	// LDRw_lit
    0U,	// LDRx_lit
    0U,	// LDTRSBw
    0U,	// LDTRSBx
    0U,	// LDTRSHw
    0U,	// LDTRSHx
    0U,	// LDTRSWx
    0U,	// LDURSWx
    0U,	// LDXP_dword
    0U,	// LDXP_word
    0U,	// LDXR_byte
    0U,	// LDXR_dword
    0U,	// LDXR_hword
    0U,	// LDXR_word
    0U,	// LS16_LDR
    0U,	// LS16_LDUR
    0U,	// LS16_PostInd_LDR
    0U,	// LS16_PostInd_STR
    0U,	// LS16_PreInd_LDR
    0U,	// LS16_PreInd_STR
    0U,	// LS16_STR
    0U,	// LS16_STUR
    0U,	// LS16_UnPriv_LDR
    0U,	// LS16_UnPriv_STR
    20U,	// LS16_Wm_RegOffset_LDR
    20U,	// LS16_Wm_RegOffset_STR
    21U,	// LS16_Xm_RegOffset_LDR
    21U,	// LS16_Xm_RegOffset_STR
    0U,	// LS32_LDR
    0U,	// LS32_LDUR
    0U,	// LS32_PostInd_LDR
    0U,	// LS32_PostInd_STR
    0U,	// LS32_PreInd_LDR
    0U,	// LS32_PreInd_STR
    0U,	// LS32_STR
    0U,	// LS32_STUR
    0U,	// LS32_UnPriv_LDR
    0U,	// LS32_UnPriv_STR
    22U,	// LS32_Wm_RegOffset_LDR
    22U,	// LS32_Wm_RegOffset_STR
    23U,	// LS32_Xm_RegOffset_LDR
    23U,	// LS32_Xm_RegOffset_STR
    0U,	// LS64_LDR
    0U,	// LS64_LDUR
    0U,	// LS64_PostInd_LDR
    0U,	// LS64_PostInd_STR
    0U,	// LS64_PreInd_LDR
    0U,	// LS64_PreInd_STR
    0U,	// LS64_STR
    0U,	// LS64_STUR
    0U,	// LS64_UnPriv_LDR
    0U,	// LS64_UnPriv_STR
    24U,	// LS64_Wm_RegOffset_LDR
    24U,	// LS64_Wm_RegOffset_STR
    25U,	// LS64_Xm_RegOffset_LDR
    25U,	// LS64_Xm_RegOffset_STR
    0U,	// LS8_LDR
    0U,	// LS8_LDUR
    0U,	// LS8_PostInd_LDR
    0U,	// LS8_PostInd_STR
    0U,	// LS8_PreInd_LDR
    0U,	// LS8_PreInd_STR
    0U,	// LS8_STR
    0U,	// LS8_STUR
    0U,	// LS8_UnPriv_LDR
    0U,	// LS8_UnPriv_STR
    18U,	// LS8_Wm_RegOffset_LDR
    18U,	// LS8_Wm_RegOffset_STR
    19U,	// LS8_Xm_RegOffset_LDR
    19U,	// LS8_Xm_RegOffset_STR
    0U,	// LSFP128_LDR
    0U,	// LSFP128_LDUR
    0U,	// LSFP128_PostInd_LDR
    0U,	// LSFP128_PostInd_STR
    0U,	// LSFP128_PreInd_LDR
    0U,	// LSFP128_PreInd_STR
    0U,	// LSFP128_STR
    0U,	// LSFP128_STUR
    26U,	// LSFP128_Wm_RegOffset_LDR
    26U,	// LSFP128_Wm_RegOffset_STR
    27U,	// LSFP128_Xm_RegOffset_LDR
    27U,	// LSFP128_Xm_RegOffset_STR
    0U,	// LSFP16_LDR
    0U,	// LSFP16_LDUR
    0U,	// LSFP16_PostInd_LDR
    0U,	// LSFP16_PostInd_STR
    0U,	// LSFP16_PreInd_LDR
    0U,	// LSFP16_PreInd_STR
    0U,	// LSFP16_STR
    0U,	// LSFP16_STUR
    20U,	// LSFP16_Wm_RegOffset_LDR
    20U,	// LSFP16_Wm_RegOffset_STR
    21U,	// LSFP16_Xm_RegOffset_LDR
    21U,	// LSFP16_Xm_RegOffset_STR
    0U,	// LSFP32_LDR
    0U,	// LSFP32_LDUR
    0U,	// LSFP32_PostInd_LDR
    0U,	// LSFP32_PostInd_STR
    0U,	// LSFP32_PreInd_LDR
    0U,	// LSFP32_PreInd_STR
    0U,	// LSFP32_STR
    0U,	// LSFP32_STUR
    22U,	// LSFP32_Wm_RegOffset_LDR
    22U,	// LSFP32_Wm_RegOffset_STR
    23U,	// LSFP32_Xm_RegOffset_LDR
    23U,	// LSFP32_Xm_RegOffset_STR
    0U,	// LSFP64_LDR
    0U,	// LSFP64_LDUR
    0U,	// LSFP64_PostInd_LDR
    0U,	// LSFP64_PostInd_STR
    0U,	// LSFP64_PreInd_LDR
    0U,	// LSFP64_PreInd_STR
    0U,	// LSFP64_STR
    0U,	// LSFP64_STUR
    24U,	// LSFP64_Wm_RegOffset_LDR
    24U,	// LSFP64_Wm_RegOffset_STR
    25U,	// LSFP64_Xm_RegOffset_LDR
    25U,	// LSFP64_Xm_RegOffset_STR
    0U,	// LSFP8_LDR
    0U,	// LSFP8_LDUR
    0U,	// LSFP8_PostInd_LDR
    0U,	// LSFP8_PostInd_STR
    0U,	// LSFP8_PreInd_LDR
    0U,	// LSFP8_PreInd_STR
    0U,	// LSFP8_STR
    0U,	// LSFP8_STUR
    18U,	// LSFP8_Wm_RegOffset_LDR
    18U,	// LSFP8_Wm_RegOffset_STR
    19U,	// LSFP8_Xm_RegOffset_LDR
    19U,	// LSFP8_Xm_RegOffset_STR
    28U,	// LSFPPair128_LDR
    28U,	// LSFPPair128_NonTemp_LDR
    28U,	// LSFPPair128_NonTemp_STR
    29U,	// LSFPPair128_PostInd_LDR
    29U,	// LSFPPair128_PostInd_STR
    93U,	// LSFPPair128_PreInd_LDR
    93U,	// LSFPPair128_PreInd_STR
    28U,	// LSFPPair128_STR
    16U,	// LSFPPair32_LDR
    16U,	// LSFPPair32_NonTemp_LDR
    16U,	// LSFPPair32_NonTemp_STR
    17U,	// LSFPPair32_PostInd_LDR
    17U,	// LSFPPair32_PostInd_STR
    81U,	// LSFPPair32_PreInd_LDR
    81U,	// LSFPPair32_PreInd_STR
    16U,	// LSFPPair32_STR
    30U,	// LSFPPair64_LDR
    30U,	// LSFPPair64_NonTemp_LDR
    30U,	// LSFPPair64_NonTemp_STR
    31U,	// LSFPPair64_PostInd_LDR
    31U,	// LSFPPair64_PostInd_STR
    95U,	// LSFPPair64_PreInd_LDR
    95U,	// LSFPPair64_PreInd_STR
    30U,	// LSFPPair64_STR
    0U,	// LSLVwww
    0U,	// LSLVxxx
    0U,	// LSLwwi
    0U,	// LSLxxi
    16U,	// LSPair32_LDR
    16U,	// LSPair32_NonTemp_LDR
    16U,	// LSPair32_NonTemp_STR
    17U,	// LSPair32_PostInd_LDR
    17U,	// LSPair32_PostInd_STR
    81U,	// LSPair32_PreInd_LDR
    81U,	// LSPair32_PreInd_STR
    16U,	// LSPair32_STR
    30U,	// LSPair64_LDR
    30U,	// LSPair64_NonTemp_LDR
    30U,	// LSPair64_NonTemp_STR
    31U,	// LSPair64_PostInd_LDR
    31U,	// LSPair64_PostInd_STR
    95U,	// LSPair64_PreInd_LDR
    95U,	// LSPair64_PreInd_STR
    30U,	// LSPair64_STR
    0U,	// LSRVwww
    0U,	// LSRVxxx
    0U,	// LSRwwi
    0U,	// LSRxxi
    15U,	// MADDwwww
    15U,	// MADDxxxx
    0U,	// MOVKwii
    0U,	// MOVKxii
    0U,	// MOVNwii
    0U,	// MOVNxii
    0U,	// MOVZwii
    0U,	// MOVZxii
    0U,	// MRSxi
    0U,	// MSRii
    0U,	// MSRix
    15U,	// MSUBwwww
    15U,	// MSUBxxxx
    0U,	// MVNww_asr
    0U,	// MVNww_lsl
    0U,	// MVNww_lsr
    0U,	// MVNww_ror
    0U,	// MVNxx_asr
    0U,	// MVNxx_lsl
    0U,	// MVNxx_lsr
    0U,	// MVNxx_ror
    0U,	// ORNwww_asr
    1U,	// ORNwww_lsl
    2U,	// ORNwww_lsr
    11U,	// ORNwww_ror
    0U,	// ORNxxx_asr
    1U,	// ORNxxx_lsl
    2U,	// ORNxxx_lsr
    11U,	// ORNxxx_ror
    0U,	// ORRwwi
    0U,	// ORRwww_asr
    1U,	// ORRwww_lsl
    2U,	// ORRwww_lsr
    11U,	// ORRwww_ror
    0U,	// ORRxxi
    0U,	// ORRxxx_asr
    1U,	// ORRxxx_lsl
    2U,	// ORRxxx_lsr
    11U,	// ORRxxx_ror
    0U,	// PRFM
    24U,	// PRFM_Wm_RegOffset
    25U,	// PRFM_Xm_RegOffset
    0U,	// PRFM_lit
    0U,	// PRFUM
    0U,	// RBITww
    0U,	// RBITxx
    0U,	// RET
    0U,	// RETx
    0U,	// REV16ww
    0U,	// REV16xx
    0U,	// REV32xx
    0U,	// REVww
    0U,	// REVxx
    0U,	// RORVwww
    0U,	// RORVxxx
    0U,	// SBCSwww
    0U,	// SBCSxxx
    0U,	// SBCwww
    0U,	// SBCxxx
    0U,	// SBFIZwwii
    0U,	// SBFIZxxii
    15U,	// SBFMwwii
    15U,	// SBFMxxii
    32U,	// SBFXwwii
    32U,	// SBFXxxii
    0U,	// SCVTFdw
    0U,	// SCVTFdwi
    0U,	// SCVTFdx
    0U,	// SCVTFdxi
    0U,	// SCVTFsw
    0U,	// SCVTFswi
    0U,	// SCVTFsx
    0U,	// SCVTFsxi
    0U,	// SDIVwww
    0U,	// SDIVxxx
    15U,	// SMADDLxwwx
    0U,	// SMCi
    15U,	// SMSUBLxwwx
    0U,	// SMULHxxx
    0U,	// STLR_byte
    0U,	// STLR_dword
    0U,	// STLR_hword
    0U,	// STLR_word
    0U,	// STLXP_dword
    0U,	// STLXP_word
    0U,	// STLXR_byte
    0U,	// STLXR_dword
    0U,	// STLXR_hword
    0U,	// STLXR_word
    0U,	// STXP_dword
    0U,	// STXP_word
    0U,	// STXR_byte
    0U,	// STXR_dword
    0U,	// STXR_hword
    0U,	// STXR_word
    0U,	// SUBSwww_asr
    1U,	// SUBSwww_lsl
    2U,	// SUBSwww_lsr
    3U,	// SUBSwww_sxtb
    4U,	// SUBSwww_sxth
    5U,	// SUBSwww_sxtw
    6U,	// SUBSwww_sxtx
    7U,	// SUBSwww_uxtb
    8U,	// SUBSwww_uxth
    9U,	// SUBSwww_uxtw
    10U,	// SUBSwww_uxtx
    3U,	// SUBSxxw_sxtb
    4U,	// SUBSxxw_sxth
    5U,	// SUBSxxw_sxtw
    7U,	// SUBSxxw_uxtb
    8U,	// SUBSxxw_uxth
    9U,	// SUBSxxw_uxtw
    0U,	// SUBSxxx_asr
    1U,	// SUBSxxx_lsl
    2U,	// SUBSxxx_lsr
    6U,	// SUBSxxx_sxtx
    10U,	// SUBSxxx_uxtx
    0U,	// SUBwwi_lsl0_S
    0U,	// SUBwwi_lsl0_cmp
    0U,	// SUBwwi_lsl0_s
    0U,	// SUBwwi_lsl12_S
    0U,	// SUBwwi_lsl12_cmp
    0U,	// SUBwwi_lsl12_s
    0U,	// SUBwww_asr
    1U,	// SUBwww_lsl
    2U,	// SUBwww_lsr
    3U,	// SUBwww_sxtb
    4U,	// SUBwww_sxth
    5U,	// SUBwww_sxtw
    6U,	// SUBwww_sxtx
    7U,	// SUBwww_uxtb
    8U,	// SUBwww_uxth
    9U,	// SUBwww_uxtw
    10U,	// SUBwww_uxtx
    0U,	// SUBxxi_lsl0_S
    0U,	// SUBxxi_lsl0_cmp
    0U,	// SUBxxi_lsl0_s
    0U,	// SUBxxi_lsl12_S
    0U,	// SUBxxi_lsl12_cmp
    0U,	// SUBxxi_lsl12_s
    3U,	// SUBxxw_sxtb
    4U,	// SUBxxw_sxth
    5U,	// SUBxxw_sxtw
    7U,	// SUBxxw_uxtb
    8U,	// SUBxxw_uxth
    9U,	// SUBxxw_uxtw
    0U,	// SUBxxx_asr
    1U,	// SUBxxx_lsl
    2U,	// SUBxxx_lsr
    6U,	// SUBxxx_sxtx
    10U,	// SUBxxx_uxtx
    0U,	// SVCi
    0U,	// SXTBww
    0U,	// SXTBxw
    0U,	// SXTHww
    0U,	// SXTHxw
    0U,	// SXTWxw
    0U,	// SYSLxicci
    0U,	// SYSiccix
    0U,	// TAIL_BRx
    0U,	// TAIL_Bimm
    0U,	// TBNZwii
    0U,	// TBNZxii
    0U,	// TBZwii
    0U,	// TBZxii
    0U,	// TC_RETURNdi
    0U,	// TC_RETURNxi
    0U,	// TLBIi
    0U,	// TLBIix
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_BLRx
    0U,	// TSTww_asr
    0U,	// TSTww_lsl
    0U,	// TSTww_lsr
    0U,	// TSTww_ror
    0U,	// TSTxx_asr
    0U,	// TSTxx_lsl
    0U,	// TSTxx_lsr
    0U,	// TSTxx_ror
    0U,	// UBFIZwwii
    0U,	// UBFIZxxii
    15U,	// UBFMwwii
    15U,	// UBFMxxii
    32U,	// UBFXwwii
    32U,	// UBFXxxii
    0U,	// UCVTFdw
    0U,	// UCVTFdwi
    0U,	// UCVTFdx
    0U,	// UCVTFdxi
    0U,	// UCVTFsw
    0U,	// UCVTFswi
    0U,	// UCVTFsx
    0U,	// UCVTFsxi
    0U,	// UDIVwww
    0U,	// UDIVxxx
    15U,	// UMADDLxwwx
    15U,	// UMSUBLxwwx
    0U,	// UMULHxxx
    0U,	// UXTBww
    0U,	// UXTBxw
    0U,	// UXTHww
    0U,	// UXTHxw
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'd', 'c', 'p', 's', '1', 9, 0,
  /* 7 */ 'r', 'e', 'v', '3', '2', 9, 0,
  /* 14 */ 'd', 'c', 'p', 's', '2', 9, 0,
  /* 21 */ 'd', 'c', 'p', 's', '3', 9, 0,
  /* 28 */ 'r', 'e', 'v', '1', '6', 9, 0,
  /* 35 */ 'f', 'r', 'i', 'n', 't', 'a', 9, 0,
  /* 43 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 51 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 60 */ 'd', 'm', 'b', 9, 0,
  /* 65 */ 'l', 'd', 'a', 'r', 'b', 9, 0,
  /* 72 */ 'l', 'd', 'r', 'b', 9, 0,
  /* 78 */ 's', 't', 'l', 'r', 'b', 9, 0,
  /* 85 */ 'l', 'd', 't', 'r', 'b', 9, 0,
  /* 92 */ 's', 't', 'r', 'b', 9, 0,
  /* 98 */ 's', 't', 't', 'r', 'b', 9, 0,
  /* 105 */ 'l', 'd', 'u', 'r', 'b', 9, 0,
  /* 112 */ 's', 't', 'u', 'r', 'b', 9, 0,
  /* 119 */ 'l', 'd', 'a', 'x', 'r', 'b', 9, 0,
  /* 127 */ 'l', 'd', 'x', 'r', 'b', 9, 0,
  /* 134 */ 's', 't', 'l', 'x', 'r', 'b', 9, 0,
  /* 142 */ 's', 't', 'x', 'r', 'b', 9, 0,
  /* 149 */ 'd', 's', 'b', 9, 0,
  /* 154 */ 'i', 's', 'b', 9, 0,
  /* 159 */ 'l', 'd', 'r', 's', 'b', 9, 0,
  /* 166 */ 'l', 'd', 't', 'r', 's', 'b', 9, 0,
  /* 174 */ 'l', 'd', 'u', 'r', 's', 'b', 9, 0,
  /* 182 */ 's', 'x', 't', 'b', 9, 0,
  /* 188 */ 'u', 'x', 't', 'b', 9, 0,
  /* 194 */ 'f', 's', 'u', 'b', 9, 0,
  /* 200 */ 'f', 'm', 's', 'u', 'b', 9, 0,
  /* 207 */ 'f', 'n', 'm', 's', 'u', 'b', 9, 0,
  /* 215 */ 's', 'b', 'c', 9, 0,
  /* 220 */ 'a', 'd', 'c', 9, 0,
  /* 225 */ 'b', 'i', 'c', 9, 0,
  /* 230 */ 's', 'm', 'c', 9, 0,
  /* 235 */ 'c', 's', 'i', 'n', 'c', 9, 0,
  /* 242 */ 'h', 'v', 'c', 9, 0,
  /* 247 */ 's', 'v', 'c', 9, 0,
  /* 252 */ 'f', 'a', 'd', 'd', 9, 0,
  /* 258 */ 'f', 'm', 'a', 'd', 'd', 9, 0,
  /* 265 */ 'f', 'n', 'm', 'a', 'd', 'd', 9, 0,
  /* 273 */ 'a', 'n', 'd', 9, 0,
  /* 278 */ 'f', 'c', 'c', 'm', 'p', 'e', 9, 0,
  /* 286 */ 'f', 'c', 'm', 'p', 'e', 9, 0,
  /* 293 */ 's', 'c', 'v', 't', 'f', 9, 0,
  /* 300 */ 'u', 'c', 'v', 't', 'f', 9, 0,
  /* 307 */ 'f', 'n', 'e', 'g', 9, 0,
  /* 313 */ 'c', 's', 'n', 'e', 'g', 9, 0,
  /* 320 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 328 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 337 */ 's', 'm', 'u', 'l', 'h', 9, 0,
  /* 344 */ 'u', 'm', 'u', 'l', 'h', 9, 0,
  /* 351 */ 'l', 'd', 'a', 'r', 'h', 9, 0,
  /* 358 */ 'l', 'd', 'r', 'h', 9, 0,
  /* 364 */ 's', 't', 'l', 'r', 'h', 9, 0,
  /* 371 */ 'l', 'd', 't', 'r', 'h', 9, 0,
  /* 378 */ 's', 't', 'r', 'h', 9, 0,
  /* 384 */ 's', 't', 't', 'r', 'h', 9, 0,
  /* 391 */ 'l', 'd', 'u', 'r', 'h', 9, 0,
  /* 398 */ 's', 't', 'u', 'r', 'h', 9, 0,
  /* 405 */ 'l', 'd', 'a', 'x', 'r', 'h', 9, 0,
  /* 413 */ 'l', 'd', 'x', 'r', 'h', 9, 0,
  /* 420 */ 's', 't', 'l', 'x', 'r', 'h', 9, 0,
  /* 428 */ 's', 't', 'x', 'r', 'h', 9, 0,
  /* 435 */ 'l', 'd', 'r', 's', 'h', 9, 0,
  /* 442 */ 'l', 'd', 't', 'r', 's', 'h', 9, 0,
  /* 450 */ 'l', 'd', 'u', 'r', 's', 'h', 9, 0,
  /* 458 */ 's', 'x', 't', 'h', 9, 0,
  /* 464 */ 'u', 'x', 't', 'h', 9, 0,
  /* 470 */ 't', 'l', 'b', 'i', 9, 0,
  /* 476 */ 'b', 'f', 'i', 9, 0,
  /* 481 */ 'f', 'r', 'i', 'n', 't', 'i', 9, 0,
  /* 489 */ 'b', 'r', 'k', 9, 0,
  /* 494 */ 'm', 'o', 'v', 'k', 9, 0,
  /* 500 */ 's', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 508 */ 'u', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 516 */ 's', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 524 */ 'u', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 532 */ 'f', 'c', 's', 'e', 'l', 9, 0,
  /* 539 */ 'b', 'f', 'x', 'i', 'l', 9, 0,
  /* 546 */ 'l', 's', 'l', 9, 0,
  /* 551 */ 's', 'y', 's', 'l', 9, 0,
  /* 557 */ 'f', 'm', 'u', 'l', 9, 0,
  /* 563 */ 'f', 'n', 'm', 'u', 'l', 9, 0,
  /* 570 */ 's', 'b', 'f', 'm', 9, 0,
  /* 576 */ 'u', 'b', 'f', 'm', 9, 0,
  /* 582 */ 'p', 'r', 'f', 'm', 9, 0,
  /* 588 */ 'f', 'm', 'i', 'n', 'n', 'm', 9, 0,
  /* 596 */ 'f', 'm', 'a', 'x', 'n', 'm', 9, 0,
  /* 604 */ 'f', 'r', 'i', 'n', 't', 'm', 9, 0,
  /* 612 */ 'p', 'r', 'f', 'u', 'm', 9, 0,
  /* 619 */ 'f', 'm', 'i', 'n', 9, 0,
  /* 625 */ 'c', 'c', 'm', 'n', 9, 0,
  /* 631 */ 'e', 'o', 'n', 9, 0,
  /* 636 */ 'o', 'r', 'n', 9, 0,
  /* 641 */ 'f', 'r', 'i', 'n', 't', 'n', 9, 0,
  /* 649 */ 'm', 'v', 'n', 9, 0,
  /* 654 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 660 */ 'l', 'd', 'p', 9, 0,
  /* 665 */ 'f', 'c', 'c', 'm', 'p', 9, 0,
  /* 672 */ 'f', 'c', 'm', 'p', 9, 0,
  /* 678 */ 'l', 'd', 'n', 'p', 9, 0,
  /* 684 */ 's', 't', 'n', 'p', 9, 0,
  /* 690 */ 'a', 'd', 'r', 'p', 9, 0,
  /* 696 */ 'f', 'r', 'i', 'n', 't', 'p', 9, 0,
  /* 704 */ 's', 't', 'p', 9, 0,
  /* 709 */ 'l', 'd', 'a', 'x', 'p', 9, 0,
  /* 716 */ 'l', 'd', 'x', 'p', 9, 0,
  /* 722 */ 's', 't', 'l', 'x', 'p', 9, 0,
  /* 729 */ 's', 't', 'x', 'p', 9, 0,
  /* 735 */ 'l', 'd', 'a', 'r', 9, 0,
  /* 741 */ 'b', 'r', 9, 0,
  /* 745 */ 'a', 'd', 'r', 9, 0,
  /* 750 */ 'l', 'd', 'r', 9, 0,
  /* 755 */ 'b', 'l', 'r', 9, 0,
  /* 760 */ 's', 't', 'l', 'r', 9, 0,
  /* 766 */ 'e', 'o', 'r', 9, 0,
  /* 771 */ 'r', 'o', 'r', 9, 0,
  /* 776 */ 'o', 'r', 'r', 9, 0,
  /* 781 */ 'a', 's', 'r', 9, 0,
  /* 786 */ 'l', 's', 'r', 9, 0,
  /* 791 */ 'm', 's', 'r', 9, 0,
  /* 796 */ 'l', 'd', 't', 'r', 9, 0,
  /* 802 */ 's', 't', 'r', 9, 0,
  /* 807 */ 's', 't', 't', 'r', 9, 0,
  /* 813 */ 'e', 'x', 't', 'r', 9, 0,
  /* 819 */ 'l', 'd', 'u', 'r', 9, 0,
  /* 825 */ 's', 't', 'u', 'r', 9, 0,
  /* 831 */ 'l', 'd', 'a', 'x', 'r', 9, 0,
  /* 838 */ 'l', 'd', 'x', 'r', 9, 0,
  /* 844 */ 's', 't', 'l', 'x', 'r', 9, 0,
  /* 851 */ 's', 't', 'x', 'r', 9, 0,
  /* 857 */ 'f', 'c', 'v', 't', 'a', 's', 9, 0,
  /* 865 */ 'f', 'a', 'b', 's', 9, 0,
  /* 871 */ 's', 'u', 'b', 's', 9, 0,
  /* 877 */ 's', 'b', 'c', 's', 9, 0,
  /* 883 */ 'a', 'd', 'c', 's', 9, 0,
  /* 889 */ 'b', 'i', 'c', 's', 9, 0,
  /* 895 */ 'a', 'd', 'd', 's', 9, 0,
  /* 901 */ 'a', 'n', 'd', 's', 9, 0,
  /* 907 */ 'c', 'l', 's', 9, 0,
  /* 912 */ 'f', 'c', 'v', 't', 'm', 's', 9, 0,
  /* 920 */ 'f', 'c', 'v', 't', 'n', 's', 9, 0,
  /* 928 */ 'f', 'c', 'v', 't', 'p', 's', 9, 0,
  /* 936 */ 'm', 'r', 's', 9, 0,
  /* 941 */ 's', 'y', 's', 9, 0,
  /* 946 */ 'f', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 954 */ 'a', 't', 9, 0,
  /* 958 */ 'r', 'e', 't', 9, 0,
  /* 963 */ 'r', 'b', 'i', 't', 9, 0,
  /* 969 */ 'h', 'l', 't', 9, 0,
  /* 974 */ 'h', 'i', 'n', 't', 9, 0,
  /* 980 */ 'f', 's', 'q', 'r', 't', 9, 0,
  /* 987 */ 't', 's', 't', 9, 0,
  /* 992 */ 'f', 'c', 'v', 't', 9, 0,
  /* 998 */ 'f', 'c', 'v', 't', 'a', 'u', 9, 0,
  /* 1006 */ 'f', 'c', 'v', 't', 'm', 'u', 9, 0,
  /* 1014 */ 'f', 'c', 'v', 't', 'n', 'u', 9, 0,
  /* 1022 */ 'f', 'c', 'v', 't', 'p', 'u', 9, 0,
  /* 1030 */ 'f', 'c', 'v', 't', 'z', 'u', 9, 0,
  /* 1038 */ 'r', 'e', 'v', 9, 0,
  /* 1043 */ 'f', 'd', 'i', 'v', 9, 0,
  /* 1049 */ 's', 'd', 'i', 'v', 9, 0,
  /* 1055 */ 'u', 'd', 'i', 'v', 9, 0,
  /* 1061 */ 'c', 's', 'i', 'n', 'v', 9, 0,
  /* 1068 */ 'f', 'm', 'o', 'v', 9, 0,
  /* 1074 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 1082 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 1091 */ 'l', 'd', 'p', 's', 'w', 9, 0,
  /* 1098 */ 'l', 'd', 'r', 's', 'w', 9, 0,
  /* 1105 */ 'l', 'd', 't', 'r', 's', 'w', 9, 0,
  /* 1113 */ 'l', 'd', 'u', 'r', 's', 'w', 9, 0,
  /* 1121 */ 's', 'x', 't', 'w', 9, 0,
  /* 1127 */ 'c', 'r', 'c', '3', '2', 'x', 9, 0,
  /* 1135 */ 'f', 'm', 'a', 'x', 9, 0,
  /* 1141 */ 'c', 'r', 'c', '3', '2', 'c', 'x', 9, 0,
  /* 1150 */ 'c', 'l', 'r', 'e', 'x', 9, 0,
  /* 1157 */ 's', 'b', 'f', 'x', 9, 0,
  /* 1163 */ 'u', 'b', 'f', 'x', 9, 0,
  /* 1169 */ 'f', 'r', 'i', 'n', 't', 'x', 9, 0,
  /* 1177 */ 'c', 'b', 'z', 9, 0,
  /* 1182 */ 't', 'b', 'z', 9, 0,
  /* 1187 */ 's', 'b', 'f', 'i', 'z', 9, 0,
  /* 1194 */ 'u', 'b', 'f', 'i', 'z', 9, 0,
  /* 1201 */ 'c', 'l', 'z', 9, 0,
  /* 1206 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 1212 */ 't', 'b', 'n', 'z', 9, 0,
  /* 1218 */ 'f', 'r', 'i', 'n', 't', 'z', 9, 0,
  /* 1226 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 1232 */ 'c', 'm', 'n', 32, 0,
  /* 1237 */ 'c', 'm', 'p', 32, 0,
  /* 1242 */ 'b', '.', 0,
  /* 1245 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 1258 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 1265 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 1275 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 1290 */ 'd', 'r', 'p', 's', 0,
  /* 1295 */ 'e', 'r', 'e', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 11) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, DRPS, ERET
    return;
    break;
  case 1:
    // ADCSwww, ADCSxxx, ADCwww, ADCxxx, ADDSwww_asr, ADDSwww_lsl, ADDSwww_ls...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ATix
    printNamedImmOperand<A64AT::ATMapper>(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 3:
    // BLimm, Bimm
    printLabelOperand<26, 4>(MI, 0, O); 
    return;
    break;
  case 4:
    // Bcc
    printCondCodeOperand(MI, 0, O); 
    O << ' '; 
    printLabelOperand<19, 4>(MI, 1, O); 
    return;
    break;
  case 5:
    // DCix
    printNamedImmOperand<A64DC::DCMapper>(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // DMBi, DSBi
    printNamedImmOperand<A64DB::DBarrierMapper>(MI, 0, O); 
    return;
    break;
  case 7:
    // ICi, ICix
    printNamedImmOperand<A64IC::ICMapper>(MI, 0, O); 
    break;
  case 8:
    // ISBi
    printNamedImmOperand<A64ISB::ISBMapper>(MI, 0, O); 
    return;
    break;
  case 9:
    // LS16_PostInd_STR, LS16_PreInd_STR, LS32_PostInd_STR, LS32_PreInd_STR, ...
    printOperand(MI, 1, O); 
    break;
  case 10:
    // MSRii
    printNamedImmOperand<A64PState::PStateMapper>(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 11:
    // MSRix
    printMSROperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // PRFM, PRFM_Wm_RegOffset, PRFM_Xm_RegOffset, PRFM_lit, PRFUM
    printNamedImmOperand<A64PRFM::PRFMMapper>(MI, 0, O); 
    break;
  case 13:
    // TLBIi, TLBIix
    printNamedImmOperand<A64TLBI::TLBIMapper>(MI, 0, O); 
    break;
  }


  // Fragment 1 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 15) & 3) {
  default:   // unreachable.
  case 0:
    // ADCSwww, ADCSxxx, ADCwww, ADCxxx, ADDSwww_asr, ADDSwww_lsl, ADDSwww_ls...
    O << ", "; 
    break;
  case 1:
    // BLRx, BRKi, BRx, CLREXi, DCPS1i, DCPS2i, DCPS3i, HINTi, HLTi, HVCi, IC...
    return;
    break;
  case 2:
    // FMOVvx
    O << ".d["; 
    printBareImmOperand(MI, 2, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 3:
    // LDAR_byte, LDAR_dword, LDAR_hword, LDAR_word, LDAXR_byte, LDAXR_dword,...
    O << ", ["; 
    break;
  }


  // Fragment 2 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 17) & 15) {
  default:   // unreachable.
  case 0:
    // ADCSwww, ADCSxxx, ADCwww, ADCxxx, ADDSwww_asr, ADDSwww_lsl, ADDSwww_ls...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADDwwi_lsl0_cmp, ADDxxi_lsl0_cmp, SUBwwi_lsl0_cmp, SUBxxi_lsl0_cmp
    printAddSubImmLSL0Operand(MI, 1, O); 
    return;
    break;
  case 2:
    // ADDwwi_lsl12_cmp, ADDxxi_lsl12_cmp, SUBwwi_lsl12_cmp, SUBxxi_lsl12_cmp
    printAddSubImmLSL12Operand(MI, 1, O); 
    return;
    break;
  case 3:
    // ADRPxi
    printLabelOperand<21, 4096>(MI, 1, O); 
    return;
    break;
  case 4:
    // ADRxi
    printLabelOperand<21, 1>(MI, 1, O); 
    return;
    break;
  case 5:
    // BFIwwii, BFIxxii, BFMwwii, BFMxxii, BFXILwwii, BFXILxxii, LDRSBw_PostI...
    printOperand(MI, 2, O); 
    break;
  case 6:
    // CBNZw, CBNZx, CBZw, CBZx, LDRSWx_lit, LDRd_lit, LDRq_lit, LDRs_lit, LD...
    printLabelOperand<19, 4>(MI, 1, O); 
    return;
    break;
  case 7:
    // FCMPdi_quiet, FCMPdi_sig, FCMPsi_quiet, FCMPsi_sig
    printFPZeroOperand(MI, 1, O); 
    return;
    break;
  case 8:
    // FMOVdi, FMOVsi
    printFPImmOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // MOVKwii, MOVKxii
    printMoveWideImmOperand(MI, 2, O); 
    return;
    break;
  case 10:
    // MOVNwii, MOVNxii, MOVZwii, MOVZxii
    printMoveWideImmOperand(MI, 1, O); 
    return;
    break;
  case 11:
    // MRSxi
    printMRSOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // SYSiccix
    printCRxOperand(MI, 1, O); 
    O << ", "; 
    printCRxOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 21) & 7) {
  default:   // unreachable.
  case 0:
    // ADCSwww, ADCSxxx, ADCwww, ADCxxx, ADDSwww_asr, ADDSwww_lsl, ADDSwww_ls...
    O << ", "; 
    break;
  case 1:
    // CLSww, CLSxx, CLZww, CLZxx, FABSdd, FABSss, FCMPdd_quiet, FCMPdd_sig, ...
    return;
    break;
  case 2:
    // FMOVxv
    O << ".d["; 
    printBareImmOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 3:
    // LDAR_byte, LDAR_dword, LDAR_hword, LDAR_word, LDAXR_byte, LDAXR_dword,...
    O << ']'; 
    return;
    break;
  case 4:
    // LDAXP_dword, LDAXP_word, LDPSWx, LDPSWx_PostInd, LDPSWx_PreInd, LDXP_d...
    O << ", ["; 
    break;
  case 5:
    // LDRSBw_PostInd, LDRSBx_PostInd, LDRSHw_PostInd, LDRSHx_PostInd, LDRSWx...
    O << "], "; 
    printOffsetSImm9Operand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 32 unique commands.
  switch ((Bits >> 24) & 31) {
  default:   // unreachable.
  case 0:
    // ADCSwww, ADCSxxx, ADCwww, ADCxxx, ADDSwww_asr, ADDSwww_lsl, ADDSwww_ls...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDwwi_lsl0_S, ADDwwi_lsl0_s, ADDxxi_lsl0_S, ADDxxi_lsl0_s, SUBwwi_lsl...
    printAddSubImmLSL0Operand(MI, 2, O); 
    return;
    break;
  case 2:
    // ADDwwi_lsl12_S, ADDwwi_lsl12_s, ADDxxi_lsl12_S, ADDxxi_lsl12_s, SUBwwi...
    printAddSubImmLSL12Operand(MI, 2, O); 
    return;
    break;
  case 3:
    // ANDSwwi, ANDwwi, EORwwi, ORRwwi
    printLogicalImmOperand<32>(MI, 2, O); 
    return;
    break;
  case 4:
    // ANDSxxi, ANDxxi, EORxxi, ORRxxi
    printLogicalImmOperand<64>(MI, 2, O); 
    return;
    break;
  case 5:
    // BFIwwii
    printBFILSBOperand<32>(MI, 3, O); 
    O << ", "; 
    printBFIWidthOperand(MI, 4, O); 
    return;
    break;
  case 6:
    // BFIxxii
    printBFILSBOperand<64>(MI, 3, O); 
    O << ", "; 
    printBFIWidthOperand(MI, 4, O); 
    return;
    break;
  case 7:
    // BFMwwii, BFMxxii, BFXILwwii, BFXILxxii, LDPSWx_PostInd, LDPSWx_PreInd,...
    printOperand(MI, 3, O); 
    break;
  case 8:
    // CMNww_asr, CMNxx_asr, CMPww_asr, CMPxx_asr, MVNww_asr, MVNxx_asr, TSTw...
    printShiftOperand<A64SE::ASR>(MI, 2, O); 
    return;
    break;
  case 9:
    // CMNww_lsl, CMNxx_lsl, CMPww_lsl, CMPxx_lsl, MVNww_lsl, MVNxx_lsl, TSTw...
    printShiftOperand<A64SE::LSL>(MI, 2, O); 
    return;
    break;
  case 10:
    // CMNww_lsr, CMNxx_lsr, CMPww_lsr, CMPxx_lsr, MVNww_lsr, MVNxx_lsr, TSTw...
    printShiftOperand<A64SE::LSR>(MI, 2, O); 
    return;
    break;
  case 11:
    // CMNww_sxtb, CMNxw_sxtb, CMPww_sxtb, CMPxw_sxtb
    printRegExtendOperand<A64SE::SXTB>(MI, 2, O); 
    return;
    break;
  case 12:
    // CMNww_sxth, CMNxw_sxth, CMPww_sxth, CMPxw_sxth
    printRegExtendOperand<A64SE::SXTH>(MI, 2, O); 
    return;
    break;
  case 13:
    // CMNww_sxtw, CMNxw_sxtw, CMPww_sxtw, CMPxw_sxtw
    printRegExtendOperand<A64SE::SXTW>(MI, 2, O); 
    return;
    break;
  case 14:
    // CMNww_sxtx, CMNxx_sxtx, CMPww_sxtx, CMPxx_sxtx
    printRegExtendOperand<A64SE::SXTX>(MI, 2, O); 
    return;
    break;
  case 15:
    // CMNww_uxtb, CMNxw_uxtb, CMPww_uxtb, CMPxw_uxtb
    printRegExtendOperand<A64SE::UXTB>(MI, 2, O); 
    return;
    break;
  case 16:
    // CMNww_uxth, CMNxw_uxth, CMPww_uxth, CMPxw_uxth
    printRegExtendOperand<A64SE::UXTH>(MI, 2, O); 
    return;
    break;
  case 17:
    // CMNww_uxtw, CMNxw_uxtw, CMPww_uxtw, CMPxw_uxtw
    printRegExtendOperand<A64SE::UXTW>(MI, 2, O); 
    return;
    break;
  case 18:
    // CMNww_uxtx, CMNxx_uxtx, CMPww_uxtx, CMPxx_uxtx
    printRegExtendOperand<A64SE::UXTX>(MI, 2, O); 
    return;
    break;
  case 19:
    // FCVTZSwdi, FCVTZSwsi, FCVTZSxdi, FCVTZSxsi, FCVTZUwdi, FCVTZUwsi, FCVT...
    printCVTFixedPosOperand(MI, 2, O); 
    return;
    break;
  case 20:
    // LDRSBw, LDRSBx, LS8_LDR, LS8_STR, LSFP8_LDR, LSFP8_STR
    printOffsetUImm12Operand<1>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 21:
    // LDRSBw_PreInd, LDRSBx_PreInd, LDRSHw_PreInd, LDRSHx_PreInd, LDRSWx_Pre...
    printOffsetSImm9Operand(MI, 3, O); 
    O << "]!"; 
    return;
    break;
  case 22:
    // LDRSBw_U, LDRSBx_U, LDRSHw_U, LDRSHx_U, LDTRSBw, LDTRSBx, LDTRSHw, LDT...
    printOffsetSImm9Operand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 23:
    // LDRSHw, LDRSHx, LS16_LDR, LS16_STR, LSFP16_LDR, LSFP16_STR
    printOffsetUImm12Operand<2>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 24:
    // LDRSWx, LS32_LDR, LS32_STR, LSFP32_LDR, LSFP32_STR
    printOffsetUImm12Operand<4>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 25:
    // LS64_LDR, LS64_STR, LSFP64_LDR, LSFP64_STR, PRFM
    printOffsetUImm12Operand<8>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 26:
    // LSFP128_LDR, LSFP128_STR
    printOffsetUImm12Operand<16>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 27:
    // MVNww_ror, MVNxx_ror, TSTww_ror, TSTxx_ror
    printShiftOperand<A64SE::ROR>(MI, 2, O); 
    return;
    break;
  case 28:
    // SBFIZwwii, UBFIZwwii
    printBFILSBOperand<32>(MI, 2, O); 
    O << ", "; 
    printBFIWidthOperand(MI, 3, O); 
    return;
    break;
  case 29:
    // SBFIZxxii, UBFIZxxii
    printBFILSBOperand<64>(MI, 2, O); 
    O << ", "; 
    printBFIWidthOperand(MI, 3, O); 
    return;
    break;
  case 30:
    // SYSLxicci
    printCRxOperand(MI, 2, O); 
    O << ", "; 
    printCRxOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case 31:
    // TBNZwii, TBNZxii, TBZwii, TBZxii
    printLabelOperand<14, 4>(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // ADCSwww, ADCSxxx, ADCwww, ADCxxx, ASRVwww, ASRVxxx, ASRwwi, ASRxxi, CR...
    return;
    break;
  case 1:
    // ADDSwww_asr, ADDSwww_lsl, ADDSwww_lsr, ADDSwww_sxtb, ADDSwww_sxth, ADD...
    O << ", "; 
    break;
  case 2:
    // LDAXP_dword, LDAXP_word, LDXP_dword, LDXP_word, STLXR_byte, STLXR_dwor...
    O << ']'; 
    return;
    break;
  case 3:
    // LDPSWx_PostInd, LSFPPair128_PostInd_LDR, LSFPPair128_PostInd_STR, LSFP...
    O << "], "; 
    break;
  case 4:
    // STLXP_dword, STLXP_word, STXP_dword, STXP_word
    O << ", ["; 
    printOperand(MI, 3, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 6 encoded into 6 bits for 33 unique commands.
  switch ((Bits >> 32) & 63) {
  default:   // unreachable.
  case 0:
    // ADDSwww_asr, ADDSxxx_asr, ADDwww_asr, ADDxxx_asr, ANDSwww_asr, ANDSxxx...
    printShiftOperand<A64SE::ASR>(MI, 3, O); 
    return;
    break;
  case 1:
    // ADDSwww_lsl, ADDSxxx_lsl, ADDwww_lsl, ADDxxx_lsl, ANDSwww_lsl, ANDSxxx...
    printShiftOperand<A64SE::LSL>(MI, 3, O); 
    return;
    break;
  case 2:
    // ADDSwww_lsr, ADDSxxx_lsr, ADDwww_lsr, ADDxxx_lsr, ANDSwww_lsr, ANDSxxx...
    printShiftOperand<A64SE::LSR>(MI, 3, O); 
    return;
    break;
  case 3:
    // ADDSwww_sxtb, ADDSxxw_sxtb, ADDwww_sxtb, ADDxxw_sxtb, SUBSwww_sxtb, SU...
    printRegExtendOperand<A64SE::SXTB>(MI, 3, O); 
    return;
    break;
  case 4:
    // ADDSwww_sxth, ADDSxxw_sxth, ADDwww_sxth, ADDxxw_sxth, SUBSwww_sxth, SU...
    printRegExtendOperand<A64SE::SXTH>(MI, 3, O); 
    return;
    break;
  case 5:
    // ADDSwww_sxtw, ADDSxxw_sxtw, ADDwww_sxtw, ADDxxw_sxtw, SUBSwww_sxtw, SU...
    printRegExtendOperand<A64SE::SXTW>(MI, 3, O); 
    return;
    break;
  case 6:
    // ADDSwww_sxtx, ADDSxxx_sxtx, ADDwww_sxtx, ADDxxx_sxtx, SUBSwww_sxtx, SU...
    printRegExtendOperand<A64SE::SXTX>(MI, 3, O); 
    return;
    break;
  case 7:
    // ADDSwww_uxtb, ADDSxxw_uxtb, ADDwww_uxtb, ADDxxw_uxtb, SUBSwww_uxtb, SU...
    printRegExtendOperand<A64SE::UXTB>(MI, 3, O); 
    return;
    break;
  case 8:
    // ADDSwww_uxth, ADDSxxw_uxth, ADDwww_uxth, ADDxxw_uxth, SUBSwww_uxth, SU...
    printRegExtendOperand<A64SE::UXTH>(MI, 3, O); 
    return;
    break;
  case 9:
    // ADDSwww_uxtw, ADDSxxw_uxtw, ADDwww_uxtw, ADDxxw_uxtw, SUBSwww_uxtw, SU...
    printRegExtendOperand<A64SE::UXTW>(MI, 3, O); 
    return;
    break;
  case 10:
    // ADDSwww_uxtx, ADDSxxx_uxtx, ADDwww_uxtx, ADDxxx_uxtx, SUBSwww_uxtx, SU...
    printRegExtendOperand<A64SE::UXTX>(MI, 3, O); 
    return;
    break;
  case 11:
    // ANDSwww_ror, ANDSxxx_ror, ANDwww_ror, ANDxxx_ror, BICSwww_ror, BICSxxx...
    printShiftOperand<A64SE::ROR>(MI, 3, O); 
    return;
    break;
  case 12:
    // BFMwwii, BFMxxii
    printOperand(MI, 4, O); 
    return;
    break;
  case 13:
    // BFXILwwii, BFXILxxii
    printBFXWidthOperand(MI, 4, O); 
    return;
    break;
  case 14:
    // CCMNwi, CCMNww, CCMNxi, CCMNxx, CCMPwi, CCMPww, CCMPxi, CCMPxx, CSELww...
    printCondCodeOperand(MI, 3, O); 
    return;
    break;
  case 15:
    // EXTRwwwi, EXTRxxxi, FMADDdddd, FMADDssss, FMSUBdddd, FMSUBssss, FNMADD...
    printOperand(MI, 3, O); 
    return;
    break;
  case 16:
    // LDPSWx, LSFPPair32_LDR, LSFPPair32_NonTemp_LDR, LSFPPair32_NonTemp_STR...
    printSImm7ScaledOperand<4>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 17:
    // LDPSWx_PostInd, LDPSWx_PreInd, LSFPPair32_PostInd_LDR, LSFPPair32_Post...
    printSImm7ScaledOperand<4>(MI, 4, O); 
    break;
  case 18:
    // LDRSBw_Wm_RegOffset, LDRSBx_Wm_RegOffset, LS8_Wm_RegOffset_LDR, LS8_Wm...
    printAddrRegExtendOperand<1, 32>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 19:
    // LDRSBw_Xm_RegOffset, LDRSBx_Xm_RegOffset, LS8_Xm_RegOffset_LDR, LS8_Xm...
    printAddrRegExtendOperand<1, 64>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 20:
    // LDRSHw_Wm_RegOffset, LDRSHx_Wm_RegOffset, LS16_Wm_RegOffset_LDR, LS16_...
    printAddrRegExtendOperand<2, 32>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 21:
    // LDRSHw_Xm_RegOffset, LDRSHx_Xm_RegOffset, LS16_Xm_RegOffset_LDR, LS16_...
    printAddrRegExtendOperand<2, 64>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 22:
    // LDRSWx_Wm_RegOffset, LS32_Wm_RegOffset_LDR, LS32_Wm_RegOffset_STR, LSF...
    printAddrRegExtendOperand<4, 32>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 23:
    // LDRSWx_Xm_RegOffset, LS32_Xm_RegOffset_LDR, LS32_Xm_RegOffset_STR, LSF...
    printAddrRegExtendOperand<4, 64>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 24:
    // LS64_Wm_RegOffset_LDR, LS64_Wm_RegOffset_STR, LSFP64_Wm_RegOffset_LDR,...
    printAddrRegExtendOperand<8, 32>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 25:
    // LS64_Xm_RegOffset_LDR, LS64_Xm_RegOffset_STR, LSFP64_Xm_RegOffset_LDR,...
    printAddrRegExtendOperand<8, 64>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 26:
    // LSFP128_Wm_RegOffset_LDR, LSFP128_Wm_RegOffset_STR
    printAddrRegExtendOperand<16, 32>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 27:
    // LSFP128_Xm_RegOffset_LDR, LSFP128_Xm_RegOffset_STR
    printAddrRegExtendOperand<16, 64>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 28:
    // LSFPPair128_LDR, LSFPPair128_NonTemp_LDR, LSFPPair128_NonTemp_STR, LSF...
    printSImm7ScaledOperand<16>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 29:
    // LSFPPair128_PostInd_LDR, LSFPPair128_PostInd_STR, LSFPPair128_PreInd_L...
    printSImm7ScaledOperand<16>(MI, 4, O); 
    break;
  case 30:
    // LSFPPair64_LDR, LSFPPair64_NonTemp_LDR, LSFPPair64_NonTemp_STR, LSFPPa...
    printSImm7ScaledOperand<8>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 31:
    // LSFPPair64_PostInd_LDR, LSFPPair64_PostInd_STR, LSFPPair64_PreInd_LDR,...
    printSImm7ScaledOperand<8>(MI, 4, O); 
    break;
  case 32:
    // SBFXwwii, SBFXxxii, UBFXwwii, UBFXxxii
    printBFXWidthOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 38) & 1) {
    // LDPSWx_PreInd, LSFPPair128_PreInd_LDR, LSFPPair128_PreInd_STR, LSFPPai...
    O << "]!"; 
    return;
  } else {
    // LDPSWx_PostInd, LSFPPair128_PostInd_LDR, LSFPPair128_PostInd_STR, LSFP...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AArch64InstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 260 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'b', '1', '0', 0,
  /* 4 */ 'd', '1', '0', 0,
  /* 8 */ 'h', '1', '0', 0,
  /* 12 */ 'q', '1', '0', 0,
  /* 16 */ 's', '1', '0', 0,
  /* 20 */ 'v', '1', '0', 0,
  /* 24 */ 'w', '1', '0', 0,
  /* 28 */ 'x', '1', '0', 0,
  /* 32 */ 'b', '2', '0', 0,
  /* 36 */ 'd', '2', '0', 0,
  /* 40 */ 'h', '2', '0', 0,
  /* 44 */ 'q', '2', '0', 0,
  /* 48 */ 's', '2', '0', 0,
  /* 52 */ 'v', '2', '0', 0,
  /* 56 */ 'w', '2', '0', 0,
  /* 60 */ 'x', '2', '0', 0,
  /* 64 */ 'b', '3', '0', 0,
  /* 68 */ 'd', '3', '0', 0,
  /* 72 */ 'h', '3', '0', 0,
  /* 76 */ 'q', '3', '0', 0,
  /* 80 */ 's', '3', '0', 0,
  /* 84 */ 'v', '3', '0', 0,
  /* 88 */ 'w', '3', '0', 0,
  /* 92 */ 'x', '3', '0', 0,
  /* 96 */ 'b', '0', 0,
  /* 99 */ 'd', '0', 0,
  /* 102 */ 'h', '0', 0,
  /* 105 */ 'q', '0', 0,
  /* 108 */ 's', '0', 0,
  /* 111 */ 'v', '0', 0,
  /* 114 */ 'w', '0', 0,
  /* 117 */ 'x', '0', 0,
  /* 120 */ 'b', '1', '1', 0,
  /* 124 */ 'd', '1', '1', 0,
  /* 128 */ 'h', '1', '1', 0,
  /* 132 */ 'q', '1', '1', 0,
  /* 136 */ 's', '1', '1', 0,
  /* 140 */ 'v', '1', '1', 0,
  /* 144 */ 'w', '1', '1', 0,
  /* 148 */ 'x', '1', '1', 0,
  /* 152 */ 'b', '2', '1', 0,
  /* 156 */ 'd', '2', '1', 0,
  /* 160 */ 'h', '2', '1', 0,
  /* 164 */ 'q', '2', '1', 0,
  /* 168 */ 's', '2', '1', 0,
  /* 172 */ 'v', '2', '1', 0,
  /* 176 */ 'w', '2', '1', 0,
  /* 180 */ 'x', '2', '1', 0,
  /* 184 */ 'b', '3', '1', 0,
  /* 188 */ 'd', '3', '1', 0,
  /* 192 */ 'h', '3', '1', 0,
  /* 196 */ 'q', '3', '1', 0,
  /* 200 */ 's', '3', '1', 0,
  /* 204 */ 'v', '3', '1', 0,
  /* 208 */ 'b', '1', 0,
  /* 211 */ 'd', '1', 0,
  /* 214 */ 'h', '1', 0,
  /* 217 */ 'q', '1', 0,
  /* 220 */ 's', '1', 0,
  /* 223 */ 'v', '1', 0,
  /* 226 */ 'w', '1', 0,
  /* 229 */ 'x', '1', 0,
  /* 232 */ 'b', '1', '2', 0,
  /* 236 */ 'd', '1', '2', 0,
  /* 240 */ 'h', '1', '2', 0,
  /* 244 */ 'q', '1', '2', 0,
  /* 248 */ 's', '1', '2', 0,
  /* 252 */ 'v', '1', '2', 0,
  /* 256 */ 'w', '1', '2', 0,
  /* 260 */ 'x', '1', '2', 0,
  /* 264 */ 'b', '2', '2', 0,
  /* 268 */ 'd', '2', '2', 0,
  /* 272 */ 'h', '2', '2', 0,
  /* 276 */ 'q', '2', '2', 0,
  /* 280 */ 's', '2', '2', 0,
  /* 284 */ 'v', '2', '2', 0,
  /* 288 */ 'w', '2', '2', 0,
  /* 292 */ 'x', '2', '2', 0,
  /* 296 */ 'b', '2', 0,
  /* 299 */ 'd', '2', 0,
  /* 302 */ 'h', '2', 0,
  /* 305 */ 'q', '2', 0,
  /* 308 */ 's', '2', 0,
  /* 311 */ 'v', '2', 0,
  /* 314 */ 'w', '2', 0,
  /* 317 */ 'x', '2', 0,
  /* 320 */ 'b', '1', '3', 0,
  /* 324 */ 'd', '1', '3', 0,
  /* 328 */ 'h', '1', '3', 0,
  /* 332 */ 'q', '1', '3', 0,
  /* 336 */ 's', '1', '3', 0,
  /* 340 */ 'v', '1', '3', 0,
  /* 344 */ 'w', '1', '3', 0,
  /* 348 */ 'x', '1', '3', 0,
  /* 352 */ 'b', '2', '3', 0,
  /* 356 */ 'd', '2', '3', 0,
  /* 360 */ 'h', '2', '3', 0,
  /* 364 */ 'q', '2', '3', 0,
  /* 368 */ 's', '2', '3', 0,
  /* 372 */ 'v', '2', '3', 0,
  /* 376 */ 'w', '2', '3', 0,
  /* 380 */ 'x', '2', '3', 0,
  /* 384 */ 'b', '3', 0,
  /* 387 */ 'd', '3', 0,
  /* 390 */ 'h', '3', 0,
  /* 393 */ 'q', '3', 0,
  /* 396 */ 's', '3', 0,
  /* 399 */ 'v', '3', 0,
  /* 402 */ 'w', '3', 0,
  /* 405 */ 'x', '3', 0,
  /* 408 */ 'b', '1', '4', 0,
  /* 412 */ 'd', '1', '4', 0,
  /* 416 */ 'h', '1', '4', 0,
  /* 420 */ 'q', '1', '4', 0,
  /* 424 */ 's', '1', '4', 0,
  /* 428 */ 'v', '1', '4', 0,
  /* 432 */ 'w', '1', '4', 0,
  /* 436 */ 'x', '1', '4', 0,
  /* 440 */ 'b', '2', '4', 0,
  /* 444 */ 'd', '2', '4', 0,
  /* 448 */ 'h', '2', '4', 0,
  /* 452 */ 'q', '2', '4', 0,
  /* 456 */ 's', '2', '4', 0,
  /* 460 */ 'v', '2', '4', 0,
  /* 464 */ 'w', '2', '4', 0,
  /* 468 */ 'x', '2', '4', 0,
  /* 472 */ 'b', '4', 0,
  /* 475 */ 'd', '4', 0,
  /* 478 */ 'h', '4', 0,
  /* 481 */ 'q', '4', 0,
  /* 484 */ 's', '4', 0,
  /* 487 */ 'v', '4', 0,
  /* 490 */ 'w', '4', 0,
  /* 493 */ 'x', '4', 0,
  /* 496 */ 'b', '1', '5', 0,
  /* 500 */ 'd', '1', '5', 0,
  /* 504 */ 'h', '1', '5', 0,
  /* 508 */ 'q', '1', '5', 0,
  /* 512 */ 's', '1', '5', 0,
  /* 516 */ 'v', '1', '5', 0,
  /* 520 */ 'w', '1', '5', 0,
  /* 524 */ 'x', '1', '5', 0,
  /* 528 */ 'b', '2', '5', 0,
  /* 532 */ 'd', '2', '5', 0,
  /* 536 */ 'h', '2', '5', 0,
  /* 540 */ 'q', '2', '5', 0,
  /* 544 */ 's', '2', '5', 0,
  /* 548 */ 'v', '2', '5', 0,
  /* 552 */ 'w', '2', '5', 0,
  /* 556 */ 'x', '2', '5', 0,
  /* 560 */ 'b', '5', 0,
  /* 563 */ 'd', '5', 0,
  /* 566 */ 'h', '5', 0,
  /* 569 */ 'q', '5', 0,
  /* 572 */ 's', '5', 0,
  /* 575 */ 'v', '5', 0,
  /* 578 */ 'w', '5', 0,
  /* 581 */ 'x', '5', 0,
  /* 584 */ 'b', '1', '6', 0,
  /* 588 */ 'd', '1', '6', 0,
  /* 592 */ 'h', '1', '6', 0,
  /* 596 */ 'q', '1', '6', 0,
  /* 600 */ 's', '1', '6', 0,
  /* 604 */ 'v', '1', '6', 0,
  /* 608 */ 'w', '1', '6', 0,
  /* 612 */ 'x', '1', '6', 0,
  /* 616 */ 'b', '2', '6', 0,
  /* 620 */ 'd', '2', '6', 0,
  /* 624 */ 'h', '2', '6', 0,
  /* 628 */ 'q', '2', '6', 0,
  /* 632 */ 's', '2', '6', 0,
  /* 636 */ 'v', '2', '6', 0,
  /* 640 */ 'w', '2', '6', 0,
  /* 644 */ 'x', '2', '6', 0,
  /* 648 */ 'b', '6', 0,
  /* 651 */ 'd', '6', 0,
  /* 654 */ 'h', '6', 0,
  /* 657 */ 'q', '6', 0,
  /* 660 */ 's', '6', 0,
  /* 663 */ 'v', '6', 0,
  /* 666 */ 'w', '6', 0,
  /* 669 */ 'x', '6', 0,
  /* 672 */ 'b', '1', '7', 0,
  /* 676 */ 'd', '1', '7', 0,
  /* 680 */ 'h', '1', '7', 0,
  /* 684 */ 'q', '1', '7', 0,
  /* 688 */ 's', '1', '7', 0,
  /* 692 */ 'v', '1', '7', 0,
  /* 696 */ 'w', '1', '7', 0,
  /* 700 */ 'x', '1', '7', 0,
  /* 704 */ 'b', '2', '7', 0,
  /* 708 */ 'd', '2', '7', 0,
  /* 712 */ 'h', '2', '7', 0,
  /* 716 */ 'q', '2', '7', 0,
  /* 720 */ 's', '2', '7', 0,
  /* 724 */ 'v', '2', '7', 0,
  /* 728 */ 'w', '2', '7', 0,
  /* 732 */ 'x', '2', '7', 0,
  /* 736 */ 'b', '7', 0,
  /* 739 */ 'd', '7', 0,
  /* 742 */ 'h', '7', 0,
  /* 745 */ 'q', '7', 0,
  /* 748 */ 's', '7', 0,
  /* 751 */ 'v', '7', 0,
  /* 754 */ 'w', '7', 0,
  /* 757 */ 'x', '7', 0,
  /* 760 */ 'b', '1', '8', 0,
  /* 764 */ 'd', '1', '8', 0,
  /* 768 */ 'h', '1', '8', 0,
  /* 772 */ 'q', '1', '8', 0,
  /* 776 */ 's', '1', '8', 0,
  /* 780 */ 'v', '1', '8', 0,
  /* 784 */ 'w', '1', '8', 0,
  /* 788 */ 'x', '1', '8', 0,
  /* 792 */ 'b', '2', '8', 0,
  /* 796 */ 'd', '2', '8', 0,
  /* 800 */ 'h', '2', '8', 0,
  /* 804 */ 'q', '2', '8', 0,
  /* 808 */ 's', '2', '8', 0,
  /* 812 */ 'v', '2', '8', 0,
  /* 816 */ 'w', '2', '8', 0,
  /* 820 */ 'x', '2', '8', 0,
  /* 824 */ 'b', '8', 0,
  /* 827 */ 'd', '8', 0,
  /* 830 */ 'h', '8', 0,
  /* 833 */ 'q', '8', 0,
  /* 836 */ 's', '8', 0,
  /* 839 */ 'v', '8', 0,
  /* 842 */ 'w', '8', 0,
  /* 845 */ 'x', '8', 0,
  /* 848 */ 'b', '1', '9', 0,
  /* 852 */ 'd', '1', '9', 0,
  /* 856 */ 'h', '1', '9', 0,
  /* 860 */ 'q', '1', '9', 0,
  /* 864 */ 's', '1', '9', 0,
  /* 868 */ 'v', '1', '9', 0,
  /* 872 */ 'w', '1', '9', 0,
  /* 876 */ 'x', '1', '9', 0,
  /* 880 */ 'b', '2', '9', 0,
  /* 884 */ 'd', '2', '9', 0,
  /* 888 */ 'h', '2', '9', 0,
  /* 892 */ 'q', '2', '9', 0,
  /* 896 */ 's', '2', '9', 0,
  /* 900 */ 'v', '2', '9', 0,
  /* 904 */ 'w', '2', '9', 0,
  /* 908 */ 'x', '2', '9', 0,
  /* 912 */ 'b', '9', 0,
  /* 915 */ 'd', '9', 0,
  /* 918 */ 'h', '9', 0,
  /* 921 */ 'q', '9', 0,
  /* 924 */ 's', '9', 0,
  /* 927 */ 'v', '9', 0,
  /* 930 */ 'w', '9', 0,
  /* 933 */ 'x', '9', 0,
  /* 936 */ 'w', 's', 'p', 0,
  /* 940 */ 'w', 'z', 'r', 0,
  /* 944 */ 'x', 'z', 'r', 0,
  /* 948 */ 'n', 'z', 'c', 'v', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    96, 208, 296, 384, 472, 560, 648, 736, 824, 912, 0, 120, 232, 320, 
    408, 496, 584, 672, 760, 848, 32, 152, 264, 352, 440, 528, 616, 704, 
    792, 880, 64, 184, 99, 211, 299, 387, 475, 563, 651, 739, 827, 915, 
    4, 124, 236, 324, 412, 500, 588, 676, 764, 852, 36, 156, 268, 356, 
    444, 532, 620, 708, 796, 884, 68, 188, 102, 214, 302, 390, 478, 566, 
    654, 742, 830, 918, 8, 128, 240, 328, 416, 504, 592, 680, 768, 856, 
    40, 160, 272, 360, 448, 536, 624, 712, 800, 888, 72, 192, 948, 105, 
    217, 305, 393, 481, 569, 657, 745, 833, 921, 12, 132, 244, 332, 420, 
    508, 596, 684, 772, 860, 44, 164, 276, 364, 452, 540, 628, 716, 804, 
    892, 76, 196, 108, 220, 308, 396, 484, 572, 660, 748, 836, 924, 16, 
    136, 248, 336, 424, 512, 600, 688, 776, 864, 48, 168, 280, 368, 456, 
    544, 632, 720, 808, 896, 80, 200, 111, 223, 311, 399, 487, 575, 663, 
    751, 839, 927, 20, 140, 252, 340, 428, 516, 604, 692, 780, 868, 52, 
    172, 284, 372, 460, 548, 636, 724, 812, 900, 84, 204, 114, 226, 314, 
    402, 490, 578, 666, 754, 842, 930, 24, 144, 256, 344, 432, 520, 608, 
    696, 784, 872, 56, 176, 288, 376, 464, 552, 640, 728, 816, 904, 88, 
    936, 940, 117, 229, 317, 405, 493, 581, 669, 757, 845, 933, 28, 148, 
    260, 348, 436, 524, 612, 700, 788, 876, 60, 180, 292, 380, 468, 556, 
    644, 732, 820, 908, 92, 937, 944, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  llvm_unreachable("Operand not in map!");
}

bool AArch64InstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case AArch64::ADDSwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "adds $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDSwww_uxtw:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSwww_uxtw GPR32:$Rd, Rwsp:$Rn, GPR32:$Rm, 0)
      AsmString = "adds $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDSxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "adds $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDSxxx_uxtx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSxxx_uxtx GPR64:$Rd, Rxsp:$Rn, GPR64:$Rm, 0)
      AsmString = "adds $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDwwi_lsl0_s:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32wspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ADDwwi_lsl0_s GPR32wsp:$Rd, Rwsp:$Rn, 0)
      AsmString = "mov $Rd, $Rn";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32wspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ADDwwi_lsl0_s Rwsp:$Rd, GPR32wsp:$Rn, 0)
      AsmString = "mov $Rd, $Rn";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "add $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDwww_uxtw:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32wspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDwww_uxtw Rwsp:$Rd, GPR32wsp:$Rn, GPR32:$Rm, 0)
      AsmString = "add $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32wspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDwww_uxtw GPR32wsp:$Rd, Rwsp:$Rn, GPR32:$Rm, 0)
      AsmString = "add $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDxxi_lsl0_s:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ADDxxi_lsl0_s GPR64xsp:$Rd, Rxsp:$Rn, 0)
      AsmString = "mov $Rd, $Rn";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ADDxxi_lsl0_s Rxsp:$Rd, GPR64xsp:$Rn, 0)
      AsmString = "mov $Rd, $Rn";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "add $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDxxx_uxtx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDxxx_uxtx Rxsp:$Rd, GPR64xsp:$Rn, GPR64:$Rm, 0)
      AsmString = "add $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDxxx_uxtx GPR64xsp:$Rd, Rxsp:$Rn, GPR64:$Rm, 0)
      AsmString = "add $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ANDSwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "ands $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ANDSxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "ands $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ANDwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "and $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ANDxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "and $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::BICSwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "bics $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::BICSxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "bics $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::BICwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "bic $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::BICxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "bic $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::CLREXi:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (CLREXi 15)
      AsmString = "clrex";
      break;
    }
    return false;
  case AArch64::CMNww_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMNww_lsl GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "cmn $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMNww_uxtw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMNww_uxtw Rwsp:$Rn, GPR32:$Rm, 0)
      AsmString = "cmn $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMNxx_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMNxx_lsl GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "cmn $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMNxx_uxtx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMNxx_uxtx Rxsp:$Rn, GPR64:$Rm, 0)
      AsmString = "cmn $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMPww_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMPww_lsl GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "cmp $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMPww_uxtw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMPww_uxtw Rwsp:$Rn, GPR32:$Rm, 0)
      AsmString = "cmp $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMPxx_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMPxx_lsl GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "cmp $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMPxx_uxtx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMPxx_uxtx Rxsp:$Rn, GPR64:$Rm, 0)
      AsmString = "cmp $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::DCPS1i:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS1i 0)
      AsmString = "dcps1";
      break;
    }
    return false;
  case AArch64::DCPS2i:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS2i 0)
      AsmString = "dcps2";
      break;
    }
    return false;
  case AArch64::DCPS3i:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS3i 0)
      AsmString = "dcps3";
      break;
    }
    return false;
  case AArch64::EONwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "eon $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::EONxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "eon $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::EORwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "eor $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::EORxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "eor $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::HINTi:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINTi 0)
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINTi 1)
      AsmString = "yield";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINTi 2)
      AsmString = "wfe";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINTi 3)
      AsmString = "wfi";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINTi 4)
      AsmString = "sev";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINTi 5)
      AsmString = "sevl";
      break;
    }
    return false;
  case AArch64::ISBi:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISBi 15)
      AsmString = "isb";
      break;
    }
    return false;
  case AArch64::LDPSWx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSWx GPR64:$Rt, GPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldpsw $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LDRSBw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBw GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrsb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSBw_Xm_RegOffset:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LDRSBw_Xm_RegOffset GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrsb $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSBx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrsb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSBx_Xm_RegOffset:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LDRSBx_Xm_RegOffset GPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrsb $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSHw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHw GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrsh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSHw_Xm_RegOffset:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LDRSHw_Xm_RegOffset GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrsh $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSHx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrsh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSHx_Xm_RegOffset:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LDRSHx_Xm_RegOffset GPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrsh $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSWx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSWx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrsw $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSWx_Xm_RegOffset:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LDRSWx_Xm_RegOffset GPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrsw $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDTRSBw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBw GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrsb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDTRSBx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrsb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDTRSHw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHw GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrsh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDTRSHx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrsh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDTRSWx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSWx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrsw $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDURSWx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSWx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldursw $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS16_LDR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS16_LDUR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldurh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS16_STR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "strh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS16_STUR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "sturh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_UnPriv_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS16_UnPriv_LDR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_UnPriv_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS16_UnPriv_STR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "sttrh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS16_Xm_RegOffset_LDR GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrh $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS16_Xm_RegOffset_STR GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "strh $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS32_LDR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS32_LDUR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS32_STR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS32_STUR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_UnPriv_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS32_UnPriv_LDR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_UnPriv_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS32_UnPriv_STR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "sttr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS32_Xm_RegOffset_LDR GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS32_Xm_RegOffset_STR GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS64_LDR GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS64_LDUR GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS64_STR GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS64_STUR GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_UnPriv_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS64_UnPriv_LDR GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_UnPriv_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS64_UnPriv_STR GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "sttr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS64_Xm_RegOffset_LDR GPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS64_Xm_RegOffset_STR GPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS8_LDR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS8_LDUR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldurb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS8_STR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "strb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS8_STUR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "sturb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_UnPriv_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS8_UnPriv_LDR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_UnPriv_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS8_UnPriv_STR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "sttrb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS8_Xm_RegOffset_LDR GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrb $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS8_Xm_RegOffset_STR GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "strb $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP128_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP128_LDR FPR128:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP128_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP128_LDUR FPR128:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP128_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP128_STR FPR128:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP128_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP128_STUR FPR128:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP128_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP128_Xm_RegOffset_LDR FPR128:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP128_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP128_Xm_RegOffset_STR FPR128:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP16_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP16_LDR FPR16:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP16_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP16_LDUR FPR16:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP16_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP16_STR FPR16:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP16_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP16_STUR FPR16:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP16_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP16_Xm_RegOffset_LDR FPR16:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP16_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP16_Xm_RegOffset_STR FPR16:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP32_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP32_LDR FPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP32_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP32_LDUR FPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP32_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP32_STR FPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP32_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP32_STUR FPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP32_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP32_Xm_RegOffset_LDR FPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP32_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP32_Xm_RegOffset_STR FPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP64_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP64_LDR FPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP64_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP64_LDUR FPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP64_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP64_STR FPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP64_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP64_STUR FPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP64_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP64_Xm_RegOffset_LDR FPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP64_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP64_Xm_RegOffset_STR FPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP8_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP8_LDR FPR8:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP8_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP8_LDUR FPR8:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP8_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP8_STR FPR8:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP8_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP8_STUR FPR8:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP8_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP8_Xm_RegOffset_LDR FPR8:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP8_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP8_Xm_RegOffset_STR FPR8:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFPPair128_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair128_LDR FPR128:$Rt, FPR128:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair128_NonTemp_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair128_NonTemp_LDR FPR128:$Rt, FPR128:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair128_NonTemp_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair128_NonTemp_STR FPR128:$Rt, FPR128:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair128_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair128_STR FPR128:$Rt, FPR128:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair32_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair32_LDR FPR32:$Rt, FPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair32_NonTemp_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair32_NonTemp_LDR FPR32:$Rt, FPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair32_NonTemp_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair32_NonTemp_STR FPR32:$Rt, FPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair32_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair32_STR FPR32:$Rt, FPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair64_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair64_LDR FPR64:$Rt, FPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair64_NonTemp_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair64_NonTemp_LDR FPR64:$Rt, FPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair64_NonTemp_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair64_NonTemp_STR FPR64:$Rt, FPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair64_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair64_STR FPR64:$Rt, FPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair32_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair32_LDR GPR32:$Rt, GPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair32_NonTemp_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair32_NonTemp_LDR GPR32:$Rt, GPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair32_NonTemp_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair32_NonTemp_STR GPR32:$Rt, GPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair32_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair32_STR GPR32:$Rt, GPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair64_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair64_LDR GPR64:$Rt, GPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair64_NonTemp_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair64_NonTemp_LDR GPR64:$Rt, GPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair64_NonTemp_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair64_NonTemp_STR GPR64:$Rt, GPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair64_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair64_STR GPR64:$Rt, GPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::MADDwwww:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MADDwwww GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, WZR)
      AsmString = "mul $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::MADDxxxx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MADDxxxx GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, XZR)
      AsmString = "mul $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::MSUBwwww:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MSUBwwww GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, WZR)
      AsmString = "mneg $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::MSUBxxxx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MSUBxxxx GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, XZR)
      AsmString = "mneg $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::MVNww_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MVNww_lsl GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "mvn $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::MVNxx_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MVNxx_lsl GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "mvn $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::ORNwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "orn $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ORNxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "orn $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ORRwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRwww_lsl GPR32:$Rd, WZR, GPR32:$Rm, 0)
      AsmString = "mov $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "orr $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ORRxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRxxx_lsl GPR64:$Rd, XZR, GPR64:$Rm, 0)
      AsmString = "mov $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "orr $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::RETx:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == AArch64::X30) {
      // (RETx X30)
      AsmString = "ret";
      break;
    }
    return false;
  case AArch64::SBCSwww:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSwww GPR32:$Rd, WZR, GPR32:$Rm)
      AsmString = "ngcs $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SBCSxxx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSxxx GPR64:$Rd, XZR, GPR64:$Rm)
      AsmString = "ngcs $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SBCwww:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCwww GPR32:$Rd, WZR, GPR32:$Rm)
      AsmString = "ngc $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SBCxxx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCxxx GPR64:$Rd, XZR, GPR64:$Rm)
      AsmString = "ngc $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SMADDLxwwx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMADDLxwwx GPR64:$Rd, GPR32:$Rn, GPR32:$Rm, XZR)
      AsmString = "smull $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::SMSUBLxwwx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMSUBLxwwx GPR64:$Rd, GPR32:$Rn, GPR32:$Rm, XZR)
      AsmString = "smnegl $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::SUBSwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "subs $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSwww_lsl GPR32:$Rd, WZR, GPR32:$Rm, 0)
      AsmString = "negs $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SUBSwww_uxtw:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSwww_uxtw GPR32:$Rd, Rwsp:$Rn, GPR32:$Rm, 0)
      AsmString = "subs $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::SUBSxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "subs $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSxxx_lsl GPR64:$Rd, XZR, GPR64:$Rm, 0)
      AsmString = "negs $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SUBSxxx_uxtx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSxxx_uxtx GPR64:$Rd, Rxsp:$Rn, GPR64:$Rm, 0)
      AsmString = "subs $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::SUBwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "sub $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBwww_lsl GPR32:$Rd, WZR, GPR32:$Rm, 0)
      AsmString = "neg $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SUBwww_uxtw:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32wspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBwww_uxtw Rwsp:$Rd, GPR32wsp:$Rn, GPR32:$Rm, 0)
      AsmString = "sub $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32wspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBwww_uxtw GPR32wsp:$Rd, Rwsp:$Rn, GPR32:$Rm, 0)
      AsmString = "sub $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::SUBxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "sub $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBxxx_lsl GPR64:$Rd, XZR, GPR64:$Rm, 0)
      AsmString = "neg $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SUBxxx_uxtx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBxxx_uxtx Rxsp:$Rd, GPR64xsp:$Rn, GPR64:$Rm, 0)
      AsmString = "sub $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBxxx_uxtx GPR64xsp:$Rd, Rxsp:$Rn, GPR64:$Rm, 0)
      AsmString = "sub $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::TSTww_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TSTww_lsl GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "tst $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::TSTxx_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TSTxx_lsl GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "tst $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::UMADDLxwwx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMADDLxwwx GPR64:$Rd, GPR32:$Rn, GPR32:$Rm, XZR)
      AsmString = "umull $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::UMSUBLxwwx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMSUBLxwwx GPR64:$Rd, GPR32:$Rn, GPR32:$Rm, XZR)
      AsmString = "umnegl $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
