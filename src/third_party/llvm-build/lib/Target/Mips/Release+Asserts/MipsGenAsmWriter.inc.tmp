/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2963U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2956U,	// BUNDLE
    2973U,	// LIFETIME_START
    2943U,	// LIFETIME_END
    5318U,	// ABSQ_S_PH
    4530U,	// ABSQ_S_QB
    6741U,	// ABSQ_S_W
    17900340U,	// ADD
    33559555U,	// ADDQH_PH
    33559672U,	// ADDQH_R_PH
    33561073U,	// ADDQH_R_W
    33561017U,	// ADDQH_W
    33559629U,	// ADDQ_PH
    33559728U,	// ADDQ_S_PH
    33561153U,	// ADDQ_S_W
    33559122U,	// ADDSC
    33558830U,	// ADDUH_QB
    33558938U,	// ADDUH_R_QB
    33559827U,	// ADDU_PH
    33559043U,	// ADDU_QB
    33559772U,	// ADDU_S_PH
    33558984U,	// ADDU_S_QB
    33559129U,	// ADDWC
    51455458U,	// ADDi
    51456260U,	// ADDiu
    17901809U,	// ADDu
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    17900362U,	// AND
    17900362U,	// AND64
    336668136U,	// ANDi
    33559384U,	// APPEND
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I16_P8
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I32_P8
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I64_P8
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_CMP_SWAP_I8_P8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I16_P8
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I32_P8
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I64_P8
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_ADD_I8_P8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I16_P8
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I32_P8
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I64_P8
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_AND_I8_P8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I16_P8
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I32_P8
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I64_P8
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_NAND_I8_P8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I16_P8
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I32_P8
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I64_P8
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_OR_I8_P8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I16_P8
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I32_P8
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I64_P8
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_SUB_I8_P8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I16_P8
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I32_P8
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I64_P8
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_LOAD_XOR_I8_P8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I16_P8
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I32_P8
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I64_P8
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATOMIC_SWAP_I8_P8
    6404U,	// AddiuRxImmX16
    137476U,	// AddiuRxPcImmX16
    85989636U,	// AddiuRxRxImm16
    2103556U,	// AddiuRxRxImmX16
    3152132U,	// AddiuRxRyOffMemX16
    203578U,	// AddiuSpImmX16
    33560817U,	// AdduRxRyRz16
    2102090U,	// AndRxRxRy16
    200941U,	// B
    33560296U,	// BALIGN
    202282U,	// BAL_BR
    201598U,	// BC1F
    202944U,	// BC1T
    33560376U,	// BEQ
    33560376U,	// BEQ64
    6829U,	// BGEZ
    6829U,	// BGEZ64
    4466228U,	// BGEZAL
    6873U,	// BGTZ
    6873U,	// BGTZ64
    6444U,	// BITREV
    6835U,	// BLEZ
    6835U,	// BLEZ64
    6879U,	// BLTZ
    6879U,	// BLTZ64
    4466236U,	// BLTZAL
    33559396U,	// BNE
    33559396U,	// BNE64
    200827U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    6860U,	// BeqzRxImmX16
    200941U,	// BimmX16
    6841U,	// BnezRxImmX16
    100669215U,	// BteqzT8CmpX16
    100668926U,	// BteqzT8CmpiX16
    100669638U,	// BteqzT8SltX16
    100668938U,	// BteqzT8SltiX16
    100669707U,	// BteqzT8SltiuX16
    100669714U,	// BteqzT8SltuX16
    203474U,	// BteqzX16
    117446431U,	// BtnezT8CmpX16
    117446142U,	// BtnezT8CmpiX16
    117446854U,	// BtnezT8SltX16
    117446154U,	// BtnezT8SltiX16
    117446923U,	// BtnezT8SltiuX16
    117446930U,	// BtnezT8SltuX16
    203455U,	// BtnezX16
    0U,	// BuildPairF64
    4759U,	// CEIL_L_D64
    6194U,	// CEIL_L_S
    4872U,	// CEIL_W_D32
    4872U,	// CEIL_W_D64
    6298U,	// CEIL_W_S
    5247011U,	// CFC1
    4269815U,	// CLO
    4270791U,	// CLZ
    33558876U,	// CMPGDU_EQ_QB
    33558781U,	// CMPGDU_LE_QB
    33558995U,	// CMPGDU_LT_QB
    33558890U,	// CMPGU_EQ_QB
    33558795U,	// CMPGU_LE_QB
    33559009U,	// CMPGU_LT_QB
    4471U,	// CMPU_EQ_QB
    4376U,	// CMPU_LE_QB
    4590U,	// CMPU_LT_QB
    5206U,	// CMP_EQ_PH
    5102U,	// CMP_LE_PH
    5375U,	// CMP_LT_PH
    340016U,	// CTC1
    6139U,	// CVT_D32_S
    6504U,	// CVT_D32_W
    5656U,	// CVT_D64_L
    6139U,	// CVT_D64_S
    6504U,	// CVT_D64_W
    4780U,	// CVT_L_D64
    6215U,	// CVT_L_S
    4804U,	// CVT_S_D32
    4804U,	// CVT_S_D64
    5665U,	// CVT_S_L
    6692U,	// CVT_S_W
    4893U,	// CVT_W_D32
    4893U,	// CVT_W_D64
    6319U,	// CVT_W_S
    203596U,	// Constant32
    17900339U,	// DADD
    51455457U,	// DADDi
    51456259U,	// DADDiu
    17901808U,	// DADDu
    336668136U,	// DANDi
    4269814U,	// DCLO
    4270790U,	// DCLZ
    605105000U,	// DEXT
    605104987U,	// DEXTM
    605105013U,	// DEXTU
    605104994U,	// DINS
    605104980U,	// DINSM
    605105006U,	// DINSU
    336666633U,	// DMFC0_3OP64
    4137U,	// DMFC1
    336666773U,	// DMFC2_3OP64
    16400U,	// DMTC0_3OP64
    405558U,	// DMTC1
    16540U,	// DMTC2_3OP64
    4270283U,	// DMULT
    4270360U,	// DMULTu
    33559886U,	// DPAQX_SA_W_PH
    0U,	// DPAQX_SA_W_PH_PSEUDO
    33559969U,	// DPAQX_S_W_PH
    0U,	// DPAQX_S_W_PH_PSEUDO
    33561026U,	// DPAQ_SA_L_W
    0U,	// DPAQ_SA_L_W_PSEUDO
    33559928U,	// DPAQ_S_W_PH
    0U,	// DPAQ_S_W_PH_PSEUDO
    33560132U,	// DPAU_H_QBL
    0U,	// DPAU_H_QBL_PSEUDO
    33560381U,	// DPAU_H_QBR
    0U,	// DPAU_H_QBR_PSEUDO
    33560007U,	// DPAX_W_PH
    0U,	// DPAX_W_PH_PSEUDO
    33559876U,	// DPA_W_PH
    0U,	// DPA_W_PH_PSEUDO
    33559901U,	// DPSQX_SA_W_PH
    0U,	// DPSQX_SA_W_PH_PSEUDO
    33559983U,	// DPSQX_S_W_PH
    0U,	// DPSQX_S_W_PH_PSEUDO
    33561039U,	// DPSQ_SA_L_W
    0U,	// DPSQ_SA_L_W_PSEUDO
    33559956U,	// DPSQ_S_W_PH
    0U,	// DPSQ_S_W_PH_PSEUDO
    33560144U,	// DPSU_H_QBL
    0U,	// DPSU_H_QBL_PSEUDO
    33560393U,	// DPSU_H_QBR
    0U,	// DPSU_H_QBR_PSEUDO
    33560018U,	// DPSX_W_PH
    0U,	// DPSX_W_PH_PSEUDO
    33559997U,	// DPS_W_PH
    0U,	// DPS_W_PH_PSEUDO
    51455962U,	// DROTR
    469338U,	// DROTRV
    4268964U,	// DSBH
    4270893U,	// DSDIV
    4268863U,	// DSHD
    51455693U,	// DSLL
    51454085U,	// DSLL32
    134223565U,	// DSLL64_32
    469300U,	// DSLLV
    51454181U,	// DSRA
    51454067U,	// DSRA32
    469285U,	// DSRAV
    51455699U,	// DSRL
    51454093U,	// DSRL32
    469307U,	// DSRLV
    17901794U,	// DSUBu
    4270879U,	// DUDIV
    6958U,	// DivRxRy16
    6944U,	// DivuRxRy16
    605105001U,	// EXT
    838866738U,	// EXTP
    838866703U,	// EXTPDP
    33560906U,	// EXTPDPV
    33560915U,	// EXTPV
    33561216U,	// EXTRV_RS_W
    33561105U,	// EXTRV_R_W
    33559449U,	// EXTRV_S_H
    33561228U,	// EXTRV_W
    838867573U,	// EXTR_RS_W
    838867452U,	// EXTR_R_W
    838865807U,	// EXTR_S_H
    838867484U,	// EXTR_W
    0U,	// ExtractElementF64
    4813U,	// FABS_D32
    4813U,	// FABS_D64
    6239U,	// FABS_S
    33559147U,	// FADD_D32
    33559147U,	// FADD_D64
    33560582U,	// FADD_S
    547708U,	// FCMP_D32
    547708U,	// FCMP_D64
    613244U,	// FCMP_S32
    33559268U,	// FDIV_D32
    33559268U,	// FDIV_D64
    33560694U,	// FDIV_S
    4769U,	// FLOOR_L_D64
    6204U,	// FLOOR_L_S
    4882U,	// FLOOR_W_D32
    4882U,	// FLOOR_W_D64
    6308U,	// FLOOR_W_S
    4843U,	// FMOV_D32
    4843U,	// FMOV_D64
    6269U,	// FMOV_S
    33559221U,	// FMUL_D32
    33559221U,	// FMUL_D64
    33560656U,	// FMUL_S
    4730U,	// FNEG_D32
    4730U,	// FNEG_D64
    6165U,	// FNEG_S
    4820U,	// FSQRT_D32
    4820U,	// FSQRT_D64
    6246U,	// FSQRT_S
    33559138U,	// FSUB_D32
    33559138U,	// FSUB_D64
    33560564U,	// FSUB_S
    605104995U,	// INS
    2103650U,	// INSV
    202261U,	// J
    202287U,	// JAL
    6090U,	// JALR
    6090U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    202694U,	// JR
    202694U,	// JR64
    661039U,	// Jal16
    2997U,	// JrRa16
    2988U,	// JrcRa16
    203499U,	// JrcRx16
    200705U,	// JumpLinkReg16
    6295792U,	// LB
    6295792U,	// LB64
    6295792U,	// LB64_P8
    153098914U,	// LBUX
    6295792U,	// LB_P8
    6297821U,	// LBu
    6297821U,	// LBu64
    6297821U,	// LBu64_P8
    6297821U,	// LBu_P8
    6296390U,	// LD
    6295575U,	// LDC1
    6295575U,	// LDC164
    6295575U,	// LDC164_P8
    6297227U,	// LDL
    6297227U,	// LDL_P8
    6297476U,	// LDR
    6297476U,	// LDR_P8
    153096265U,	// LDXC1
    153096265U,	// LDXC164
    153096265U,	// LDXC164_P8
    6296390U,	// LD_P8
    3152132U,	// LEA_ADDiu
    3152131U,	// LEA_ADDiu64
    6296501U,	// LH
    6296501U,	// LH64
    6296501U,	// LH64_P8
    153098909U,	// LHX
    6296501U,	// LH_P8
    6297854U,	// LHu
    6297854U,	// LHu64
    6297854U,	// LHu64_P8
    6297854U,	// LHu_P8
    730831U,	// LL
    729925U,	// LLD
    729925U,	// LLD_P8
    730831U,	// LL_P8
    153096279U,	// LUXC1
    153096279U,	// LUXC164
    7345680U,	// LUi
    7345680U,	// LUi64
    6298261U,	// LW
    6298261U,	// LW64
    6298261U,	// LW64_P8
    6295613U,	// LWC1
    6295613U,	// LWC1_P8
    6297310U,	// LWL
    6297310U,	// LWL64
    6297310U,	// LWL64_P8
    6297310U,	// LWL_P8
    6297576U,	// LWR
    6297576U,	// LWR64
    6297576U,	// LWR64_P8
    6297576U,	// LWR_P8
    153098920U,	// LWX
    153096293U,	// LWXC1
    153096293U,	// LWXC1_P8
    6298261U,	// LW_P8
    6297888U,	// LWu64
    6297888U,	// LWu64_P8
    6295792U,	// LbRxRyOffMemX16
    6297821U,	// LbuRxRyOffMemX16
    6296501U,	// LhRxRyOffMemX16
    6297854U,	// LhuRxRyOffMemX16
    5626U,	// LiRxImmX16
    4464815U,	// LoadAddr32Imm
    729263U,	// LoadAddr32Reg
    4466170U,	// LoadImm32Reg
    793237U,	// LwConstant32
    6298261U,	// LwRxRyOffMemX16
    169876117U,	// LwRxSpImmX16
    4268857U,	// MADD
    4270327U,	// MADDU
    33560823U,	// MADDU_DSP
    0U,	// MADDU_DSP_PSEUDO
    1107300970U,	// MADD_D32
    1107300970U,	// MADD_D64
    33559353U,	// MADD_DSP
    0U,	// MADD_DSP_PSEUDO
    1107302405U,	// MADD_S
    33560213U,	// MAQ_SA_W_PHL
    0U,	// MAQ_SA_W_PHL_PSEUDO
    33560462U,	// MAQ_SA_W_PHR
    0U,	// MAQ_SA_W_PHR_PSEUDO
    33560241U,	// MAQ_S_W_PHL
    0U,	// MAQ_S_W_PHL_PSEUDO
    33560490U,	// MAQ_S_W_PHR
    0U,	// MAQ_S_W_PHR_PSEUDO
    336666634U,	// MFC0_3OP
    4138U,	// MFC1
    336666774U,	// MFC2_3OP
    202222U,	// MFHI
    202222U,	// MFHI64
    202492U,	// MFLO
    202492U,	// MFLO64
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    33559108U,	// MODSUB
    0U,	// MOVCCRToCCR
    184554098U,	// MOVF_D32
    184554098U,	// MOVF_D64
    184554372U,	// MOVF_I
    184554372U,	// MOVF_I64
    184555533U,	// MOVF_S
    33559228U,	// MOVN_I64_D64
    33560304U,	// MOVN_I64_I
    33560304U,	// MOVN_I64_I64
    33560663U,	// MOVN_I64_S
    33559228U,	// MOVN_I_D32
    33559228U,	// MOVN_I_D64
    33560304U,	// MOVN_I_I
    33560304U,	// MOVN_I_I64
    33560663U,	// MOVN_I_S
    184554204U,	// MOVT_D32
    184554204U,	// MOVT_D64
    184555735U,	// MOVT_I
    184555735U,	// MOVT_I64
    184555630U,	// MOVT_S
    33559334U,	// MOVZ_I64_D64
    33561317U,	// MOVZ_I64_I
    33561317U,	// MOVZ_I64_I64
    33560760U,	// MOVZ_I64_S
    33559334U,	// MOVZ_I_D32
    33559334U,	// MOVZ_I_D64
    33561317U,	// MOVZ_I_I
    33561317U,	// MOVZ_I_I64
    33560760U,	// MOVZ_I_S
    4268620U,	// MSUB
    4270313U,	// MSUBU
    33560809U,	// MSUBU_DSP
    0U,	// MSUBU_DSP_PSEUDO
    1107300961U,	// MSUB_D32
    1107300961U,	// MSUB_D64
    33559116U,	// MSUB_DSP
    0U,	// MSUB_DSP_PSEUDO
    1107302387U,	// MSUB_S
    16401U,	// MTC0_3OP
    405559U,	// MTC1
    16541U,	// MTC2_3OP
    202228U,	// MTHI
    202228U,	// MTHI64
    407319U,	// MTHLIP
    0U,	// MTHLIP_PSEUDO
    202505U,	// MTLO
    202505U,	// MTLO64
    17901273U,	// MUL
    33560254U,	// MULEQ_S_W_PHL
    33560503U,	// MULEQ_S_W_PHR
    33560156U,	// MULEU_S_PH_QBL
    33560405U,	// MULEU_S_PH_QBR
    33559795U,	// MULQ_RS_PH
    33561194U,	// MULQ_RS_W
    33559739U,	// MULQ_S_PH
    33561163U,	// MULQ_S_W
    33559941U,	// MULSAQ_S_W_PH
    0U,	// MULSAQ_S_W_PH_PSEUDO
    33559916U,	// MULSA_W_PH
    0U,	// MULSA_W_PH_PSEUDO
    4270284U,	// MULT
    33560857U,	// MULTU_DSP
    0U,	// MULTU_DSP_PSEUDO
    33560780U,	// MULT_DSP
    0U,	// MULT_DSP_PSEUDO
    4270361U,	// MULTu
    33559612U,	// MUL_PH
    33559707U,	// MUL_S_PH
    202222U,	// Mfhi16
    202492U,	// Mflo16
    4984U,	// Move32R16
    4984U,	// MoveR3216
    6348U,	// MultRxRy16
    9255116U,	// MultRxRyRz16
    6425U,	// MultuRxRy16
    9255193U,	// MultuRxRyRz16
    1107300969U,	// NMADD_D32
    1107300969U,	// NMADD_D64
    1107302404U,	// NMADD_S
    1107300960U,	// NMSUB_D32
    1107300960U,	// NMSUB_D64
    1107302386U,	// NMSUB_S
    0U,	// NOP
    17901520U,	// NOR
    17901520U,	// NOR64
    5002U,	// NegRxRy16
    6354U,	// NotRxRy16
    17901521U,	// OR
    17901521U,	// OR64
    336668165U,	// ORi
    336668165U,	// ORi64
    2103249U,	// OrRxRxRy16
    33559601U,	// PACKRL_PH
    33559565U,	// PICK_PH
    33558840U,	// PICK_QB
    5755U,	// PRECEQU_PH_QBL
    4275U,	// PRECEQU_PH_QBLA
    6004U,	// PRECEQU_PH_QBR
    4308U,	// PRECEQU_PH_QBRA
    5795U,	// PRECEQ_W_PHL
    6044U,	// PRECEQ_W_PHR
    5740U,	// PRECEU_PH_QBL
    4259U,	// PRECEU_PH_QBLA
    5989U,	// PRECEU_PH_QBR
    4292U,	// PRECEU_PH_QBRA
    33559517U,	// PRECRQU_S_QB_PH
    33560961U,	// PRECRQ_PH_W
    33559490U,	// PRECRQ_QB_PH
    33560992U,	// PRECRQ_RS_PH_W
    33559504U,	// PRECR_QB_PH
    33560945U,	// PRECR_SRA_PH_W
    33560974U,	// PRECR_SRA_R_PH_W
    33559375U,	// PREPEND
    4660U,	// RADDU_W_QB
    7345956U,	// RDDSP
    5248993U,	// RDHWR
    5248993U,	// RDHWR64
    5424U,	// REPLV_PH
    4640U,	// REPLV_QB
    7345183U,	// REPL_PH
    7344458U,	// REPL_QB
    202694U,	// RET
    51455963U,	// ROTR
    469339U,	// ROTRV
    4748U,	// ROUND_L_D64
    6183U,	// ROUND_L_S
    4861U,	// ROUND_W_D32
    4861U,	// ROUND_W_D64
    6287U,	// ROUND_W_S
    25449U,	// RestoreIncSpF16
    27377U,	// RestoreRaF16
    0U,	// RetRA
    0U,	// RetRA16
    6296128U,	// SB
    6296128U,	// SB64
    6296128U,	// SB64_P8
    6296128U,	// SB_P8
    29269U,	// SC
    29486U,	// SCD
    29486U,	// SCD_P8
    29269U,	// SC_P8
    6296416U,	// SD
    6295581U,	// SDC1
    6295581U,	// SDC164
    6295581U,	// SDC164_P8
    4270894U,	// SDIV
    6297232U,	// SDL
    6297232U,	// SDL_P8
    6297481U,	// SDR
    6297481U,	// SDR_P8
    153096272U,	// SDXC1
    153096272U,	// SDXC164
    153096272U,	// SDXC164_P8
    6296416U,	// SD_P8
    4331U,	// SEB
    4331U,	// SEB64
    5040U,	// SEH
    5040U,	// SEH64
    6297053U,	// SH
    6297053U,	// SH64
    6297053U,	// SH64_P8
    5890U,	// SHILO
    6466U,	// SHILOV
    0U,	// SHILOV_PSEUDO
    0U,	// SHILO_PSEUDO
    33559846U,	// SHLLV_PH
    33559062U,	// SHLLV_QB
    33559783U,	// SHLLV_S_PH
    33561183U,	// SHLLV_S_W
    838865942U,	// SHLL_PH
    838865217U,	// SHLL_QB
    838866064U,	// SHLL_S_PH
    838867501U,	// SHLL_S_W
    33559836U,	// SHRAV_PH
    33559052U,	// SHRAV_QB
    33559684U,	// SHRAV_R_PH
    33558950U,	// SHRAV_R_QB
    33561094U,	// SHRAV_R_W
    838865849U,	// SHRA_PH
    838865140U,	// SHRA_QB
    838866017U,	// SHRA_R_PH
    838865283U,	// SHRA_R_QB
    838867420U,	// SHRA_R_W
    33559866U,	// SHRLV_PH
    33559082U,	// SHRLV_QB
    838865960U,	// SHRL_PH
    838865235U,	// SHRL_QB
    6297053U,	// SH_P8
    51455694U,	// SLL
    201332430U,	// SLL64_32
    201332430U,	// SLL64_64
    469301U,	// SLLV
    51652806U,	// SLT
    51652806U,	// SLT64
    51652106U,	// SLTi
    51652106U,	// SLTi64
    51652875U,	// SLTiu
    51652875U,	// SLTiu64
    51652882U,	// SLTu
    51652882U,	// SLTu64
    51454182U,	// SRA
    469286U,	// SRAV
    51455700U,	// SRL
    469308U,	// SRLV
    17900103U,	// SUB
    33559545U,	// SUBQH_PH
    33559660U,	// SUBQH_R_PH
    33561062U,	// SUBQH_R_W
    33561008U,	// SUBQH_W
    33559620U,	// SUBQ_PH
    33559717U,	// SUBQ_S_PH
    33561143U,	// SUBQ_S_W
    33558820U,	// SUBUH_QB
    33558926U,	// SUBUH_R_QB
    33559818U,	// SUBU_PH
    33559034U,	// SUBU_QB
    33559761U,	// SUBU_S_PH
    33558973U,	// SUBU_S_QB
    17901795U,	// SUBu
    153096286U,	// SUXC1
    153096286U,	// SUXC164
    6298265U,	// SW
    6298265U,	// SW64
    6298265U,	// SW64_P8
    6295619U,	// SWC1
    6295619U,	// SWC1_P8
    6297315U,	// SWL
    6297315U,	// SWL64
    6297315U,	// SWL64_P8
    6297315U,	// SWL_P8
    6297581U,	// SWR
    6297581U,	// SWR64
    6297581U,	// SWR64_P8
    6297581U,	// SWR_P8
    153096300U,	// SWXC1
    153096300U,	// SWXC1_P8
    6298265U,	// SW_P8
    203590U,	// SYNC
    25458U,	// SaveDecSpF16
    27402U,	// SaveRaF16
    6296128U,	// SbRxRyOffMemX16
    953036U,	// SelBeqZ
    953017U,	// SelBneZ
    227575583U,	// SelTBteqZCmp
    227575294U,	// SelTBteqZCmpi
    227576006U,	// SelTBteqZSlt
    227575306U,	// SelTBteqZSlti
    227576075U,	// SelTBteqZSltiu
    227576082U,	// SelTBteqZSltu
    244352799U,	// SelTBtneZCmp
    244352510U,	// SelTBtneZCmpi
    244353222U,	// SelTBtneZSlt
    244352522U,	// SelTBtneZSlti
    244353291U,	// SelTBtneZSltiu
    244353298U,	// SelTBtneZSltu
    6297053U,	// ShRxRyOffMemX16
    33560270U,	// SllX16
    2103605U,	// SllvRxRy16
    11352262U,	// SltCCRxRy16
    6342U,	// SltRxRy16
    11351562U,	// SltiCCRxImmX16
    11352331U,	// SltiuCCRxImmX16
    11352338U,	// SltuCCRxRy16
    11352338U,	// SltuRxRyRz16
    33558758U,	// SraX16
    2103590U,	// SravRxRy16
    33560276U,	// SrlX16
    2103612U,	// SrlvRxRy16
    33560803U,	// SubuRxRyRz16
    6298265U,	// SwRxRyOffMemX16
    169876121U,	// SwRxSpImmX16
    202261U,	// TAILCALL
    202694U,	// TAILCALL64_R
    202694U,	// TAILCALL_R
    4737U,	// TRUNC_L_D64
    6172U,	// TRUNC_L_S
    4850U,	// TRUNC_W_D32
    4850U,	// TRUNC_W_D64
    6276U,	// TRUNC_W_S
    4270880U,	// UDIV
    7345963U,	// WRDSP
    4268970U,	// WSBH
    17901525U,	// XOR
    17901525U,	// XOR64
    336668164U,	// XORi
    336668164U,	// XORi64
    2103253U,	// XorRxRxRy16
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 22 */ 'l', 'd', 'c', '1', 9, 0,
  /* 28 */ 's', 'd', 'c', '1', 9, 0,
  /* 34 */ 'c', 'f', 'c', '1', 9, 0,
  /* 40 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 47 */ 'c', 't', 'c', '1', 9, 0,
  /* 53 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 60 */ 'l', 'w', 'c', '1', 9, 0,
  /* 66 */ 's', 'w', 'c', '1', 9, 0,
  /* 72 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 79 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 86 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 93 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 100 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 107 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 114 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 122 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 132 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 140 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 148 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 155 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 162 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 178 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 195 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 211 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 228 */ 'd', 's', 'r', 'a', 9, 0,
  /* 234 */ 's', 'e', 'b', 9, 0,
  /* 239 */ 'l', 'b', 9, 0,
  /* 243 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 252 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 266 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 279 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 291 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 301 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 311 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 320 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 329 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 338 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 347 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 361 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 374 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 386 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 397 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 409 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 421 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 433 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 444 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 455 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 466 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 480 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 493 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 505 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 514 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 523 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 533 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 543 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 553 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 563 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 575 */ 's', 'b', 9, 0,
  /* 579 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 587 */ 'm', 's', 'u', 'b', 9, 0,
  /* 593 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 600 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 607 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 616 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 625 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 633 */ 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 640 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 651 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 662 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 672 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 683 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 692 */ 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 699 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 707 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 716 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 723 */ 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 731 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 739 */ 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 746 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 753 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 764 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 775 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 785 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 796 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 805 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 813 */ 's', 'c', 'd', 9, 0,
  /* 818 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 824 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 830 */ 'd', 's', 'h', 'd', 9, 0,
  /* 836 */ 'l', 'l', 'd', 9, 0,
  /* 841 */ 'a', 'n', 'd', 9, 0,
  /* 846 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 855 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 863 */ 's', 'd', 9, 0,
  /* 867 */ 'b', 'n', 'e', 9, 0,
  /* 872 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 9, 0,
  /* 881 */ 's', 'a', 'v', 'e', 9, 0,
  /* 887 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 893 */ 'b', 'c', '1', 'f', 9, 0,
  /* 899 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 905 */ 'n', 'e', 'g', 9, 0,
  /* 910 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 920 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 931 */ 'd', 's', 'b', 'h', 9, 0,
  /* 937 */ 'w', 's', 'b', 'h', 9, 0,
  /* 943 */ 's', 'e', 'h', 9, 0,
  /* 948 */ 'l', 'h', 9, 0,
  /* 952 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 961 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 975 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 988 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1005 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 1016 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 1026 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 1036 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 1045 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 1054 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 1063 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 1072 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 1083 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 1091 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 1100 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 1109 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 1120 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1131 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1143 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1155 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1167 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1178 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1188 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1199 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1210 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1221 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1232 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1243 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1254 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1266 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 1278 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 1289 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 1298 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 1307 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 1317 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1327 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1337 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1347 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1357 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1372 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1387 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1399 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1412 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1427 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1440 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1454 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1468 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1478 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1489 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1500 */ 's', 'h', 9, 0,
  /* 1504 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 1511 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 1517 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 1523 */ 'm', 't', 'h', 'i', 9, 0,
  /* 1529 */ 'l', 'i', 9, 0,
  /* 1533 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 1539 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 1545 */ 's', 'l', 't', 'i', 9, 0,
  /* 1551 */ 'l', 'u', 'i', 9, 0,
  /* 1556 */ 'j', 9, 0,
  /* 1559 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 1568 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 1577 */ 'b', 'a', 'l', 9, 0,
  /* 1582 */ 'j', 'a', 'l', 9, 0,
  /* 1587 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 1595 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 1603 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1615 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1627 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1643 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1658 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1674 */ 'l', 'd', 'l', 9, 0,
  /* 1679 */ 's', 'd', 'l', 9, 0,
  /* 1684 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1698 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1712 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1725 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1740 */ 'd', 's', 'l', 'l', 9, 0,
  /* 1746 */ 'd', 's', 'r', 'l', 9, 0,
  /* 1752 */ 'm', 'u', 'l', 9, 0,
  /* 1757 */ 'l', 'w', 'l', 9, 0,
  /* 1762 */ 's', 'w', 'l', 9, 0,
  /* 1767 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 1775 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 1781 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 1787 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 1793 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 1800 */ 'm', 't', 'l', 'o', 9, 0,
  /* 1806 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 1814 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 1822 */ 'c', 'm', 'p', 9, 0,
  /* 1827 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 1834 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 1841 */ 'e', 'x', 't', 'p', 9, 0,
  /* 1847 */ 'b', 'e', 'q', 9, 0,
  /* 1852 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 1864 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 1876 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 1892 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 1907 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 1923 */ 'l', 'd', 'r', 9, 0,
  /* 1928 */ 's', 'd', 'r', 9, 0,
  /* 1933 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 1947 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 1961 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 1974 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 1989 */ 'j', 'r', 9, 0,
  /* 1993 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 1999 */ 'n', 'o', 'r', 9, 0,
  /* 2004 */ 'x', 'o', 'r', 9, 0,
  /* 2009 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 2016 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 2023 */ 'l', 'w', 'r', 9, 0,
  /* 2028 */ 's', 'w', 'r', 9, 0,
  /* 2033 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 2042 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 2051 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 2060 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 2068 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 2075 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 2086 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 2097 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 2107 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 2118 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 2127 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 2134 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 2142 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 2149 */ 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 2157 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 2165 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 2172 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 2179 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 2190 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 2201 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 2211 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 2222 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 2231 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 2239 */ 'b', 'c', '1', 't', 9, 0,
  /* 2245 */ 's', 'l', 't', 9, 0,
  /* 2250 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 2257 */ 'n', 'o', 't', 9, 0,
  /* 2262 */ 'm', 'o', 'v', 't', 9, 0,
  /* 2268 */ 'l', 'b', 'u', 9, 0,
  /* 2273 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 2280 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 2287 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 2294 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 2301 */ 'l', 'h', 'u', 9, 0,
  /* 2306 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 2314 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 2321 */ 's', 'l', 't', 'u', 9, 0,
  /* 2327 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 2335 */ 'l', 'w', 'u', 9, 0,
  /* 2340 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 2347 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 2355 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 2362 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 2369 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 2377 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 2386 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 2393 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 2401 */ 'i', 'n', 's', 'v', 9, 0,
  /* 2407 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 2416 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2432 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2445 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2463 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2479 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 2488 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 2497 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 2510 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 2523 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 2533 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 2544 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 2555 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 2565 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 2576 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 2587 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 2595 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 2604 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 2614 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 2624 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 2634 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 2644 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 2654 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 2665 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 2676 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 2687 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 2699 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 2708 */ 'l', 'w', 9, 0,
  /* 2712 */ 's', 'w', 9, 0,
  /* 2716 */ 'l', 'h', 'x', 9, 0,
  /* 2721 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 2727 */ 'l', 'w', 'x', 9, 0,
  /* 2732 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 2738 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 2744 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 2750 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 2757 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 2763 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 2769 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 2776 */ 'b', 'g', 't', 'z', 9, 0,
  /* 2782 */ 'b', 'l', 't', 'z', 9, 0,
  /* 2788 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 2794 */ 'j', 'r', 'c', 9, 32, 0,
  /* 2800 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 9, '$', 'r', 'a', ',', 32, 32, '$', 's', '0', ',', 32, '$', 's', '1', ',', 32, 0,
  /* 2825 */ 's', 'a', 'v', 'e', 9, '$', 'r', 'a', ',', 32, '$', 's', '0', ',', 32, '$', 's', '1', ',', 32, 0,
  /* 2846 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 2860 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 2873 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 2885 */ 's', 'y', 'n', 'c', 32, 0,
  /* 2891 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 2899 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 2906 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 2913 */ 'd', 'i', 'n', 's', 32, 0,
  /* 2919 */ 'd', 'e', 'x', 't', 32, 0,
  /* 2925 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 2932 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 2939 */ 'c', '.', 0,
  /* 2942 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 2955 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2962 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 2972 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 2987 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 2996 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 12) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, JrRa16, JrcRa16
    return;
    break;
  case 1:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, BGEZAL, BLTZAL, CLO, CLZ, DA...
    printCPURegs(MI, 0, O); 
    O << ", "; 
    break;
  case 3:
    // CTC1, DMTC1, MTC1, MTHLIP, MultRxRyRz16, MultuRxRyRz16, SltCCRxRy16, S...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 4:
    // DMTC0_3OP64, DMTC2_3OP64, MTC0_3OP, MTC2_3OP
    printCPURegs(MI, 2, O); 
    O << ", "; 
    printCPURegs(MI, 0, O); 
    O << ", "; 
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 5:
    // FCMP_D32, FCMP_D64, FCMP_S32
    printFCCOperand(MI, 2, O); 
    break;
  case 6:
    // RestoreIncSpF16, RestoreRaF16, SaveDecSpF16, SaveRaF16
    printUnsignedImm(MI, 0, O); 
    return;
    break;
  case 7:
    // SC, SCD, SCD_P8, SC_P8
    printCPURegs(MI, 1, O); 
    O << ", "; 
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 1 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 16) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH...
    O << ", "; 
    break;
  case 1:
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, CLO, CLZ, DADD, DADDi, DADDi...
    printCPURegs(MI, 1, O); 
    break;
  case 2:
    // AddiuRxPcImmX16
    O << ", $pc, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 3:
    // AddiuSpImmX16, B, BAL_BR, BC1F, BC1T, BPOSGE32, BimmX16, BteqzX16, Btn...
    return;
    break;
  case 4:
    // BGEZAL, BLTZAL, LoadAddr32Imm, LoadImm32Reg, SLT, SLT64, SLTi, SLTi64,...
    printOperand(MI, 1, O); 
    break;
  case 5:
    // CTC1
    printCPURegs(MI, 0, O); 
    return;
    break;
  case 6:
    // DMTC1, MTC1, MTHLIP
    printOperand(MI, 0, O); 
    return;
    break;
  case 7:
    // DROTRV, DSLLV, DSRAV, DSRLV, ROTRV, SLLV, SRAV, SRLV
    printCPURegs(MI, 2, O); 
    O << ", "; 
    printCPURegs(MI, 1, O); 
    return;
    break;
  case 8:
    // FCMP_D32, FCMP_D64
    O << ".d\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // FCMP_S32
    O << ".s\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // Jal16
    O << "\n\tnop"; 
    return;
    break;
  case 11:
    // LL, LLD, LLD_P8, LL_P8, LoadAddr32Reg
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t"; 
    printOperand(MI, 1, O); 
    O << "\n2:"; 
    return;
    break;
  case 13:
    // MultRxRyRz16, MultuRxRyRz16, SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImm...
    printOperand(MI, 2, O); 
    break;
  case 14:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 20) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, DADD, DADDi, DADDiu, DADDu, ...
    O << ", "; 
    break;
  case 2:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, INSV, LBUX, LDXC1, LDXC1...
    printOperand(MI, 2, O); 
    break;
  case 3:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64
    printMemOperandEA(MI, 1, O); 
    return;
    break;
  case 4:
    // BGEZAL, BLTZAL, CLO, CLZ, DCLO, DCLZ, DMULT, DMULTu, DSBH, DSDIV, DSHD...
    return;
    break;
  case 5:
    // CFC1, RDHWR, RDHWR64
    printCPURegs(MI, 1, O); 
    return;
    break;
  case 6:
    // LB, LB64, LB64_P8, LB_P8, LBu, LBu64, LBu64_P8, LBu_P8, LD, LDC1, LDC1...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // LUi, LUi64, RDDSP, REPL_PH, REPL_QB, WRDSP
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 8:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t"; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 9:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O); 
    break;
  case 10:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t"; 
    printOperand(MI, 0, O); 
    O << ", $t8"; 
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 15 unique commands.
  switch ((Bits >> 24) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, AddiuRxImmX16, AddiuRxRxImmX16, AndRxR...
    return;
    break;
  case 1:
    // ADD, ADDu, AND, AND64, DADD, DADDu, DSUBu, MUL, NOR, NOR64, OR, OR64, ...
    printCPURegs(MI, 2, O); 
    return;
    break;
  case 2:
    // ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADDQ_S_W...
    O << ", "; 
    break;
  case 3:
    // ADDi, ADDiu, DADDi, DADDiu, DROTR, DSLL, DSLL32, DSRA, DSRA32, DSRL, D...
    printOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // ANDi, DANDi, DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, DMFC0_3OP64, DMFC...
    printUnsignedImm(MI, 2, O); 
    break;
  case 5:
    // AddiuRxRxImm16
    O << "\t# 16 bit inst"; 
    return;
    break;
  case 6:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // DSLL64_32
    O << ", 32"; 
    return;
    break;
  case 9:
    // LBUX, LDXC1, LDXC164, LDXC164_P8, LHX, LUXC1, LUXC164, LWX, LWXC1, LWX...
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 10:
    // LwRxSpImmX16, SwRxSpImmX16
    O << " ( "; 
    printOperand(MI, 1, O); 
    O << " ); "; 
    return;
    break;
  case 11:
    // MOVF_D32, MOVF_D64, MOVF_I, MOVF_I64, MOVF_S, MOVT_D32, MOVT_D64, MOVT...
    O << ", $fcc0"; 
    return;
    break;
  case 12:
    // SLL64_32, SLL64_64
    O << ", 0"; 
    return;
    break;
  case 13:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 14:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 28) & 3) {
  default:   // unreachable.
  case 0:
    // ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADDQ_S_W...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ANDi, DANDi, DMFC0_3OP64, DMFC2_3OP64, MFC0_3OP, MFC2_3OP, ORi, ORi64,...
    return;
    break;
  case 2:
    // DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, EXT, INS
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // EXTP, EXTPDP, EXTR_RS_W, EXTR_R_W, EXTR_S_H, EXTR_W, SHLL_PH, SHLL_QB,...
    printUnsignedImm(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 30) & 1) {
    // MADD_D32, MADD_D64, MADD_S, MSUB_D32, MSUB_D64, MSUB_S, NMADD_D32, NMA...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
  } else {
    // ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADDQ_S_W...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 159 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'f', '2', '0', 0,
  /* 8 */ 'f', '3', '0', 0,
  /* 12 */ 'a', 'c', '0', 0,
  /* 16 */ 'f', 'c', 'c', '0', 0,
  /* 21 */ 'f', '0', 0,
  /* 24 */ 'f', '1', '1', 0,
  /* 28 */ 'f', '2', '1', 0,
  /* 32 */ 'f', '3', '1', 0,
  /* 36 */ 'a', 'c', '1', 0,
  /* 40 */ 'f', '1', 0,
  /* 43 */ 'f', '1', '2', 0,
  /* 47 */ 'f', '2', '2', 0,
  /* 51 */ 'a', 'c', '2', 0,
  /* 55 */ 'f', '2', 0,
  /* 58 */ 'f', '1', '3', 0,
  /* 62 */ 'f', '2', '3', 0,
  /* 66 */ 'a', 'c', '3', 0,
  /* 70 */ 'f', '3', 0,
  /* 73 */ 'f', '1', '4', 0,
  /* 77 */ 'f', '2', '4', 0,
  /* 81 */ 'f', '4', 0,
  /* 84 */ 'f', '1', '5', 0,
  /* 88 */ 'f', '2', '5', 0,
  /* 92 */ 'f', '5', 0,
  /* 95 */ 'f', '1', '6', 0,
  /* 99 */ 'f', '2', '6', 0,
  /* 103 */ 'f', '6', 0,
  /* 106 */ 'f', '1', '7', 0,
  /* 110 */ 'f', '2', '7', 0,
  /* 114 */ 'f', '7', 0,
  /* 117 */ 'f', '1', '8', 0,
  /* 121 */ 'f', '2', '8', 0,
  /* 125 */ 'f', '8', 0,
  /* 128 */ 'f', '1', '9', 0,
  /* 132 */ 'f', '2', '9', 0,
  /* 136 */ 'f', '9', 0,
  /* 139 */ 'r', 'a', 0,
  /* 142 */ 'p', 'c', 0,
  /* 145 */ 'h', 'i', 0,
  /* 148 */ 'd', 's', 'p', 'c', 't', 'r', 'l', 0,
  /* 156 */ 'l', 'o', 0,
  /* 159 */ 'z', 'e', 'r', 'o', 0,
  /* 164 */ 'f', 'p', 0,
  /* 167 */ 'g', 'p', 0,
  /* 170 */ 's', 'p', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    75, 75, 86, 86, 97, 97, 108, 108, 12, 36, 51, 66, 26, 26, 
    21, 21, 55, 40, 81, 55, 103, 70, 125, 81, 0, 92, 43, 103, 
    73, 114, 95, 125, 117, 136, 4, 0, 47, 24, 77, 43, 99, 58, 
    121, 73, 8, 84, 95, 106, 117, 128, 4, 28, 47, 62, 77, 88, 
    99, 110, 121, 132, 8, 32, 148, 21, 40, 55, 70, 81, 92, 103, 
    114, 125, 136, 0, 24, 43, 58, 73, 84, 95, 106, 117, 128, 4, 
    28, 47, 62, 77, 88, 99, 110, 121, 132, 8, 32, 16, 33, 164, 
    164, 167, 167, 145, 145, 133, 133, 100, 100, 111, 111, 156, 156, 142, 
    139, 139, 96, 96, 107, 107, 118, 118, 129, 129, 5, 5, 29, 29, 
    48, 48, 63, 63, 170, 170, 119, 119, 130, 130, 1, 1, 25, 25, 
    44, 44, 59, 59, 74, 74, 85, 85, 78, 78, 89, 89, 45, 45, 
    60, 60, 159, 159, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  llvm_unreachable("Operand not in map!");
}

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu CPURegsOpnd:$dst, CPURegsOpnd:$src, ZERO)
      AsmString = "move $dst, $src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu CPU64RegsOpnd:$dst, CPU64RegsOpnd:$src, ZERO_64)
      AsmString = "move $dst, $src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::JALR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR RA, CPURegs:$rs)
      AsmString = "jalr $rs";
      OpMap.push_back(std::make_pair("rs", 1));
      break;
    }
    return false;
  case Mips::JALR64:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Mips::RA_64 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (JALR64 RA_64, CPU64Regs:$rs)
      AsmString = "jalr $rs";
      OpMap.push_back(std::make_pair("rs", 1));
      break;
    }
    return false;
  case Mips::NOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (NOR CPURegsOpnd:$rt, CPURegsOpnd:$rs, ZERO)
      AsmString = "not $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 1));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::NOR64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::CPU64RegsRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (NOR64 CPU64RegsOpnd:$rt, CPU64RegsOpnd:$rs, ZERO_64)
      AsmString = "not $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 1));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB CPURegsOpnd:$rt, ZERO, CPURegsOpnd:$rs)
      AsmString = "neg $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 2));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::CPURegsRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu CPURegsOpnd:$rt, ZERO, CPURegsOpnd:$rs)
      AsmString = "negu $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 2));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
