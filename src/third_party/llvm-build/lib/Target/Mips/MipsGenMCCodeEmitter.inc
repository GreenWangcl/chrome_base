/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Machine Code Emitter                                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

uint64_t MipsMCCodeEmitter::getBinaryCodeForInstr(const MCInst &MI,
    SmallVectorImpl<MCFixup> &Fixups) const {
  static const uint64_t InstBits[] = {
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(2080375378),	// ABSQ_S_PH
    UINT64_C(2080374866),	// ABSQ_S_QB
    UINT64_C(2080375890),	// ABSQ_S_W
    UINT64_C(32),	// ADD
    UINT64_C(2080375320),	// ADDQH_PH
    UINT64_C(2080375448),	// ADDQH_R_PH
    UINT64_C(2080375960),	// ADDQH_R_W
    UINT64_C(2080375832),	// ADDQH_W
    UINT64_C(2080375440),	// ADDQ_PH
    UINT64_C(2080375696),	// ADDQ_S_PH
    UINT64_C(2080376208),	// ADDQ_S_W
    UINT64_C(2080375824),	// ADDSC
    UINT64_C(2080374808),	// ADDUH_QB
    UINT64_C(2080374936),	// ADDUH_R_QB
    UINT64_C(2080375312),	// ADDU_PH
    UINT64_C(2080374800),	// ADDU_QB
    UINT64_C(2080375568),	// ADDU_S_PH
    UINT64_C(2080375056),	// ADDU_S_QB
    UINT64_C(2080375888),	// ADDWC
    UINT64_C(536870912),	// ADDi
    UINT64_C(603979776),	// ADDiu
    UINT64_C(33),	// ADDu
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(36),	// AND
    UINT64_C(36),	// AND64
    UINT64_C(805306368),	// ANDi
    UINT64_C(2080374833),	// APPEND
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(4026550272),	// AddiuRxImmX16
    UINT64_C(4026533888),	// AddiuRxPcImmX16
    UINT64_C(18432),	// AddiuRxRxImm16
    UINT64_C(4026550272),	// AddiuRxRxImmX16
    UINT64_C(4026548224),	// AddiuRxRyOffMemX16
    UINT64_C(4026544896),	// AddiuSpImmX16
    UINT64_C(57345),	// AdduRxRyRz16
    UINT64_C(59404),	// AndRxRxRy16
    UINT64_C(268435456),	// B
    UINT64_C(2080375857),	// BALIGN
    UINT64_C(68222976),	// BAL_BR
    UINT64_C(1157627904),	// BC1F
    UINT64_C(1157693440),	// BC1T
    UINT64_C(268435456),	// BEQ
    UINT64_C(268435456),	// BEQ64
    UINT64_C(67174400),	// BGEZ
    UINT64_C(67174400),	// BGEZ64
    UINT64_C(68222976),	// BGEZAL
    UINT64_C(469762048),	// BGTZ
    UINT64_C(469762048),	// BGTZ64
    UINT64_C(2080376530),	// BITREV
    UINT64_C(402653184),	// BLEZ
    UINT64_C(402653184),	// BLEZ64
    UINT64_C(67108864),	// BLTZ
    UINT64_C(67108864),	// BLTZ64
    UINT64_C(68157440),	// BLTZAL
    UINT64_C(335544320),	// BNE
    UINT64_C(335544320),	// BNE64
    UINT64_C(68943872),	// BPOSGE32
    UINT64_C(0),
    UINT64_C(4026540032),	// BeqzRxImmX16
    UINT64_C(4026535936),	// BimmX16
    UINT64_C(4026542080),	// BnezRxImmX16
    UINT64_C(4026544128),	// BteqzT8CmpX16
    UINT64_C(4026544128),	// BteqzT8CmpiX16
    UINT64_C(4026544128),	// BteqzT8SltX16
    UINT64_C(4026544128),	// BteqzT8SltiX16
    UINT64_C(4026544128),	// BteqzT8SltiuX16
    UINT64_C(4026544128),	// BteqzT8SltuX16
    UINT64_C(4026544128),	// BteqzX16
    UINT64_C(4026544128),	// BtnezT8CmpX16
    UINT64_C(4026544128),	// BtnezT8CmpiX16
    UINT64_C(4026544128),	// BtnezT8SltX16
    UINT64_C(4026544128),	// BtnezT8SltiX16
    UINT64_C(4026544128),	// BtnezT8SltiuX16
    UINT64_C(4026544128),	// BtnezT8SltuX16
    UINT64_C(4026544384),	// BtnezX16
    UINT64_C(0),
    UINT64_C(1176502282),	// CEIL_L_D64
    UINT64_C(1174405130),	// CEIL_L_S
    UINT64_C(1176502286),	// CEIL_W_D32
    UINT64_C(1176502286),	// CEIL_W_D64
    UINT64_C(1174405134),	// CEIL_W_S
    UINT64_C(1145044992),	// CFC1
    UINT64_C(1879048225),	// CLO
    UINT64_C(1879048224),	// CLZ
    UINT64_C(2080376337),	// CMPGDU_EQ_QB
    UINT64_C(2080376465),	// CMPGDU_LE_QB
    UINT64_C(2080376401),	// CMPGDU_LT_QB
    UINT64_C(2080375057),	// CMPGU_EQ_QB
    UINT64_C(2080375185),	// CMPGU_LE_QB
    UINT64_C(2080375121),	// CMPGU_LT_QB
    UINT64_C(2080374801),	// CMPU_EQ_QB
    UINT64_C(2080374929),	// CMPU_LE_QB
    UINT64_C(2080374865),	// CMPU_LT_QB
    UINT64_C(2080375313),	// CMP_EQ_PH
    UINT64_C(2080375441),	// CMP_LE_PH
    UINT64_C(2080375377),	// CMP_LT_PH
    UINT64_C(1153433600),	// CTC1
    UINT64_C(1174405153),	// CVT_D32_S
    UINT64_C(1182793761),	// CVT_D32_W
    UINT64_C(1184890913),	// CVT_D64_L
    UINT64_C(1174405153),	// CVT_D64_S
    UINT64_C(1182793761),	// CVT_D64_W
    UINT64_C(1176502309),	// CVT_L_D64
    UINT64_C(1174405157),	// CVT_L_S
    UINT64_C(1176502304),	// CVT_S_D32
    UINT64_C(1176502304),	// CVT_S_D64
    UINT64_C(1184890912),	// CVT_S_L
    UINT64_C(1182793760),	// CVT_S_W
    UINT64_C(1176502308),	// CVT_W_D32
    UINT64_C(1176502308),	// CVT_W_D64
    UINT64_C(1174405156),	// CVT_W_S
    UINT64_C(0),
    UINT64_C(44),	// DADD
    UINT64_C(1610612736),	// DADDi
    UINT64_C(1677721600),	// DADDiu
    UINT64_C(45),	// DADDu
    UINT64_C(805306368),	// DANDi
    UINT64_C(1879048229),	// DCLO
    UINT64_C(1879048228),	// DCLZ
    UINT64_C(2080374787),	// DEXT
    UINT64_C(2080374785),	// DEXTM
    UINT64_C(2080374786),	// DEXTU
    UINT64_C(2080374791),	// DINS
    UINT64_C(2080374789),	// DINSM
    UINT64_C(2080374790),	// DINSU
    UINT64_C(1075838976),	// DMFC0_3OP64
    UINT64_C(1142947840),	// DMFC1
    UINT64_C(1210056704),	// DMFC2_3OP64
    UINT64_C(1084227584),	// DMTC0_3OP64
    UINT64_C(1151336448),	// DMTC1
    UINT64_C(1218445312),	// DMTC2_3OP64
    UINT64_C(28),	// DMULT
    UINT64_C(29),	// DMULTu
    UINT64_C(2080376496),	// DPAQX_SA_W_PH
    UINT64_C(0),
    UINT64_C(2080376368),	// DPAQX_S_W_PH
    UINT64_C(0),
    UINT64_C(2080375600),	// DPAQ_SA_L_W
    UINT64_C(0),
    UINT64_C(2080375088),	// DPAQ_S_W_PH
    UINT64_C(0),
    UINT64_C(2080375024),	// DPAU_H_QBL
    UINT64_C(0),
    UINT64_C(2080375280),	// DPAU_H_QBR
    UINT64_C(0),
    UINT64_C(2080375344),	// DPAX_W_PH
    UINT64_C(0),
    UINT64_C(2080374832),	// DPA_W_PH
    UINT64_C(0),
    UINT64_C(2080376560),	// DPSQX_SA_W_PH
    UINT64_C(0),
    UINT64_C(2080376432),	// DPSQX_S_W_PH
    UINT64_C(0),
    UINT64_C(2080375664),	// DPSQ_SA_L_W
    UINT64_C(0),
    UINT64_C(2080375152),	// DPSQ_S_W_PH
    UINT64_C(0),
    UINT64_C(2080375536),	// DPSU_H_QBL
    UINT64_C(0),
    UINT64_C(2080375792),	// DPSU_H_QBR
    UINT64_C(0),
    UINT64_C(2080375408),	// DPSX_W_PH
    UINT64_C(0),
    UINT64_C(2080374896),	// DPS_W_PH
    UINT64_C(0),
    UINT64_C(2097210),	// DROTR
    UINT64_C(86),	// DROTRV
    UINT64_C(2080374948),	// DSBH
    UINT64_C(30),	// DSDIV
    UINT64_C(2080375140),	// DSHD
    UINT64_C(56),	// DSLL
    UINT64_C(60),	// DSLL32
    UINT64_C(60),	// DSLL64_32
    UINT64_C(20),	// DSLLV
    UINT64_C(59),	// DSRA
    UINT64_C(63),	// DSRA32
    UINT64_C(23),	// DSRAV
    UINT64_C(58),	// DSRL
    UINT64_C(62),	// DSRL32
    UINT64_C(22),	// DSRLV
    UINT64_C(47),	// DSUBu
    UINT64_C(31),	// DUDIV
    UINT64_C(59418),	// DivRxRy16
    UINT64_C(59419),	// DivuRxRy16
    UINT64_C(2080374784),	// EXT
    UINT64_C(2080374968),	// EXTP
    UINT64_C(2080375480),	// EXTPDP
    UINT64_C(2080375544),	// EXTPDPV
    UINT64_C(2080375032),	// EXTPV
    UINT64_C(2080375288),	// EXTRV_RS_W
    UINT64_C(2080375160),	// EXTRV_R_W
    UINT64_C(2080375800),	// EXTRV_S_H
    UINT64_C(2080374904),	// EXTRV_W
    UINT64_C(2080375224),	// EXTR_RS_W
    UINT64_C(2080375096),	// EXTR_R_W
    UINT64_C(2080375736),	// EXTR_S_H
    UINT64_C(2080374840),	// EXTR_W
    UINT64_C(0),
    UINT64_C(1176502277),	// FABS_D32
    UINT64_C(1176502277),	// FABS_D64
    UINT64_C(1174405125),	// FABS_S
    UINT64_C(1176502272),	// FADD_D32
    UINT64_C(1176502272),	// FADD_D64
    UINT64_C(1174405120),	// FADD_S
    UINT64_C(1176502320),	// FCMP_D32
    UINT64_C(1176502320),	// FCMP_D64
    UINT64_C(1174405168),	// FCMP_S32
    UINT64_C(1176502275),	// FDIV_D32
    UINT64_C(1176502275),	// FDIV_D64
    UINT64_C(1174405123),	// FDIV_S
    UINT64_C(1176502283),	// FLOOR_L_D64
    UINT64_C(1174405131),	// FLOOR_L_S
    UINT64_C(1176502287),	// FLOOR_W_D32
    UINT64_C(1176502287),	// FLOOR_W_D64
    UINT64_C(1174405135),	// FLOOR_W_S
    UINT64_C(1176502278),	// FMOV_D32
    UINT64_C(1176502278),	// FMOV_D64
    UINT64_C(1174405126),	// FMOV_S
    UINT64_C(1176502274),	// FMUL_D32
    UINT64_C(1176502274),	// FMUL_D64
    UINT64_C(1174405122),	// FMUL_S
    UINT64_C(1176502279),	// FNEG_D32
    UINT64_C(1176502279),	// FNEG_D64
    UINT64_C(1174405127),	// FNEG_S
    UINT64_C(1176502276),	// FSQRT_D32
    UINT64_C(1176502276),	// FSQRT_D64
    UINT64_C(1174405124),	// FSQRT_S
    UINT64_C(1176502273),	// FSUB_D32
    UINT64_C(1176502273),	// FSUB_D64
    UINT64_C(1174405121),	// FSUB_S
    UINT64_C(2080374788),	// INS
    UINT64_C(2080374796),	// INSV
    UINT64_C(134217728),	// J
    UINT64_C(201326592),	// JAL
    UINT64_C(9),	// JALR
    UINT64_C(9),	// JALR64
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(8),	// JR
    UINT64_C(8),	// JR64
    UINT64_C(402653184),	// Jal16
    UINT64_C(59424),	// JrRa16
    UINT64_C(59424),	// JrcRa16
    UINT64_C(59584),	// JrcRx16
    UINT64_C(59392),	// JumpLinkReg16
    UINT64_C(2147483648),	// LB
    UINT64_C(2147483648),	// LB64
    UINT64_C(2147483648),	// LB64_P8
    UINT64_C(2080375178),	// LBUX
    UINT64_C(2147483648),	// LB_P8
    UINT64_C(2415919104),	// LBu
    UINT64_C(2415919104),	// LBu64
    UINT64_C(2415919104),	// LBu64_P8
    UINT64_C(2415919104),	// LBu_P8
    UINT64_C(3690987520),	// LD
    UINT64_C(3556769792),	// LDC1
    UINT64_C(3556769792),	// LDC164
    UINT64_C(3556769792),	// LDC164_P8
    UINT64_C(1744830464),	// LDL
    UINT64_C(1744830464),	// LDL_P8
    UINT64_C(1811939328),	// LDR
    UINT64_C(1811939328),	// LDR_P8
    UINT64_C(1275068417),	// LDXC1
    UINT64_C(1275068417),	// LDXC164
    UINT64_C(1275068417),	// LDXC164_P8
    UINT64_C(3690987520),	// LD_P8
    UINT64_C(603979776),	// LEA_ADDiu
    UINT64_C(1677721600),	// LEA_ADDiu64
    UINT64_C(2214592512),	// LH
    UINT64_C(2214592512),	// LH64
    UINT64_C(2214592512),	// LH64_P8
    UINT64_C(2080375050),	// LHX
    UINT64_C(2214592512),	// LH_P8
    UINT64_C(2483027968),	// LHu
    UINT64_C(2483027968),	// LHu64
    UINT64_C(2483027968),	// LHu64_P8
    UINT64_C(2483027968),	// LHu_P8
    UINT64_C(3221225472),	// LL
    UINT64_C(3489660928),	// LLD
    UINT64_C(3489660928),	// LLD_P8
    UINT64_C(3221225472),	// LL_P8
    UINT64_C(1275068421),	// LUXC1
    UINT64_C(1275068421),	// LUXC164
    UINT64_C(1006632960),	// LUi
    UINT64_C(1006632960),	// LUi64
    UINT64_C(2348810240),	// LW
    UINT64_C(2348810240),	// LW64
    UINT64_C(2348810240),	// LW64_P8
    UINT64_C(3288334336),	// LWC1
    UINT64_C(3288334336),	// LWC1_P8
    UINT64_C(2281701376),	// LWL
    UINT64_C(2281701376),	// LWL64
    UINT64_C(2281701376),	// LWL64_P8
    UINT64_C(2281701376),	// LWL_P8
    UINT64_C(2550136832),	// LWR
    UINT64_C(2550136832),	// LWR64
    UINT64_C(2550136832),	// LWR64_P8
    UINT64_C(2550136832),	// LWR_P8
    UINT64_C(2080374794),	// LWX
    UINT64_C(1275068416),	// LWXC1
    UINT64_C(1275068416),	// LWXC1_P8
    UINT64_C(2348810240),	// LW_P8
    UINT64_C(2617245696),	// LWu64
    UINT64_C(2617245696),	// LWu64_P8
    UINT64_C(4026570752),	// LbRxRyOffMemX16
    UINT64_C(4026572800),	// LbuRxRyOffMemX16
    UINT64_C(4026572800),	// LhRxRyOffMemX16
    UINT64_C(4026572800),	// LhuRxRyOffMemX16
    UINT64_C(4026558464),	// LiRxImmX16
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(4026570752),	// LwRxRyOffMemX16
    UINT64_C(4026576896),	// LwRxSpImmX16
    UINT64_C(1879048192),	// MADD
    UINT64_C(1879048193),	// MADDU
    UINT64_C(1879048193),	// MADDU_DSP
    UINT64_C(0),
    UINT64_C(1275068449),	// MADD_D32
    UINT64_C(1275068449),	// MADD_D64
    UINT64_C(1879048192),	// MADD_DSP
    UINT64_C(0),
    UINT64_C(1275068448),	// MADD_S
    UINT64_C(2080375856),	// MAQ_SA_W_PHL
    UINT64_C(0),
    UINT64_C(2080375984),	// MAQ_SA_W_PHR
    UINT64_C(0),
    UINT64_C(2080376112),	// MAQ_S_W_PHL
    UINT64_C(0),
    UINT64_C(2080376240),	// MAQ_S_W_PHR
    UINT64_C(0),
    UINT64_C(1073741824),	// MFC0_3OP
    UINT64_C(1140850688),	// MFC1
    UINT64_C(1207959552),	// MFC2_3OP
    UINT64_C(16),	// MFHI
    UINT64_C(16),	// MFHI64
    UINT64_C(18),	// MFLO
    UINT64_C(18),	// MFLO64
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(2080375952),	// MODSUB
    UINT64_C(0),
    UINT64_C(1176502289),	// MOVF_D32
    UINT64_C(1176502289),	// MOVF_D64
    UINT64_C(1),	// MOVF_I
    UINT64_C(1),	// MOVF_I64
    UINT64_C(1174405137),	// MOVF_S
    UINT64_C(1176502291),	// MOVN_I64_D64
    UINT64_C(11),	// MOVN_I64_I
    UINT64_C(11),	// MOVN_I64_I64
    UINT64_C(1174405139),	// MOVN_I64_S
    UINT64_C(1176502291),	// MOVN_I_D32
    UINT64_C(1176502291),	// MOVN_I_D64
    UINT64_C(11),	// MOVN_I_I
    UINT64_C(11),	// MOVN_I_I64
    UINT64_C(1174405139),	// MOVN_I_S
    UINT64_C(1176567825),	// MOVT_D32
    UINT64_C(1176567825),	// MOVT_D64
    UINT64_C(65537),	// MOVT_I
    UINT64_C(65537),	// MOVT_I64
    UINT64_C(1174470673),	// MOVT_S
    UINT64_C(1176502290),	// MOVZ_I64_D64
    UINT64_C(10),	// MOVZ_I64_I
    UINT64_C(10),	// MOVZ_I64_I64
    UINT64_C(1174405138),	// MOVZ_I64_S
    UINT64_C(1176502290),	// MOVZ_I_D32
    UINT64_C(1176502290),	// MOVZ_I_D64
    UINT64_C(10),	// MOVZ_I_I
    UINT64_C(10),	// MOVZ_I_I64
    UINT64_C(1174405138),	// MOVZ_I_S
    UINT64_C(1879048196),	// MSUB
    UINT64_C(1879048197),	// MSUBU
    UINT64_C(1879048197),	// MSUBU_DSP
    UINT64_C(0),
    UINT64_C(1275068457),	// MSUB_D32
    UINT64_C(1275068457),	// MSUB_D64
    UINT64_C(1879048196),	// MSUB_DSP
    UINT64_C(0),
    UINT64_C(1275068456),	// MSUB_S
    UINT64_C(1082130432),	// MTC0_3OP
    UINT64_C(1149239296),	// MTC1
    UINT64_C(1216348160),	// MTC2_3OP
    UINT64_C(17),	// MTHI
    UINT64_C(17),	// MTHI64
    UINT64_C(2080376824),	// MTHLIP
    UINT64_C(0),
    UINT64_C(19),	// MTLO
    UINT64_C(19),	// MTLO64
    UINT64_C(1879048194),	// MUL
    UINT64_C(2080376592),	// MULEQ_S_W_PHL
    UINT64_C(2080376656),	// MULEQ_S_W_PHR
    UINT64_C(2080375184),	// MULEU_S_PH_QBL
    UINT64_C(2080375248),	// MULEU_S_PH_QBR
    UINT64_C(2080376784),	// MULQ_RS_PH
    UINT64_C(2080376280),	// MULQ_RS_W
    UINT64_C(2080376720),	// MULQ_S_PH
    UINT64_C(2080376216),	// MULQ_S_W
    UINT64_C(2080375216),	// MULSAQ_S_W_PH
    UINT64_C(0),
    UINT64_C(2080374960),	// MULSA_W_PH
    UINT64_C(0),
    UINT64_C(24),	// MULT
    UINT64_C(25),	// MULTU_DSP
    UINT64_C(0),
    UINT64_C(24),	// MULT_DSP
    UINT64_C(0),
    UINT64_C(25),	// MULTu
    UINT64_C(2080375576),	// MUL_PH
    UINT64_C(2080375704),	// MUL_S_PH
    UINT64_C(59408),	// Mfhi16
    UINT64_C(59410),	// Mflo16
    UINT64_C(25856),	// Move32R16
    UINT64_C(26368),	// MoveR3216
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(1275068465),	// NMADD_D32
    UINT64_C(1275068465),	// NMADD_D64
    UINT64_C(1275068464),	// NMADD_S
    UINT64_C(1275068473),	// NMSUB_D32
    UINT64_C(1275068473),	// NMSUB_D64
    UINT64_C(1275068472),	// NMSUB_S
    UINT64_C(0),
    UINT64_C(39),	// NOR
    UINT64_C(39),	// NOR64
    UINT64_C(59421),	// NegRxRy16
    UINT64_C(59407),	// NotRxRy16
    UINT64_C(37),	// OR
    UINT64_C(37),	// OR64
    UINT64_C(872415232),	// ORi
    UINT64_C(872415232),	// ORi64
    UINT64_C(59405),	// OrRxRxRy16
    UINT64_C(2080375697),	// PACKRL_PH
    UINT64_C(2080375505),	// PICK_PH
    UINT64_C(2080374993),	// PICK_QB
    UINT64_C(2080375058),	// PRECEQU_PH_QBL
    UINT64_C(2080375186),	// PRECEQU_PH_QBLA
    UINT64_C(2080375122),	// PRECEQU_PH_QBR
    UINT64_C(2080375250),	// PRECEQU_PH_QBRA
    UINT64_C(2080375570),	// PRECEQ_W_PHL
    UINT64_C(2080375634),	// PRECEQ_W_PHR
    UINT64_C(2080376594),	// PRECEU_PH_QBL
    UINT64_C(2080376722),	// PRECEU_PH_QBLA
    UINT64_C(2080376658),	// PRECEU_PH_QBR
    UINT64_C(2080376786),	// PRECEU_PH_QBRA
    UINT64_C(2080375761),	// PRECRQU_S_QB_PH
    UINT64_C(2080376081),	// PRECRQ_PH_W
    UINT64_C(2080375569),	// PRECRQ_QB_PH
    UINT64_C(2080376145),	// PRECRQ_RS_PH_W
    UINT64_C(2080375633),	// PRECR_QB_PH
    UINT64_C(2080376721),	// PRECR_SRA_PH_W
    UINT64_C(2080376785),	// PRECR_SRA_R_PH_W
    UINT64_C(2080374897),	// PREPEND
    UINT64_C(2080376080),	// RADDU_W_QB
    UINT64_C(2080375992),	// RDDSP
    UINT64_C(2080374843),	// RDHWR
    UINT64_C(2080374843),	// RDHWR64
    UINT64_C(2080375506),	// REPLV_PH
    UINT64_C(2080374994),	// REPLV_QB
    UINT64_C(2080375442),	// REPL_PH
    UINT64_C(2080374930),	// REPL_QB
    UINT64_C(8),	// RET
    UINT64_C(2097154),	// ROTR
    UINT64_C(70),	// ROTRV
    UINT64_C(1176502280),	// ROUND_L_D64
    UINT64_C(1174405128),	// ROUND_L_S
    UINT64_C(1176502284),	// ROUND_W_D32
    UINT64_C(1176502284),	// ROUND_W_D64
    UINT64_C(1174405132),	// ROUND_W_S
    UINT64_C(25600),	// RestoreIncSpF16
    UINT64_C(25712),	// RestoreRaF16
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(2684354560),	// SB
    UINT64_C(2684354560),	// SB64
    UINT64_C(2684354560),	// SB64_P8
    UINT64_C(2684354560),	// SB_P8
    UINT64_C(3758096384),	// SC
    UINT64_C(4026531840),	// SCD
    UINT64_C(4026531840),	// SCD_P8
    UINT64_C(3758096384),	// SC_P8
    UINT64_C(4227858432),	// SD
    UINT64_C(4093640704),	// SDC1
    UINT64_C(4093640704),	// SDC164
    UINT64_C(4093640704),	// SDC164_P8
    UINT64_C(26),	// SDIV
    UINT64_C(2952790016),	// SDL
    UINT64_C(2952790016),	// SDL_P8
    UINT64_C(3019898880),	// SDR
    UINT64_C(3019898880),	// SDR_P8
    UINT64_C(1275068425),	// SDXC1
    UINT64_C(1275068425),	// SDXC164
    UINT64_C(1275068425),	// SDXC164_P8
    UINT64_C(4227858432),	// SD_P8
    UINT64_C(2080375840),	// SEB
    UINT64_C(2080375840),	// SEB64
    UINT64_C(2080376352),	// SEH
    UINT64_C(2080376352),	// SEH64
    UINT64_C(2751463424),	// SH
    UINT64_C(2751463424),	// SH64
    UINT64_C(2751463424),	// SH64_P8
    UINT64_C(2080376504),	// SHILO
    UINT64_C(2080376568),	// SHILOV
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(2080375443),	// SHLLV_PH
    UINT64_C(2080374931),	// SHLLV_QB
    UINT64_C(2080375699),	// SHLLV_S_PH
    UINT64_C(2080376211),	// SHLLV_S_W
    UINT64_C(2080375315),	// SHLL_PH
    UINT64_C(2080374803),	// SHLL_QB
    UINT64_C(2080375571),	// SHLL_S_PH
    UINT64_C(2080376083),	// SHLL_S_W
    UINT64_C(2080375507),	// SHRAV_PH
    UINT64_C(2080375187),	// SHRAV_QB
    UINT64_C(2080375763),	// SHRAV_R_PH
    UINT64_C(2080375251),	// SHRAV_R_QB
    UINT64_C(2080376275),	// SHRAV_R_W
    UINT64_C(2080375379),	// SHRA_PH
    UINT64_C(2080375059),	// SHRA_QB
    UINT64_C(2080375635),	// SHRA_R_PH
    UINT64_C(2080375123),	// SHRA_R_QB
    UINT64_C(2080376147),	// SHRA_R_W
    UINT64_C(2080376531),	// SHRLV_PH
    UINT64_C(2080374995),	// SHRLV_QB
    UINT64_C(2080376403),	// SHRL_PH
    UINT64_C(2080374867),	// SHRL_QB
    UINT64_C(2751463424),	// SH_P8
    UINT64_C(0),	// SLL
    UINT64_C(0),	// SLL64_32
    UINT64_C(0),	// SLL64_64
    UINT64_C(4),	// SLLV
    UINT64_C(42),	// SLT
    UINT64_C(42),	// SLT64
    UINT64_C(671088640),	// SLTi
    UINT64_C(671088640),	// SLTi64
    UINT64_C(738197504),	// SLTiu
    UINT64_C(738197504),	// SLTiu64
    UINT64_C(43),	// SLTu
    UINT64_C(43),	// SLTu64
    UINT64_C(3),	// SRA
    UINT64_C(7),	// SRAV
    UINT64_C(2),	// SRL
    UINT64_C(6),	// SRLV
    UINT64_C(34),	// SUB
    UINT64_C(2080375384),	// SUBQH_PH
    UINT64_C(2080375512),	// SUBQH_R_PH
    UINT64_C(2080376024),	// SUBQH_R_W
    UINT64_C(2080375896),	// SUBQH_W
    UINT64_C(2080375504),	// SUBQ_PH
    UINT64_C(2080375760),	// SUBQ_S_PH
    UINT64_C(2080376272),	// SUBQ_S_W
    UINT64_C(2080374872),	// SUBUH_QB
    UINT64_C(2080375000),	// SUBUH_R_QB
    UINT64_C(2080375376),	// SUBU_PH
    UINT64_C(2080374864),	// SUBU_QB
    UINT64_C(2080375632),	// SUBU_S_PH
    UINT64_C(2080375120),	// SUBU_S_QB
    UINT64_C(35),	// SUBu
    UINT64_C(1275068429),	// SUXC1
    UINT64_C(1275068429),	// SUXC164
    UINT64_C(2885681152),	// SW
    UINT64_C(2885681152),	// SW64
    UINT64_C(2885681152),	// SW64_P8
    UINT64_C(3825205248),	// SWC1
    UINT64_C(3825205248),	// SWC1_P8
    UINT64_C(2818572288),	// SWL
    UINT64_C(2818572288),	// SWL64
    UINT64_C(2818572288),	// SWL64_P8
    UINT64_C(2818572288),	// SWL_P8
    UINT64_C(3087007744),	// SWR
    UINT64_C(3087007744),	// SWR64
    UINT64_C(3087007744),	// SWR64_P8
    UINT64_C(3087007744),	// SWR_P8
    UINT64_C(1275068424),	// SWXC1
    UINT64_C(1275068424),	// SWXC1_P8
    UINT64_C(2885681152),	// SW_P8
    UINT64_C(15),	// SYNC
    UINT64_C(25600),	// SaveDecSpF16
    UINT64_C(25840),	// SaveRaF16
    UINT64_C(4026580992),	// SbRxRyOffMemX16
    UINT64_C(0),	// SelBeqZ
    UINT64_C(0),	// SelBneZ
    UINT64_C(0),	// SelTBteqZCmp
    UINT64_C(0),	// SelTBteqZCmpi
    UINT64_C(0),	// SelTBteqZSlt
    UINT64_C(0),	// SelTBteqZSlti
    UINT64_C(0),	// SelTBteqZSltiu
    UINT64_C(0),	// SelTBteqZSltu
    UINT64_C(0),	// SelTBtneZCmp
    UINT64_C(0),	// SelTBtneZCmpi
    UINT64_C(0),	// SelTBtneZSlt
    UINT64_C(0),	// SelTBtneZSlti
    UINT64_C(0),	// SelTBtneZSltiu
    UINT64_C(0),	// SelTBtneZSltu
    UINT64_C(4026583040),	// ShRxRyOffMemX16
    UINT64_C(4026544128),	// SllX16
    UINT64_C(59396),	// SllvRxRy16
    UINT64_C(59394),	// SltCCRxRy16
    UINT64_C(59394),	// SltRxRy16
    UINT64_C(4026552320),	// SltiCCRxImmX16
    UINT64_C(4026554368),	// SltiuCCRxImmX16
    UINT64_C(59395),	// SltuCCRxRy16
    UINT64_C(59395),	// SltuRxRyRz16
    UINT64_C(4026544131),	// SraX16
    UINT64_C(59399),	// SravRxRy16
    UINT64_C(4026544130),	// SrlX16
    UINT64_C(59398),	// SrlvRxRy16
    UINT64_C(57347),	// SubuRxRyRz16
    UINT64_C(4026587136),	// SwRxRyOffMemX16
    UINT64_C(4026585088),	// SwRxSpImmX16
    UINT64_C(134217728),	// TAILCALL
    UINT64_C(8),	// TAILCALL64_R
    UINT64_C(8),	// TAILCALL_R
    UINT64_C(1176502281),	// TRUNC_L_D64
    UINT64_C(1174405129),	// TRUNC_L_S
    UINT64_C(1176502285),	// TRUNC_W_D32
    UINT64_C(1176502285),	// TRUNC_W_D64
    UINT64_C(1174405133),	// TRUNC_W_S
    UINT64_C(27),	// UDIV
    UINT64_C(2080376056),	// WRDSP
    UINT64_C(2080374944),	// WSBH
    UINT64_C(38),	// XOR
    UINT64_C(38),	// XOR64
    UINT64_C(939524096),	// XORi
    UINT64_C(939524096),	// XORi64
    UINT64_C(59406),	// XorRxRxRy16
    UINT64_C(0)
  };
  const unsigned opcode = MI.getOpcode();
  uint64_t Value = InstBits[opcode];
  uint64_t op = 0;
  (void)op;  // suppress warning
  switch (opcode) {
    case Mips::JrRa16:
    case Mips::JrcRa16:
    case Mips::RestoreIncSpF16:
    case Mips::RestoreRaF16:
    case Mips::SaveDecSpF16:
    case Mips::SaveRaF16:
    case Mips::SelBeqZ:
    case Mips::SelBneZ:
    case Mips::SelTBteqZCmp:
    case Mips::SelTBteqZCmpi:
    case Mips::SelTBteqZSlt:
    case Mips::SelTBteqZSlti:
    case Mips::SelTBteqZSltiu:
    case Mips::SelTBteqZSltu:
    case Mips::SelTBtneZCmp:
    case Mips::SelTBtneZCmpi:
    case Mips::SelTBtneZSlt:
    case Mips::SelTBtneZSlti:
    case Mips::SelTBtneZSltiu:
    case Mips::SelTBtneZSltu: {
      break;
    }
    case Mips::MTHLIP:
    case Mips::SHILOV: {
      // op: ac
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(3)) << 11;
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case Mips::DPAQX_SA_W_PH:
    case Mips::DPAQX_S_W_PH:
    case Mips::DPAQ_SA_L_W:
    case Mips::DPAQ_S_W_PH:
    case Mips::DPAU_H_QBL:
    case Mips::DPAU_H_QBR:
    case Mips::DPAX_W_PH:
    case Mips::DPA_W_PH:
    case Mips::DPSQX_SA_W_PH:
    case Mips::DPSQX_S_W_PH:
    case Mips::DPSQ_SA_L_W:
    case Mips::DPSQ_S_W_PH:
    case Mips::DPSU_H_QBL:
    case Mips::DPSU_H_QBR:
    case Mips::DPSX_W_PH:
    case Mips::DPS_W_PH:
    case Mips::MADDU_DSP:
    case Mips::MADD_DSP:
    case Mips::MAQ_SA_W_PHL:
    case Mips::MAQ_SA_W_PHR:
    case Mips::MAQ_S_W_PHL:
    case Mips::MAQ_S_W_PHR:
    case Mips::MSUBU_DSP:
    case Mips::MSUB_DSP:
    case Mips::MULSAQ_S_W_PH:
    case Mips::MULSA_W_PH:
    case Mips::MULTU_DSP:
    case Mips::MULT_DSP: {
      // op: ac
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(3)) << 11;
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case Mips::SHILO: {
      // op: ac
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(3)) << 11;
      // op: shift
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(63)) << 20;
      break;
    }
    case Mips::LDXC1:
    case Mips::LDXC164:
    case Mips::LDXC164_P8:
    case Mips::LUXC1:
    case Mips::LUXC164:
    case Mips::LWXC1:
    case Mips::LWXC1_P8: {
      // op: fd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 6;
      // op: base
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: index
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case Mips::MADD_D32:
    case Mips::MADD_D64:
    case Mips::MADD_S:
    case Mips::MSUB_D32:
    case Mips::MSUB_D64:
    case Mips::MSUB_S:
    case Mips::NMADD_D32:
    case Mips::NMADD_D64:
    case Mips::NMADD_S:
    case Mips::NMSUB_D32:
    case Mips::NMSUB_D64:
    case Mips::NMSUB_S: {
      // op: fd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 6;
      // op: fr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: fs
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: ft
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case Mips::CEIL_L_D64:
    case Mips::CEIL_L_S:
    case Mips::CEIL_W_D32:
    case Mips::CEIL_W_D64:
    case Mips::CEIL_W_S:
    case Mips::CVT_D32_S:
    case Mips::CVT_D32_W:
    case Mips::CVT_D64_L:
    case Mips::CVT_D64_S:
    case Mips::CVT_D64_W:
    case Mips::CVT_L_D64:
    case Mips::CVT_L_S:
    case Mips::CVT_S_D32:
    case Mips::CVT_S_D64:
    case Mips::CVT_S_L:
    case Mips::CVT_S_W:
    case Mips::CVT_W_D32:
    case Mips::CVT_W_D64:
    case Mips::CVT_W_S:
    case Mips::FABS_D32:
    case Mips::FABS_D64:
    case Mips::FABS_S:
    case Mips::FLOOR_L_D64:
    case Mips::FLOOR_L_S:
    case Mips::FLOOR_W_D32:
    case Mips::FLOOR_W_D64:
    case Mips::FLOOR_W_S:
    case Mips::FMOV_D32:
    case Mips::FMOV_D64:
    case Mips::FMOV_S:
    case Mips::FNEG_D32:
    case Mips::FNEG_D64:
    case Mips::FNEG_S:
    case Mips::FSQRT_D32:
    case Mips::FSQRT_D64:
    case Mips::FSQRT_S:
    case Mips::MOVF_D32:
    case Mips::MOVF_D64:
    case Mips::MOVF_S:
    case Mips::MOVT_D32:
    case Mips::MOVT_D64:
    case Mips::MOVT_S:
    case Mips::ROUND_L_D64:
    case Mips::ROUND_L_S:
    case Mips::ROUND_W_D32:
    case Mips::ROUND_W_D64:
    case Mips::ROUND_W_S:
    case Mips::TRUNC_L_D64:
    case Mips::TRUNC_L_S:
    case Mips::TRUNC_W_D32:
    case Mips::TRUNC_W_D64:
    case Mips::TRUNC_W_S: {
      // op: fd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 6;
      // op: fs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case Mips::FADD_D32:
    case Mips::FADD_D64:
    case Mips::FADD_S:
    case Mips::FDIV_D32:
    case Mips::FDIV_D64:
    case Mips::FDIV_S:
    case Mips::FMUL_D32:
    case Mips::FMUL_D64:
    case Mips::FMUL_S:
    case Mips::FSUB_D32:
    case Mips::FSUB_D64:
    case Mips::FSUB_S: {
      // op: fd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 6;
      // op: fs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: ft
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case Mips::MOVN_I64_D64:
    case Mips::MOVN_I64_S:
    case Mips::MOVN_I_D32:
    case Mips::MOVN_I_D64:
    case Mips::MOVN_I_S:
    case Mips::MOVZ_I64_D64:
    case Mips::MOVZ_I64_S:
    case Mips::MOVZ_I_D32:
    case Mips::MOVZ_I_D64:
    case Mips::MOVZ_I_S: {
      // op: fd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 6;
      // op: fs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case Mips::SDXC1:
    case Mips::SDXC164:
    case Mips::SDXC164_P8:
    case Mips::SUXC1:
    case Mips::SUXC164:
    case Mips::SWXC1:
    case Mips::SWXC1_P8: {
      // op: fs
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: base
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: index
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case Mips::FCMP_D32:
    case Mips::FCMP_D64:
    case Mips::FCMP_S32: {
      // op: fs
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: ft
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: cond
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(15);
      break;
    }
    case Mips::AddiuRxRyOffMemX16: {
      // op: imm15
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(2032)) << 16;
      Value |= (op & UINT64_C(30720)) << 5;
      Value |= op & UINT64_C(15);
      // op: rx
      op = getMemEncoding(MI, 1, Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      // op: ry
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      break;
    }
    case Mips::BimmX16: {
      // op: imm16
      op = getBranchTargetOpValue(MI, 0, Fixups);
      Value |= (op & UINT64_C(2016)) << 16;
      Value |= (op & UINT64_C(63488)) << 5;
      Value |= op & UINT64_C(31);
      break;
    }
    case Mips::AddiuSpImmX16:
    case Mips::BteqzT8CmpX16:
    case Mips::BteqzT8CmpiX16:
    case Mips::BteqzT8SltX16:
    case Mips::BteqzT8SltiX16:
    case Mips::BteqzT8SltiuX16:
    case Mips::BteqzT8SltuX16:
    case Mips::BteqzX16:
    case Mips::BtnezT8CmpX16:
    case Mips::BtnezT8CmpiX16:
    case Mips::BtnezT8SltX16:
    case Mips::BtnezT8SltiX16:
    case Mips::BtnezT8SltiuX16:
    case Mips::BtnezT8SltuX16:
    case Mips::BtnezX16: {
      // op: imm16
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(2016)) << 16;
      Value |= (op & UINT64_C(63488)) << 5;
      Value |= op & UINT64_C(31);
      break;
    }
    case Mips::AddiuRxImmX16:
    case Mips::AddiuRxPcImmX16:
    case Mips::AddiuRxRxImmX16:
    case Mips::BeqzRxImmX16:
    case Mips::BnezRxImmX16:
    case Mips::LiRxImmX16:
    case Mips::LwRxSpImmX16:
    case Mips::SwRxSpImmX16: {
      // op: imm16
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(2016)) << 16;
      Value |= (op & UINT64_C(63488)) << 5;
      Value |= op & UINT64_C(31);
      // op: rx
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      break;
    }
    case Mips::SltiCCRxImmX16:
    case Mips::SltiuCCRxImmX16: {
      // op: imm16
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(2016)) << 16;
      Value |= (op & UINT64_C(63488)) << 5;
      Value |= op & UINT64_C(31);
      // op: rx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      break;
    }
    case Mips::LbRxRyOffMemX16:
    case Mips::LbuRxRyOffMemX16:
    case Mips::LhRxRyOffMemX16:
    case Mips::LhuRxRyOffMemX16:
    case Mips::LwRxRyOffMemX16:
    case Mips::SbRxRyOffMemX16:
    case Mips::ShRxRyOffMemX16:
    case Mips::SwRxRyOffMemX16: {
      // op: imm16
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(2016)) << 16;
      Value |= (op & UINT64_C(63488)) << 5;
      Value |= op & UINT64_C(31);
      // op: rx
      op = getMemEncoding(MI, 1, Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      // op: ry
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      break;
    }
    case Mips::Jal16: {
      // op: imm26
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(2031616)) << 5;
      Value |= (op & UINT64_C(65011712)) >> 5;
      Value |= op & UINT64_C(65535);
      break;
    }
    case Mips::B:
    case Mips::BAL_BR:
    case Mips::BC1F:
    case Mips::BC1T:
    case Mips::BPOSGE32: {
      // op: offset
      op = getBranchTargetOpValue(MI, 0, Fixups);
      Value |= op & UINT64_C(65535);
      break;
    }
    case Mips::Move32R16: {
      // op: r32
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      Value |= op & UINT64_C(24);
      // op: rz
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(7);
      break;
    }
    case Mips::MFHI:
    case Mips::MFHI64:
    case Mips::MFLO:
    case Mips::MFLO64: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case Mips::LBUX:
    case Mips::LHX:
    case Mips::LWX: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: base
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: index
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case Mips::REPL_PH:
    case Mips::REPL_QB: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1023)) << 16;
      break;
    }
    case Mips::RDDSP: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: mask
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1023)) << 16;
      break;
    }
    case Mips::JALR:
    case Mips::JALR64:
    case Mips::MOVF_I:
    case Mips::MOVF_I64:
    case Mips::MOVT_I:
    case Mips::MOVT_I64:
    case Mips::RADDU_W_QB: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case Mips::ADD:
    case Mips::ADDQH_PH:
    case Mips::ADDQH_R_PH:
    case Mips::ADDQH_R_W:
    case Mips::ADDQH_W:
    case Mips::ADDQ_PH:
    case Mips::ADDQ_S_PH:
    case Mips::ADDQ_S_W:
    case Mips::ADDSC:
    case Mips::ADDUH_QB:
    case Mips::ADDUH_R_QB:
    case Mips::ADDU_PH:
    case Mips::ADDU_QB:
    case Mips::ADDU_S_PH:
    case Mips::ADDU_S_QB:
    case Mips::ADDWC:
    case Mips::ADDu:
    case Mips::AND:
    case Mips::AND64:
    case Mips::DADD:
    case Mips::DADDu:
    case Mips::DSUBu:
    case Mips::MODSUB:
    case Mips::MOVN_I64_I:
    case Mips::MOVN_I64_I64:
    case Mips::MOVN_I_I:
    case Mips::MOVN_I_I64:
    case Mips::MOVZ_I64_I:
    case Mips::MOVZ_I64_I64:
    case Mips::MOVZ_I_I:
    case Mips::MOVZ_I_I64:
    case Mips::MUL:
    case Mips::MULEQ_S_W_PHL:
    case Mips::MULEQ_S_W_PHR:
    case Mips::MULEU_S_PH_QBL:
    case Mips::MULEU_S_PH_QBR:
    case Mips::MULQ_RS_PH:
    case Mips::MULQ_RS_W:
    case Mips::MULQ_S_PH:
    case Mips::MULQ_S_W:
    case Mips::MUL_PH:
    case Mips::MUL_S_PH:
    case Mips::NOR:
    case Mips::NOR64:
    case Mips::OR:
    case Mips::OR64:
    case Mips::SLT:
    case Mips::SLT64:
    case Mips::SLTu:
    case Mips::SLTu64:
    case Mips::SUB:
    case Mips::SUBQH_PH:
    case Mips::SUBQH_R_PH:
    case Mips::SUBQH_R_W:
    case Mips::SUBQH_W:
    case Mips::SUBQ_PH:
    case Mips::SUBQ_S_PH:
    case Mips::SUBQ_S_W:
    case Mips::SUBUH_QB:
    case Mips::SUBUH_R_QB:
    case Mips::SUBU_PH:
    case Mips::SUBU_QB:
    case Mips::SUBU_S_PH:
    case Mips::SUBU_S_QB:
    case Mips::SUBu:
    case Mips::XOR:
    case Mips::XOR64: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case Mips::ABSQ_S_PH:
    case Mips::ABSQ_S_QB:
    case Mips::ABSQ_S_W:
    case Mips::BITREV:
    case Mips::DSBH:
    case Mips::DSHD:
    case Mips::DSLL64_32:
    case Mips::PRECEQU_PH_QBL:
    case Mips::PRECEQU_PH_QBLA:
    case Mips::PRECEQU_PH_QBR:
    case Mips::PRECEQU_PH_QBRA:
    case Mips::PRECEQ_W_PHL:
    case Mips::PRECEQ_W_PHR:
    case Mips::PRECEU_PH_QBL:
    case Mips::PRECEU_PH_QBLA:
    case Mips::PRECEU_PH_QBR:
    case Mips::PRECEU_PH_QBRA:
    case Mips::REPLV_PH:
    case Mips::REPLV_QB:
    case Mips::SEB:
    case Mips::SEB64:
    case Mips::SEH:
    case Mips::SEH64:
    case Mips::SLL64_32:
    case Mips::SLL64_64:
    case Mips::WSBH: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case Mips::SHLLV_PH:
    case Mips::SHLLV_QB:
    case Mips::SHLLV_S_PH:
    case Mips::SHLLV_S_W:
    case Mips::SHLL_PH:
    case Mips::SHLL_QB:
    case Mips::SHLL_S_PH:
    case Mips::SHLL_S_W:
    case Mips::SHRAV_PH:
    case Mips::SHRAV_QB:
    case Mips::SHRAV_R_PH:
    case Mips::SHRAV_R_QB:
    case Mips::SHRAV_R_W:
    case Mips::SHRA_PH:
    case Mips::SHRA_QB:
    case Mips::SHRA_R_PH:
    case Mips::SHRA_R_QB:
    case Mips::SHRA_R_W:
    case Mips::SHRLV_PH:
    case Mips::SHRLV_QB:
    case Mips::SHRL_PH:
    case Mips::SHRL_QB: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: rs_sa
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case Mips::DROTR:
    case Mips::DSLL:
    case Mips::DSLL32:
    case Mips::DSRA:
    case Mips::DSRA32:
    case Mips::DSRL:
    case Mips::DSRL32:
    case Mips::ROTR:
    case Mips::SLL:
    case Mips::SRA:
    case Mips::SRL: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: shamt
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 6;
      break;
    }
    case Mips::DROTRV:
    case Mips::DSLLV:
    case Mips::DSRAV:
    case Mips::DSRLV:
    case Mips::ROTRV:
    case Mips::SLLV:
    case Mips::SRAV:
    case Mips::SRLV: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case Mips::CLO:
    case Mips::CLZ:
    case Mips::DCLO:
    case Mips::DCLZ: {
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      Value |= (op & UINT64_C(31)) << 11;
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case Mips::JR:
    case Mips::JR64:
    case Mips::MTHI:
    case Mips::MTHI64:
    case Mips::MTLO:
    case Mips::MTLO64:
    case Mips::RET:
    case Mips::TAILCALL64_R:
    case Mips::TAILCALL_R: {
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case Mips::WRDSP: {
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: mask
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1023)) << 11;
      break;
    }
    case Mips::BGEZ:
    case Mips::BGEZ64:
    case Mips::BGEZAL:
    case Mips::BGTZ:
    case Mips::BGTZ64:
    case Mips::BLEZ:
    case Mips::BLEZ64:
    case Mips::BLTZ:
    case Mips::BLTZ64:
    case Mips::BLTZAL: {
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: offset
      op = getBranchTargetOpValue(MI, 1, Fixups);
      Value |= op & UINT64_C(65535);
      break;
    }
    case Mips::CMPU_EQ_QB:
    case Mips::CMPU_LE_QB:
    case Mips::CMPU_LT_QB:
    case Mips::CMP_EQ_PH:
    case Mips::CMP_LE_PH:
    case Mips::CMP_LT_PH:
    case Mips::DMULT:
    case Mips::DMULTu:
    case Mips::DSDIV:
    case Mips::DUDIV:
    case Mips::MADD:
    case Mips::MADDU:
    case Mips::MSUB:
    case Mips::MSUBU:
    case Mips::MULT:
    case Mips::MULTu:
    case Mips::SDIV:
    case Mips::UDIV: {
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case Mips::BEQ:
    case Mips::BEQ64:
    case Mips::BNE:
    case Mips::BNE64: {
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: offset
      op = getBranchTargetOpValue(MI, 2, Fixups);
      Value |= op & UINT64_C(65535);
      break;
    }
    case Mips::ADDi:
    case Mips::ADDiu:
    case Mips::ANDi:
    case Mips::DADDi:
    case Mips::DADDiu:
    case Mips::DANDi:
    case Mips::ORi:
    case Mips::ORi64:
    case Mips::XORi:
    case Mips::XORi64: {
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: imm16
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(65535);
      break;
    }
    case Mips::PRECR_SRA_PH_W:
    case Mips::PRECR_SRA_R_PH_W: {
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: sa
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case Mips::CMPGDU_EQ_QB:
    case Mips::CMPGDU_LE_QB:
    case Mips::CMPGDU_LT_QB:
    case Mips::CMPGU_EQ_QB:
    case Mips::CMPGU_LE_QB:
    case Mips::CMPGU_LT_QB:
    case Mips::PACKRL_PH:
    case Mips::PICK_PH:
    case Mips::PICK_QB:
    case Mips::PRECRQU_S_QB_PH:
    case Mips::PRECRQ_PH_W:
    case Mips::PRECRQ_QB_PH:
    case Mips::PRECRQ_RS_PH_W:
    case Mips::PRECR_QB_PH: {
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case Mips::EXTP:
    case Mips::EXTPDP:
    case Mips::EXTPDPV:
    case Mips::EXTPV:
    case Mips::EXTRV_RS_W:
    case Mips::EXTRV_R_W:
    case Mips::EXTRV_S_H:
    case Mips::EXTRV_W:
    case Mips::EXTR_RS_W:
    case Mips::EXTR_R_W:
    case Mips::EXTR_S_H:
    case Mips::EXTR_W: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: ac
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(3)) << 11;
      // op: shift_rs
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case Mips::LB:
    case Mips::LB64:
    case Mips::LB64_P8:
    case Mips::LB_P8:
    case Mips::LBu:
    case Mips::LBu64:
    case Mips::LBu64_P8:
    case Mips::LBu_P8:
    case Mips::LD:
    case Mips::LDC1:
    case Mips::LDC164:
    case Mips::LDC164_P8:
    case Mips::LDL:
    case Mips::LDL_P8:
    case Mips::LDR:
    case Mips::LDR_P8:
    case Mips::LD_P8:
    case Mips::LEA_ADDiu:
    case Mips::LEA_ADDiu64:
    case Mips::LH:
    case Mips::LH64:
    case Mips::LH64_P8:
    case Mips::LH_P8:
    case Mips::LHu:
    case Mips::LHu64:
    case Mips::LHu64_P8:
    case Mips::LHu_P8:
    case Mips::LL:
    case Mips::LLD:
    case Mips::LLD_P8:
    case Mips::LL_P8:
    case Mips::LW:
    case Mips::LW64:
    case Mips::LW64_P8:
    case Mips::LWC1:
    case Mips::LWC1_P8:
    case Mips::LWL:
    case Mips::LWL64:
    case Mips::LWL64_P8:
    case Mips::LWL_P8:
    case Mips::LWR:
    case Mips::LWR64:
    case Mips::LWR64_P8:
    case Mips::LWR_P8:
    case Mips::LW_P8:
    case Mips::LWu64:
    case Mips::LWu64_P8:
    case Mips::SB:
    case Mips::SB64:
    case Mips::SB64_P8:
    case Mips::SB_P8:
    case Mips::SD:
    case Mips::SDC1:
    case Mips::SDC164:
    case Mips::SDC164_P8:
    case Mips::SDL:
    case Mips::SDL_P8:
    case Mips::SDR:
    case Mips::SDR_P8:
    case Mips::SD_P8:
    case Mips::SH:
    case Mips::SH64:
    case Mips::SH64_P8:
    case Mips::SH_P8:
    case Mips::SW:
    case Mips::SW64:
    case Mips::SW64_P8:
    case Mips::SWC1:
    case Mips::SWC1_P8:
    case Mips::SWL:
    case Mips::SWL64:
    case Mips::SWL64_P8:
    case Mips::SWL_P8:
    case Mips::SWR:
    case Mips::SWR64:
    case Mips::SWR64_P8:
    case Mips::SWR_P8:
    case Mips::SW_P8: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: addr
      op = getMemEncoding(MI, 1, Fixups);
      Value |= (op & UINT64_C(2031616)) << 5;
      Value |= op & UINT64_C(65535);
      break;
    }
    case Mips::CFC1:
    case Mips::DMFC1:
    case Mips::MFC1: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: fs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case Mips::LUi:
    case Mips::LUi64: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: imm16
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(65535);
      break;
    }
    case Mips::RDHWR:
    case Mips::RDHWR64: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case Mips::DMFC0_3OP64:
    case Mips::DMFC2_3OP64:
    case Mips::MFC0_3OP:
    case Mips::MFC2_3OP: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: sel
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(7);
      break;
    }
    case Mips::SLTi:
    case Mips::SLTi64:
    case Mips::SLTiu:
    case Mips::SLTiu64: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: imm16
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(65535);
      break;
    }
    case Mips::DEXT:
    case Mips::DEXTM:
    case Mips::DEXTU:
    case Mips::EXT: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: pos
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 6;
      // op: size
      op = getSizeExtEncoding(MI, 3, Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case Mips::DINS:
    case Mips::DINSM:
    case Mips::DINSU:
    case Mips::INS: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: pos
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 6;
      // op: size
      op = getSizeInsEncoding(MI, 3, Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case Mips::APPEND:
    case Mips::BALIGN:
    case Mips::PREPEND: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      // op: sa
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case Mips::INSV: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: rs
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 21;
      break;
    }
    case Mips::SC:
    case Mips::SCD:
    case Mips::SCD_P8:
    case Mips::SC_P8: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: addr
      op = getMemEncoding(MI, 2, Fixups);
      Value |= (op & UINT64_C(2031616)) << 5;
      Value |= op & UINT64_C(65535);
      break;
    }
    case Mips::CTC1:
    case Mips::DMTC1:
    case Mips::MTC1: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: fs
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      break;
    }
    case Mips::DMTC0_3OP64:
    case Mips::DMTC2_3OP64:
    case Mips::MTC0_3OP:
    case Mips::MTC2_3OP: {
      // op: rt
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 11;
      // op: sel
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(7);
      break;
    }
    case Mips::JrcRx16:
    case Mips::JumpLinkReg16: {
      // op: rx
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      break;
    }
    case Mips::AddiuRxRxImm16: {
      // op: rx
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      // op: imm8
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(255);
      break;
    }
    case Mips::Mfhi16:
    case Mips::Mflo16: {
      // op: rx
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      // op: ry
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      break;
    }
    case Mips::DivRxRy16:
    case Mips::DivuRxRy16:
    case Mips::NegRxRy16:
    case Mips::NotRxRy16:
    case Mips::SltRxRy16: {
      // op: rx
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      // op: ry
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      break;
    }
    case Mips::AndRxRxRy16:
    case Mips::OrRxRxRy16:
    case Mips::SllvRxRy16:
    case Mips::SltCCRxRy16:
    case Mips::SltuCCRxRy16:
    case Mips::SltuRxRyRz16:
    case Mips::SravRxRy16:
    case Mips::SrlvRxRy16:
    case Mips::XorRxRxRy16: {
      // op: rx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      // op: ry
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      break;
    }
    case Mips::AdduRxRyRz16:
    case Mips::SubuRxRyRz16: {
      // op: rx
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      // op: ry
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      // op: rz
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 2;
      break;
    }
    case Mips::MoveR3216: {
      // op: ry
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(15)) << 4;
      // op: r32
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(15);
      break;
    }
    case Mips::SllX16:
    case Mips::SraX16:
    case Mips::SrlX16: {
      // op: sa6
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 22;
      Value |= (op & UINT64_C(32)) << 16;
      // op: rx
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      // op: ry
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      break;
    }
    case Mips::SYNC: {
      // op: stype
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 6;
      break;
    }
    case Mips::J:
    case Mips::JAL:
    case Mips::TAILCALL: {
      // op: target
      op = getJumpTargetOpValue(MI, 0, Fixups);
      Value |= op & UINT64_C(67108863);
      break;
    }
  default:
    std::string msg;
    raw_string_ostream Msg(msg);
    Msg << "Not supported instr: " << MI;
    report_fatal_error(Msg.str());
  }
  return Value;
}

